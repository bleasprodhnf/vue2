{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { insertFriendRequest as databaseInsertFriendRequest, deleteFriendRequestBothUserID as databasedeleteFriendRequestBothUserID, updateFriendRequest as databaseupdateFriendRequest, getRecvFriendApplication as databaseGetRecvFriendApplication, getSendFriendApplication as databaseGetSendFriendApplication, getFriendApplicationByBothID as databaseGetFriendApplicationByBothID } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertFriendRequest(localFriendRequestStr) {\n  try {\n    const db = await getInstance();\n    const localFriendRequest = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendRequestStr)));\n    databaseInsertFriendRequest(db, localFriendRequest);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteFriendRequestBothUserID(fromUserID, toUserID) {\n  try {\n    const db = await getInstance();\n    databasedeleteFriendRequestBothUserID(db, fromUserID, toUserID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateFriendRequest(localFriendRequestStr) {\n  try {\n    const db = await getInstance();\n    const localFriendRequest = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendRequestStr)));\n    databaseupdateFriendRequest(db, localFriendRequest);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getRecvFriendApplication(loginUserID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetRecvFriendApplication(db, loginUserID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getSendFriendApplication(fromUserId) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetSendFriendApplication(db, fromUserId);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getFriendApplicationByBothID(fromUserID, toUserID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetFriendApplicationByBothID(db, fromUserID, toUserID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","insertFriendRequest","databaseInsertFriendRequest","deleteFriendRequestBothUserID","databasedeleteFriendRequestBothUserID","updateFriendRequest","databaseupdateFriendRequest","getRecvFriendApplication","databaseGetRecvFriendApplication","getSendFriendApplication","databaseGetSendFriendApplication","getFriendApplicationByBothID","databaseGetFriendApplicationByBothID","converSqlExecResult","convertObjectField","convertToSnakeCaseObject","formatResponse","getInstance","localFriendRequestStr","db","localFriendRequest","JSON","parse","e","console","error","undefined","ErrorInit","stringify","fromUserID","toUserID","loginUserID","execResult","fromUserId"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/api/database/friendRequest.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { insertFriendRequest as databaseInsertFriendRequest, deleteFriendRequestBothUserID as databasedeleteFriendRequestBothUserID, updateFriendRequest as databaseupdateFriendRequest, getRecvFriendApplication as databaseGetRecvFriendApplication, getSendFriendApplication as databaseGetSendFriendApplication, getFriendApplicationByBothID as databaseGetFriendApplicationByBothID, } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertFriendRequest(localFriendRequestStr) {\n    try {\n        const db = await getInstance();\n        const localFriendRequest = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendRequestStr)));\n        databaseInsertFriendRequest(db, localFriendRequest);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteFriendRequestBothUserID(fromUserID, toUserID) {\n    try {\n        const db = await getInstance();\n        databasedeleteFriendRequestBothUserID(db, fromUserID, toUserID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateFriendRequest(localFriendRequestStr) {\n    try {\n        const db = await getInstance();\n        const localFriendRequest = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendRequestStr)));\n        databaseupdateFriendRequest(db, localFriendRequest);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getRecvFriendApplication(loginUserID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetRecvFriendApplication(db, loginUserID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getSendFriendApplication(fromUserId) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetSendFriendApplication(db, fromUserId);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getFriendApplicationByBothID(fromUserID, toUserID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetFriendApplicationByBothID(db, fromUserID, toUserID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}