{"ast":null,"code":"import squel from 'squel';\nexport function localGroups(db) {\n  return db.exec(`\n      create table if not exists 'local_groups'\n      (\n          'group_id'                 varchar(64) PRIMARY KEY,\n          'name'                  TEXT,\n          'notification'            varchar(255),\n          'introduction'            varchar(255),\n          'face_url'           varchar(255),\n          'create_time'             INTEGER,\n          'status'              INTEGER,\n          'creator_user_id'      varchar(64),\n          'group_type'              INTEGER,\n          'owner_user_id'          varchar(64),\n          'member_count'            INTEGER,\n          'ex'                   varchar(1024),\n          'attached_info'           varchar(1024),\n          'need_verification'     INTEGER,\n          'look_member_info'     INTEGER,\n          'apply_member_friend'      INTEGER,\n          'notification_update_time' INTEGER,\n          'notification_user_id'   TEXT\n      )  \n      `);\n}\nexport function insertGroup(db, localGroup) {\n  const sql = squel.insert().into('local_groups').setFields(localGroup).toString();\n  return db.exec(sql);\n}\nexport function deleteGroup(db, groupID) {\n  return db.exec(`\n    DELETE FROM local_groups \n          WHERE group_id=\"${groupID}\" \n        `);\n}\nexport function updateGroup(db, groupID, localGroup) {\n  const sql = squel.update().table('local_groups').setFields(localGroup).where(`group_id = '${groupID}'`).toString();\n  return db.exec(sql);\n}\nexport function getJoinedGroupList(db) {\n  return db.exec(`\n    SELECT * FROM local_groups\n    `);\n}\nexport function getGroupInfoByGroupID(db, groupID) {\n  return db.exec(`\n    SELECT *\n      FROM local_groups\n      WHERE group_id = \"${groupID}\"\n    `);\n}\nexport function getAllGroupInfoByGroupIDOrGroupName(db, keyword, isSearchGroupID, isSearchGroupName) {\n  let totalConditionStr = '';\n  const groupIDCondition = `group_id like \"%${keyword}%\"`;\n  const groupNameCondition = `name like \"%${keyword}%\"`;\n  if (isSearchGroupID) {\n    totalConditionStr = groupIDCondition;\n  }\n  if (isSearchGroupName) {\n    totalConditionStr = groupNameCondition;\n  }\n  if (isSearchGroupName && isSearchGroupID) {\n    totalConditionStr = groupIDCondition + 'or' + groupNameCondition;\n  }\n  return db.exec(`\n    select *\n    from local_groups\n    where ${totalConditionStr}\n    order by create_time desc\n    `);\n}\nexport function subtractMemberCount(db, groupID) {\n  return db.exec(`  \n    update local_groups set member_count = member_count-1 where group_id = '${groupID}'\n    `);\n}\nexport function addMemberCount(db, groupID) {\n  return db.exec(`  \n    update local_groups set member_count = member_count+1 where group_id = '${groupID}'   \n    `);\n}\n// export function getJoinedWorkingGroupIDList(db: Database): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     select * from local_groups\n//     groupType = 2\n//     `\n//   );\n// }\n// export function getJoinedWorkingGroupList(db: Database): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     select * from local_groups\n//     groupType = 2\n//     `\n//   );\n// }","map":{"version":3,"names":["squel","localGroups","db","exec","insertGroup","localGroup","sql","insert","into","setFields","toString","deleteGroup","groupID","updateGroup","update","table","where","getJoinedGroupList","getGroupInfoByGroupID","getAllGroupInfoByGroupIDOrGroupName","keyword","isSearchGroupID","isSearchGroupName","totalConditionStr","groupIDCondition","groupNameCondition","subtractMemberCount","addMemberCount"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/sqls/localGroups.js"],"sourcesContent":["import squel from 'squel';\nexport function localGroups(db) {\n    return db.exec(`\n      create table if not exists 'local_groups'\n      (\n          'group_id'                 varchar(64) PRIMARY KEY,\n          'name'                  TEXT,\n          'notification'            varchar(255),\n          'introduction'            varchar(255),\n          'face_url'           varchar(255),\n          'create_time'             INTEGER,\n          'status'              INTEGER,\n          'creator_user_id'      varchar(64),\n          'group_type'              INTEGER,\n          'owner_user_id'          varchar(64),\n          'member_count'            INTEGER,\n          'ex'                   varchar(1024),\n          'attached_info'           varchar(1024),\n          'need_verification'     INTEGER,\n          'look_member_info'     INTEGER,\n          'apply_member_friend'      INTEGER,\n          'notification_update_time' INTEGER,\n          'notification_user_id'   TEXT\n      )  \n      `);\n}\nexport function insertGroup(db, localGroup) {\n    const sql = squel\n        .insert()\n        .into('local_groups')\n        .setFields(localGroup)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteGroup(db, groupID) {\n    return db.exec(`\n    DELETE FROM local_groups \n          WHERE group_id=\"${groupID}\" \n        `);\n}\nexport function updateGroup(db, groupID, localGroup) {\n    const sql = squel\n        .update()\n        .table('local_groups')\n        .setFields(localGroup)\n        .where(`group_id = '${groupID}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function getJoinedGroupList(db) {\n    return db.exec(`\n    SELECT * FROM local_groups\n    `);\n}\nexport function getGroupInfoByGroupID(db, groupID) {\n    return db.exec(`\n    SELECT *\n      FROM local_groups\n      WHERE group_id = \"${groupID}\"\n    `);\n}\nexport function getAllGroupInfoByGroupIDOrGroupName(db, keyword, isSearchGroupID, isSearchGroupName) {\n    let totalConditionStr = '';\n    const groupIDCondition = `group_id like \"%${keyword}%\"`;\n    const groupNameCondition = `name like \"%${keyword}%\"`;\n    if (isSearchGroupID) {\n        totalConditionStr = groupIDCondition;\n    }\n    if (isSearchGroupName) {\n        totalConditionStr = groupNameCondition;\n    }\n    if (isSearchGroupName && isSearchGroupID) {\n        totalConditionStr = groupIDCondition + 'or' + groupNameCondition;\n    }\n    return db.exec(`\n    select *\n    from local_groups\n    where ${totalConditionStr}\n    order by create_time desc\n    `);\n}\nexport function subtractMemberCount(db, groupID) {\n    return db.exec(`  \n    update local_groups set member_count = member_count-1 where group_id = '${groupID}'\n    `);\n}\nexport function addMemberCount(db, groupID) {\n    return db.exec(`  \n    update local_groups set member_count = member_count+1 where group_id = '${groupID}'   \n    `);\n}\n// export function getJoinedWorkingGroupIDList(db: Database): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     select * from local_groups\n//     groupType = 2\n//     `\n//   );\n// }\n// export function getJoinedWorkingGroupList(db: Database): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     select * from local_groups\n//     groupType = 2\n//     `\n//   );\n// }\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,WAAWA,CAACC,EAAE,EAAE;EAC5B,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASC,WAAWA,CAACF,EAAE,EAAEG,UAAU,EAAE;EACxC,MAAMC,GAAG,GAAGN,KAAK,CACZO,MAAM,CAAC,CAAC,CACRC,IAAI,CAAC,cAAc,CAAC,CACpBC,SAAS,CAACJ,UAAU,CAAC,CACrBK,QAAQ,CAAC,CAAC;EACf,OAAOR,EAAE,CAACC,IAAI,CAACG,GAAG,CAAC;AACvB;AACA,OAAO,SAASK,WAAWA,CAACT,EAAE,EAAEU,OAAO,EAAE;EACrC,OAAOV,EAAE,CAACC,IAAI,CAAE;AACpB;AACA,4BAA4BS,OAAQ;AACpC,SAAS,CAAC;AACV;AACA,OAAO,SAASC,WAAWA,CAACX,EAAE,EAAEU,OAAO,EAAEP,UAAU,EAAE;EACjD,MAAMC,GAAG,GAAGN,KAAK,CACZc,MAAM,CAAC,CAAC,CACRC,KAAK,CAAC,cAAc,CAAC,CACrBN,SAAS,CAACJ,UAAU,CAAC,CACrBW,KAAK,CAAE,eAAcJ,OAAQ,GAAE,CAAC,CAChCF,QAAQ,CAAC,CAAC;EACf,OAAOR,EAAE,CAACC,IAAI,CAACG,GAAG,CAAC;AACvB;AACA,OAAO,SAASW,kBAAkBA,CAACf,EAAE,EAAE;EACnC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA,KAAK,CAAC;AACN;AACA,OAAO,SAASe,qBAAqBA,CAAChB,EAAE,EAAEU,OAAO,EAAE;EAC/C,OAAOV,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,0BAA0BS,OAAQ;AAClC,KAAK,CAAC;AACN;AACA,OAAO,SAASO,mCAAmCA,CAACjB,EAAE,EAAEkB,OAAO,EAAEC,eAAe,EAAEC,iBAAiB,EAAE;EACjG,IAAIC,iBAAiB,GAAG,EAAE;EAC1B,MAAMC,gBAAgB,GAAI,mBAAkBJ,OAAQ,IAAG;EACvD,MAAMK,kBAAkB,GAAI,eAAcL,OAAQ,IAAG;EACrD,IAAIC,eAAe,EAAE;IACjBE,iBAAiB,GAAGC,gBAAgB;EACxC;EACA,IAAIF,iBAAiB,EAAE;IACnBC,iBAAiB,GAAGE,kBAAkB;EAC1C;EACA,IAAIH,iBAAiB,IAAID,eAAe,EAAE;IACtCE,iBAAiB,GAAGC,gBAAgB,GAAG,IAAI,GAAGC,kBAAkB;EACpE;EACA,OAAOvB,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,YAAYoB,iBAAkB;AAC9B;AACA,KAAK,CAAC;AACN;AACA,OAAO,SAASG,mBAAmBA,CAACxB,EAAE,EAAEU,OAAO,EAAE;EAC7C,OAAOV,EAAE,CAACC,IAAI,CAAE;AACpB,8EAA8ES,OAAQ;AACtF,KAAK,CAAC;AACN;AACA,OAAO,SAASe,cAAcA,CAACzB,EAAE,EAAEU,OAAO,EAAE;EACxC,OAAOV,EAAE,CAACC,IAAI,CAAE;AACpB,8EAA8ES,OAAQ;AACtF,KAAK,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}