{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { insertFriend as databaseInsertFriend, deleteFriend as databasedeleteFriend, updateFriend as databaseupdateFriend, getAllFriendList as databaseGetAllFriendList, searchFriendList as databasesearchFriendList, getFriendInfoByFriendUserID as databaseGetFriendInfoByFriendUserID, getFriendInfoList as databaseGetFriendInfoList } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertFriend(localFriendStr) {\n  try {\n    const db = await getInstance();\n    const localFriend = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendStr), {\n      userID: 'friend_user_id',\n      nickname: 'name'\n    }));\n    databaseInsertFriend(db, localFriend);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteFriend(friendUserID, loginUserID) {\n  try {\n    const db = await getInstance();\n    databasedeleteFriend(db, friendUserID, loginUserID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateFriend(localFriendStr) {\n  try {\n    const db = await getInstance();\n    const localFriend = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendStr), {\n      userID: 'friend_user_id',\n      nickname: 'name'\n    }));\n    databaseupdateFriend(db, localFriend);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getAllFriendList(loginUserID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetAllFriendList(db, loginUserID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'nickname',\n      friend_user_id: 'userID'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function searchFriendList(key, isSearchUserID, isSearchNickname, isSearchRemark) {\n  try {\n    const db = await getInstance();\n    const execResult = databasesearchFriendList(db, key, isSearchUserID, isSearchNickname, isSearchRemark);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'nickname',\n      friend_user_id: 'userID'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getFriendInfoByFriendUserID(friendUserID, loginUserID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetFriendInfoByFriendUserID(db, friendUserID, loginUserID);\n    if (execResult.length === 0) {\n      return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no friend with id ${friendUserID}`);\n    }\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'nickname',\n      friend_user_id: 'userID'\n    })[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getFriendInfoList(friendUserIDListStr) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetFriendInfoList(db, JSON.parse(friendUserIDListStr));\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'nickname',\n      friend_user_id: 'userID'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","insertFriend","databaseInsertFriend","deleteFriend","databasedeleteFriend","updateFriend","databaseupdateFriend","getAllFriendList","databaseGetAllFriendList","searchFriendList","databasesearchFriendList","getFriendInfoByFriendUserID","databaseGetFriendInfoByFriendUserID","getFriendInfoList","databaseGetFriendInfoList","converSqlExecResult","convertObjectField","convertToSnakeCaseObject","formatResponse","getInstance","localFriendStr","db","localFriend","JSON","parse","userID","nickname","e","console","error","undefined","ErrorInit","stringify","friendUserID","loginUserID","execResult","name","friend_user_id","key","isSearchUserID","isSearchNickname","isSearchRemark","length","ErrorNoRecord","friendUserIDListStr"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/api/database/friend.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { insertFriend as databaseInsertFriend, deleteFriend as databasedeleteFriend, updateFriend as databaseupdateFriend, getAllFriendList as databaseGetAllFriendList, searchFriendList as databasesearchFriendList, getFriendInfoByFriendUserID as databaseGetFriendInfoByFriendUserID, getFriendInfoList as databaseGetFriendInfoList, } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertFriend(localFriendStr) {\n    try {\n        const db = await getInstance();\n        const localFriend = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendStr), {\n            userID: 'friend_user_id',\n            nickname: 'name',\n        }));\n        databaseInsertFriend(db, localFriend);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteFriend(friendUserID, loginUserID) {\n    try {\n        const db = await getInstance();\n        databasedeleteFriend(db, friendUserID, loginUserID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateFriend(localFriendStr) {\n    try {\n        const db = await getInstance();\n        const localFriend = convertToSnakeCaseObject(convertObjectField(JSON.parse(localFriendStr), {\n            userID: 'friend_user_id',\n            nickname: 'name',\n        }));\n        databaseupdateFriend(db, localFriend);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getAllFriendList(loginUserID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetAllFriendList(db, loginUserID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'nickname',\n            friend_user_id: 'userID',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function searchFriendList(key, isSearchUserID, isSearchNickname, isSearchRemark) {\n    try {\n        const db = await getInstance();\n        const execResult = databasesearchFriendList(db, key, isSearchUserID, isSearchNickname, isSearchRemark);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'nickname',\n            friend_user_id: 'userID',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getFriendInfoByFriendUserID(friendUserID, loginUserID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetFriendInfoByFriendUserID(db, friendUserID, loginUserID);\n        if (execResult.length === 0) {\n            return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no friend with id ${friendUserID}`);\n        }\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'nickname',\n            friend_user_id: 'userID',\n        })[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getFriendInfoList(friendUserIDListStr) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetFriendInfoList(db, JSON.parse(friendUserIDListStr));\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'nickname',\n            friend_user_id: 'userID',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}