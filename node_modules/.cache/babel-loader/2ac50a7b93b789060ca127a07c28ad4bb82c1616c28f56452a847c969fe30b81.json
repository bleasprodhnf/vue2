{"ast":null,"code":"import squel from 'squel';\nexport function locaBlacks(db) {\n  return db.exec(`\n      create table if not exists 'local_blacks' (\n        'owner_user_id'     varchar(64),\n        'block_user_id'     varchar(64),\n        'nickname'         varchar(255),\n        'face_url'         varchar(255),\n        'gender'           INTEGER,\n        'create_time'      INTEGER,\n        'add_source'      INTEGER,\n        'operator_user_id'   varchar(64),\n        'ex'              varchar(1024),\n        'attached_info'     varchar(1024),\n        primary key  ('owner_user_id', 'block_user_id')\n    ) \n      `);\n}\nexport function getBlackList(db) {\n  return db.exec(`\n      select *\n      from local_blacks\n      `);\n}\nexport function getBlackListUserID(db) {\n  return db.exec(`\n    SELECT block_user_id\n    FROM local_blacks\n      `);\n}\nexport function getBlackInfoByBlockUserID(db, blockUserID, loginUserID) {\n  return db.exec(`\n      SELECT *\n        FROM local_blacks\n        WHERE owner_user_id = \"${loginUserID}\"\n          AND block_user_id = \"${blockUserID}\"\n        LIMIT 1\n      `);\n}\nexport function getBlackInfoList(db, blockUserIDList) {\n  const ids = blockUserIDList.map(v => `'${v}'`);\n  return db.exec(`\n    select *\n    from local_blacks\n    where block_user_id in (${ids.join(',')})\n      `);\n}\nexport function insertBlack(db, localBlack) {\n  const sql = squel.insert().into('local_blacks').setFields(localBlack).toString();\n  return db.exec(sql);\n}\nexport function updateBlack(db, localBlack) {\n  const sql = squel.update().table('local_blacks').setFields(localBlack).where(`owner_user_id = '${localBlack.owner_user_id}' and block_user_id = '${localBlack.block_user_id}'`).toString();\n  return db.exec(sql);\n}\nexport function deleteBlack(db, blockUserID, loginUserID) {\n  return db.exec(`\n    delete\n    from local_blacks\n    where owner_user_id = \"${loginUserID}\"\n    and block_user_id = \"${blockUserID}\"\n      `);\n}","map":{"version":3,"names":["squel","locaBlacks","db","exec","getBlackList","getBlackListUserID","getBlackInfoByBlockUserID","blockUserID","loginUserID","getBlackInfoList","blockUserIDList","ids","map","v","join","insertBlack","localBlack","sql","insert","into","setFields","toString","updateBlack","update","table","where","owner_user_id","block_user_id","deleteBlack"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/sqls/localBlack.js"],"sourcesContent":["import squel from 'squel';\nexport function locaBlacks(db) {\n    return db.exec(`\n      create table if not exists 'local_blacks' (\n        'owner_user_id'     varchar(64),\n        'block_user_id'     varchar(64),\n        'nickname'         varchar(255),\n        'face_url'         varchar(255),\n        'gender'           INTEGER,\n        'create_time'      INTEGER,\n        'add_source'      INTEGER,\n        'operator_user_id'   varchar(64),\n        'ex'              varchar(1024),\n        'attached_info'     varchar(1024),\n        primary key  ('owner_user_id', 'block_user_id')\n    ) \n      `);\n}\nexport function getBlackList(db) {\n    return db.exec(`\n      select *\n      from local_blacks\n      `);\n}\nexport function getBlackListUserID(db) {\n    return db.exec(`\n    SELECT block_user_id\n    FROM local_blacks\n      `);\n}\nexport function getBlackInfoByBlockUserID(db, blockUserID, loginUserID) {\n    return db.exec(`\n      SELECT *\n        FROM local_blacks\n        WHERE owner_user_id = \"${loginUserID}\"\n          AND block_user_id = \"${blockUserID}\"\n        LIMIT 1\n      `);\n}\nexport function getBlackInfoList(db, blockUserIDList) {\n    const ids = blockUserIDList.map(v => `'${v}'`);\n    return db.exec(`\n    select *\n    from local_blacks\n    where block_user_id in (${ids.join(',')})\n      `);\n}\nexport function insertBlack(db, localBlack) {\n    const sql = squel\n        .insert()\n        .into('local_blacks')\n        .setFields(localBlack)\n        .toString();\n    return db.exec(sql);\n}\nexport function updateBlack(db, localBlack) {\n    const sql = squel\n        .update()\n        .table('local_blacks')\n        .setFields(localBlack)\n        .where(`owner_user_id = '${localBlack.owner_user_id}' and block_user_id = '${localBlack.block_user_id}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteBlack(db, blockUserID, loginUserID) {\n    return db.exec(`\n    delete\n    from local_blacks\n    where owner_user_id = \"${loginUserID}\"\n    and block_user_id = \"${blockUserID}\"\n      `);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,UAAUA,CAACC,EAAE,EAAE;EAC3B,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASC,YAAYA,CAACF,EAAE,EAAE;EAC7B,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASE,kBAAkBA,CAACH,EAAE,EAAE;EACnC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASG,yBAAyBA,CAACJ,EAAE,EAAEK,WAAW,EAAEC,WAAW,EAAE;EACpE,OAAON,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,iCAAiCK,WAAY;AAC7C,iCAAiCD,WAAY;AAC7C;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASE,gBAAgBA,CAACP,EAAE,EAAEQ,eAAe,EAAE;EAClD,MAAMC,GAAG,GAAGD,eAAe,CAACE,GAAG,CAACC,CAAC,IAAK,IAAGA,CAAE,GAAE,CAAC;EAC9C,OAAOX,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,8BAA8BQ,GAAG,CAACG,IAAI,CAAC,GAAG,CAAE;AAC5C,OAAO,CAAC;AACR;AACA,OAAO,SAASC,WAAWA,CAACb,EAAE,EAAEc,UAAU,EAAE;EACxC,MAAMC,GAAG,GAAGjB,KAAK,CACZkB,MAAM,CAAC,CAAC,CACRC,IAAI,CAAC,cAAc,CAAC,CACpBC,SAAS,CAACJ,UAAU,CAAC,CACrBK,QAAQ,CAAC,CAAC;EACf,OAAOnB,EAAE,CAACC,IAAI,CAACc,GAAG,CAAC;AACvB;AACA,OAAO,SAASK,WAAWA,CAACpB,EAAE,EAAEc,UAAU,EAAE;EACxC,MAAMC,GAAG,GAAGjB,KAAK,CACZuB,MAAM,CAAC,CAAC,CACRC,KAAK,CAAC,cAAc,CAAC,CACrBJ,SAAS,CAACJ,UAAU,CAAC,CACrBS,KAAK,CAAE,oBAAmBT,UAAU,CAACU,aAAc,0BAAyBV,UAAU,CAACW,aAAc,GAAE,CAAC,CACxGN,QAAQ,CAAC,CAAC;EACf,OAAOnB,EAAE,CAACC,IAAI,CAACc,GAAG,CAAC;AACvB;AACA,OAAO,SAASW,WAAWA,CAAC1B,EAAE,EAAEK,WAAW,EAAEC,WAAW,EAAE;EACtD,OAAON,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,6BAA6BK,WAAY;AACzC,2BAA2BD,WAAY;AACvC,OAAO,CAAC;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}