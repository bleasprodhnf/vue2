{"ast":null,"code":"import squel from 'squel';\n// const GroupTableMap: Record<string, boolean> = {};\nfunction _initSuperGroupTable(db, groupID) {\n  // if (GroupTableMap[groupID]) {\n  //   return;\n  // }\n  localSgChatLogs(db, groupID);\n  // GroupTableMap[groupID] = true;\n}\n\nexport function localSgChatLogs(db, groupID) {\n  return db.exec(`\n      create table if not exists local_sg_chat_logs_${groupID} (\n        'client_msg_id' char(64),\n        'server_msg_id' char(64),\n        'send_id' char(64),\n        'recv_id' char(64),\n        'sender_platform_id' integer,\n        'sender_nick_name' varchar(255),\n        'sender_face_url' varchar(255),\n        'session_type' integer,\n        'msg_from' integer,\n        'content_type' integer,\n        'content' varchar(1000),\n        'is_read' numeric,\n        'is_react' numeric,\n        'is_external_extensions' numeric,\n        'msg_first_modify_time' integer,\n        'status' integer,\n        'seq' integer default 0,\n        'send_time' integer,\n        'create_time' integer,\n        'attached_info' varchar(1024),\n        'ex' varchar(1024),\n        primary key ('client_msg_id')\n    );\n    `);\n}\nexport function getSuperGroupNormalMsgSeq(db, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        select ifnull(max(seq),0) from local_sg_chat_logs_${groupID} where seq >0;\n    `);\n}\nexport function superGroupGetNormalMinSeq(db, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        select ifnull(min(seq),0) from local_sg_chat_logs_${groupID} where seq >0;\n    `);\n}\nexport function superGroupGetMessage(db, groupID, clientMsgID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        select * from local_sg_chat_logs_${groupID} where client_msg_id = '${clientMsgID}' limit 1\n    `);\n}\nexport function superGroupUpdateMessage(db, groupID, clientMsgID, message) {\n  _initSuperGroupTable(db, groupID);\n  const sql = squel.update().table(`local_sg_chat_logs_${groupID}`).setFields(message).where(`client_msg_id = \"${clientMsgID}\"`).toString();\n  return db.exec(sql);\n}\nexport function superGroupBatchInsertMessageList(db, groupID, messageList) {\n  _initSuperGroupTable(db, groupID);\n  const sql = squel.insert().into(`local_sg_chat_logs_${groupID}`).setFieldsRows(messageList).toString();\n  return db.exec(sql);\n}\nexport function superGroupInsertMessage(db, groupID, message) {\n  _initSuperGroupTable(db, groupID);\n  const sql = squel.insert().into(`local_sg_chat_logs_${groupID}`).setFields(message).toString();\n  return db.exec(sql);\n}\nexport function superGroupGetMultipleMessage(db, groupID, msgIDList) {\n  _initSuperGroupTable(db, groupID);\n  const values = msgIDList.map(v => `'${v}'`).join(',');\n  return db.exec(`\n        select * from local_sg_chat_logs_${groupID} where client_msg_id in (${values}) order by send_time desc;\n    `);\n}\nexport function superGroupUpdateMessageTimeAndStatus(db, groupID, clientMsgID, serverMsgID, sendTime, status) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        update \n            local_sg_chat_logs_${groupID}\n        set\n            server_msg_id = \"${serverMsgID}\",\n            status = ${status},\n            send_time = ${sendTime}\n        where\n            client_msg_id = \"${clientMsgID}\" and seq = 0;\n    `);\n}\nexport function superGroupGetMessageListNoTime(db, groupID, sessionType, count, isReverse) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        select * from local_sg_chat_logs_${groupID}\n        where\n            recv_id = \"${groupID}\"\n            and status <= 3\n            and session_type = ${sessionType}\n        order by send_time ${isReverse ? 'asc' : 'desc'}\n        limit ${count};    \n    `);\n}\nexport function superGroupGetMessageList(db, groupID, sessionType, count, startTime, isReverse) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n        select * from local_sg_chat_logs_${groupID}\n        where\n            recv_id = \"${groupID}\"\n            and status <= 3\n            and send_time < ${startTime}\n            and session_type = ${sessionType}\n        order by send_time ${isReverse ? 'asc' : 'desc'}\n        limit ${count};    \n    `);\n}\nexport function superGroupDeleteAllMessage(db, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n    DELETE\n      FROM local_sg_chat_logs_${groupID}\n    `);\n}\nexport function superGroupSearchMessageByKeyword(db, contentType, keywordList, keywordListMatchType, sourceID, startTime, endTime, sessionType, offset, count) {\n  _initSuperGroupTable(db, sourceID);\n  const finalEndTime = endTime ? endTime : new Date().getTime();\n  let subCondition = '';\n  const values = contentType.map(v => `${v}`).join(',');\n  const connectStr = keywordListMatchType === 0 ? 'or ' : 'and ';\n  keywordList.forEach((keyword, index) => {\n    if (index == 0) {\n      subCondition += 'And (';\n    }\n    if (index + 1 >= keywordList.length) {\n      subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%') \";\n    } else {\n      subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%' \" + connectStr;\n    }\n  });\n  return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${sourceID} \n          WHERE session_type==${sessionType}\n          And recv_id==\"${sourceID}\"\n          And send_time  between ${startTime} and ${finalEndTime} \n          AND status <=3  \n          And content_type IN (${values}) \n          ${subCondition}\n    ORDER BY send_time DESC LIMIT ${count} OFFSET ${offset};\n    `);\n}\nexport function superGroupSearchMessageByContentType(db, contentType, sourceID, startTime, endTime, sessionType, offset, count) {\n  _initSuperGroupTable(db, sourceID);\n  const values = contentType.map(v => `${v}`).join(',');\n  const finalEndTime = endTime ? endTime : new Date().getTime();\n  return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${sourceID} \n          WHERE session_type==${sessionType}\n          And recv_id==\"${sourceID}\"\n          And send_time between ${startTime} and ${finalEndTime} \n          AND status <=3 \n          And content_type IN (${values}) \n    ORDER BY send_time DESC LIMIT ${count} OFFSET ${offset};\n    `);\n}\nexport function superGroupSearchMessageByContentTypeAndKeyword(db, contentType, keywordList, keywordListMatchType, startTime, endTime, groupID) {\n  _initSuperGroupTable(db, groupID);\n  const values = contentType.map(v => `${v}`).join(',');\n  const finalEndTime = endTime ? endTime : new Date().getTime();\n  let subCondition = '';\n  const connectStr = keywordListMatchType === 0 ? 'or ' : 'and ';\n  keywordList.forEach((keyword, index) => {\n    if (index == 0) {\n      subCondition += 'And (';\n    }\n    if (index + 1 >= keywordList.length) {\n      subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%') \";\n    } else {\n      subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%' \" + connectStr;\n    }\n  });\n  return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${groupID} \n          WHERE send_time between ${startTime} and ${finalEndTime}\n          AND status <=3  \n          And content_type IN (${values})\n          ${subCondition}\n    ORDER BY send_time DESC\n    `);\n}\nexport function superGroupUpdateMessageStatusBySourceID(db, sourceID, status, sessionType) {\n  _initSuperGroupTable(db, sourceID);\n  return db.exec(`\n    UPDATE local_sg_chat_logs_${sourceID}\n      SET status=${status}\n      WHERE (send_id = \"${sourceID}\" or recv_id = \"${sourceID}\")\n        AND session_type = ${sessionType}\n    `);\n}\nexport function superGroupGetSendingMessageList(db, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n    SELECT *\n      FROM local_sg_chat_logs_${groupID}\n      WHERE status = 1\n    `);\n}\nexport function superGroupUpdateGroupMessageHasRead(db, msgIDList, groupID) {\n  _initSuperGroupTable(db, groupID);\n  const values = msgIDList.map(v => `'${v}'`).join(',');\n  return db.exec(`\n    UPDATE local_sg_chat_logs_${groupID}\n    SET is_read=1\n    WHERE client_msg_id in (${values})  \n    `);\n}\n// export function superGroupGetNormalMsgSeq(\n//   db: Database,\n// ): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     SELECT IFNULL(max(seq), 0)\n//       FROM local_chat_logs\n//     `\n//   );\n// }\nexport function superGroupGetMsgSeqByClientMsgID(db, clientMsgID, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n    SELECT seq\n      FROM local_sg_chat_logs_${groupID}\n      WHERE client_msg_id = \"${clientMsgID}\"\n      LIMIT 1\n    `);\n}\nexport function superGroupUpdateMsgSenderFaceURLAndSenderNickname(db, sendID, faceURL, nickname, sessionType, groupID) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n    UPDATE local_sg_chat_logs_${groupID}\n      SET sender_face_url= \"${faceURL}\" , sender_nick_name = \"${nickname}\"\n      WHERE send_id = \"${sendID}\"\n      AND session_type = ${sessionType}\n    `);\n}\nexport function superGroupSearchAllMessageByContentType(db, groupID, contentType) {\n  _initSuperGroupTable(db, groupID);\n  return db.exec(`\n    SELECT * FROM local_sg_chat_logs_${groupID} WHERE content_type = ${contentType}\n    `);\n}","map":{"version":3,"names":["squel","_initSuperGroupTable","db","groupID","localSgChatLogs","exec","getSuperGroupNormalMsgSeq","superGroupGetNormalMinSeq","superGroupGetMessage","clientMsgID","superGroupUpdateMessage","message","sql","update","table","setFields","where","toString","superGroupBatchInsertMessageList","messageList","insert","into","setFieldsRows","superGroupInsertMessage","superGroupGetMultipleMessage","msgIDList","values","map","v","join","superGroupUpdateMessageTimeAndStatus","serverMsgID","sendTime","status","superGroupGetMessageListNoTime","sessionType","count","isReverse","superGroupGetMessageList","startTime","superGroupDeleteAllMessage","superGroupSearchMessageByKeyword","contentType","keywordList","keywordListMatchType","sourceID","endTime","offset","finalEndTime","Date","getTime","subCondition","connectStr","forEach","keyword","index","length","superGroupSearchMessageByContentType","superGroupSearchMessageByContentTypeAndKeyword","superGroupUpdateMessageStatusBySourceID","superGroupGetSendingMessageList","superGroupUpdateGroupMessageHasRead","superGroupGetMsgSeqByClientMsgID","superGroupUpdateMsgSenderFaceURLAndSenderNickname","sendID","faceURL","nickname","superGroupSearchAllMessageByContentType"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/sqls/localSgChatLogs.js"],"sourcesContent":["import squel from 'squel';\n// const GroupTableMap: Record<string, boolean> = {};\nfunction _initSuperGroupTable(db, groupID) {\n    // if (GroupTableMap[groupID]) {\n    //   return;\n    // }\n    localSgChatLogs(db, groupID);\n    // GroupTableMap[groupID] = true;\n}\nexport function localSgChatLogs(db, groupID) {\n    return db.exec(`\n      create table if not exists local_sg_chat_logs_${groupID} (\n        'client_msg_id' char(64),\n        'server_msg_id' char(64),\n        'send_id' char(64),\n        'recv_id' char(64),\n        'sender_platform_id' integer,\n        'sender_nick_name' varchar(255),\n        'sender_face_url' varchar(255),\n        'session_type' integer,\n        'msg_from' integer,\n        'content_type' integer,\n        'content' varchar(1000),\n        'is_read' numeric,\n        'is_react' numeric,\n        'is_external_extensions' numeric,\n        'msg_first_modify_time' integer,\n        'status' integer,\n        'seq' integer default 0,\n        'send_time' integer,\n        'create_time' integer,\n        'attached_info' varchar(1024),\n        'ex' varchar(1024),\n        primary key ('client_msg_id')\n    );\n    `);\n}\nexport function getSuperGroupNormalMsgSeq(db, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        select ifnull(max(seq),0) from local_sg_chat_logs_${groupID} where seq >0;\n    `);\n}\nexport function superGroupGetNormalMinSeq(db, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        select ifnull(min(seq),0) from local_sg_chat_logs_${groupID} where seq >0;\n    `);\n}\nexport function superGroupGetMessage(db, groupID, clientMsgID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        select * from local_sg_chat_logs_${groupID} where client_msg_id = '${clientMsgID}' limit 1\n    `);\n}\nexport function superGroupUpdateMessage(db, groupID, clientMsgID, message) {\n    _initSuperGroupTable(db, groupID);\n    const sql = squel\n        .update()\n        .table(`local_sg_chat_logs_${groupID}`)\n        .setFields(message)\n        .where(`client_msg_id = \"${clientMsgID}\"`)\n        .toString();\n    return db.exec(sql);\n}\nexport function superGroupBatchInsertMessageList(db, groupID, messageList) {\n    _initSuperGroupTable(db, groupID);\n    const sql = squel\n        .insert()\n        .into(`local_sg_chat_logs_${groupID}`)\n        .setFieldsRows(messageList)\n        .toString();\n    return db.exec(sql);\n}\nexport function superGroupInsertMessage(db, groupID, message) {\n    _initSuperGroupTable(db, groupID);\n    const sql = squel\n        .insert()\n        .into(`local_sg_chat_logs_${groupID}`)\n        .setFields(message)\n        .toString();\n    return db.exec(sql);\n}\nexport function superGroupGetMultipleMessage(db, groupID, msgIDList) {\n    _initSuperGroupTable(db, groupID);\n    const values = msgIDList.map(v => `'${v}'`).join(',');\n    return db.exec(`\n        select * from local_sg_chat_logs_${groupID} where client_msg_id in (${values}) order by send_time desc;\n    `);\n}\nexport function superGroupUpdateMessageTimeAndStatus(db, groupID, clientMsgID, serverMsgID, sendTime, status) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        update \n            local_sg_chat_logs_${groupID}\n        set\n            server_msg_id = \"${serverMsgID}\",\n            status = ${status},\n            send_time = ${sendTime}\n        where\n            client_msg_id = \"${clientMsgID}\" and seq = 0;\n    `);\n}\nexport function superGroupGetMessageListNoTime(db, groupID, sessionType, count, isReverse) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        select * from local_sg_chat_logs_${groupID}\n        where\n            recv_id = \"${groupID}\"\n            and status <= 3\n            and session_type = ${sessionType}\n        order by send_time ${isReverse ? 'asc' : 'desc'}\n        limit ${count};    \n    `);\n}\nexport function superGroupGetMessageList(db, groupID, sessionType, count, startTime, isReverse) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n        select * from local_sg_chat_logs_${groupID}\n        where\n            recv_id = \"${groupID}\"\n            and status <= 3\n            and send_time < ${startTime}\n            and session_type = ${sessionType}\n        order by send_time ${isReverse ? 'asc' : 'desc'}\n        limit ${count};    \n    `);\n}\nexport function superGroupDeleteAllMessage(db, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n    DELETE\n      FROM local_sg_chat_logs_${groupID}\n    `);\n}\nexport function superGroupSearchMessageByKeyword(db, contentType, keywordList, keywordListMatchType, sourceID, startTime, endTime, sessionType, offset, count) {\n    _initSuperGroupTable(db, sourceID);\n    const finalEndTime = endTime ? endTime : new Date().getTime();\n    let subCondition = '';\n    const values = contentType.map(v => `${v}`).join(',');\n    const connectStr = keywordListMatchType === 0 ? 'or ' : 'and ';\n    keywordList.forEach((keyword, index) => {\n        if (index == 0) {\n            subCondition += 'And (';\n        }\n        if (index + 1 >= keywordList.length) {\n            subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%') \";\n        }\n        else {\n            subCondition +=\n                'content like ' + \"'%\" + keywordList[index] + \"%' \" + connectStr;\n        }\n    });\n    return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${sourceID} \n          WHERE session_type==${sessionType}\n          And recv_id==\"${sourceID}\"\n          And send_time  between ${startTime} and ${finalEndTime} \n          AND status <=3  \n          And content_type IN (${values}) \n          ${subCondition}\n    ORDER BY send_time DESC LIMIT ${count} OFFSET ${offset};\n    `);\n}\nexport function superGroupSearchMessageByContentType(db, contentType, sourceID, startTime, endTime, sessionType, offset, count) {\n    _initSuperGroupTable(db, sourceID);\n    const values = contentType.map(v => `${v}`).join(',');\n    const finalEndTime = endTime ? endTime : new Date().getTime();\n    return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${sourceID} \n          WHERE session_type==${sessionType}\n          And recv_id==\"${sourceID}\"\n          And send_time between ${startTime} and ${finalEndTime} \n          AND status <=3 \n          And content_type IN (${values}) \n    ORDER BY send_time DESC LIMIT ${count} OFFSET ${offset};\n    `);\n}\nexport function superGroupSearchMessageByContentTypeAndKeyword(db, contentType, keywordList, keywordListMatchType, startTime, endTime, groupID) {\n    _initSuperGroupTable(db, groupID);\n    const values = contentType.map(v => `${v}`).join(',');\n    const finalEndTime = endTime ? endTime : new Date().getTime();\n    let subCondition = '';\n    const connectStr = keywordListMatchType === 0 ? 'or ' : 'and ';\n    keywordList.forEach((keyword, index) => {\n        if (index == 0) {\n            subCondition += 'And (';\n        }\n        if (index + 1 >= keywordList.length) {\n            subCondition += 'content like ' + \"'%\" + keywordList[index] + \"%') \";\n        }\n        else {\n            subCondition +=\n                'content like ' + \"'%\" + keywordList[index] + \"%' \" + connectStr;\n        }\n    });\n    return db.exec(`  \n    SELECT * FROM local_sg_chat_logs_${groupID} \n          WHERE send_time between ${startTime} and ${finalEndTime}\n          AND status <=3  \n          And content_type IN (${values})\n          ${subCondition}\n    ORDER BY send_time DESC\n    `);\n}\nexport function superGroupUpdateMessageStatusBySourceID(db, sourceID, status, sessionType) {\n    _initSuperGroupTable(db, sourceID);\n    return db.exec(`\n    UPDATE local_sg_chat_logs_${sourceID}\n      SET status=${status}\n      WHERE (send_id = \"${sourceID}\" or recv_id = \"${sourceID}\")\n        AND session_type = ${sessionType}\n    `);\n}\nexport function superGroupGetSendingMessageList(db, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n    SELECT *\n      FROM local_sg_chat_logs_${groupID}\n      WHERE status = 1\n    `);\n}\nexport function superGroupUpdateGroupMessageHasRead(db, msgIDList, groupID) {\n    _initSuperGroupTable(db, groupID);\n    const values = msgIDList.map(v => `'${v}'`).join(',');\n    return db.exec(`\n    UPDATE local_sg_chat_logs_${groupID}\n    SET is_read=1\n    WHERE client_msg_id in (${values})  \n    `);\n}\n// export function superGroupGetNormalMsgSeq(\n//   db: Database,\n// ): QueryExecResult[] {\n//   return db.exec(\n//     `\n//     SELECT IFNULL(max(seq), 0)\n//       FROM local_chat_logs\n//     `\n//   );\n// }\nexport function superGroupGetMsgSeqByClientMsgID(db, clientMsgID, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n    SELECT seq\n      FROM local_sg_chat_logs_${groupID}\n      WHERE client_msg_id = \"${clientMsgID}\"\n      LIMIT 1\n    `);\n}\nexport function superGroupUpdateMsgSenderFaceURLAndSenderNickname(db, sendID, faceURL, nickname, sessionType, groupID) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n    UPDATE local_sg_chat_logs_${groupID}\n      SET sender_face_url= \"${faceURL}\" , sender_nick_name = \"${nickname}\"\n      WHERE send_id = \"${sendID}\"\n      AND session_type = ${sessionType}\n    `);\n}\nexport function superGroupSearchAllMessageByContentType(db, groupID, contentType) {\n    _initSuperGroupTable(db, groupID);\n    return db.exec(`\n    SELECT * FROM local_sg_chat_logs_${groupID} WHERE content_type = ${contentType}\n    `);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}