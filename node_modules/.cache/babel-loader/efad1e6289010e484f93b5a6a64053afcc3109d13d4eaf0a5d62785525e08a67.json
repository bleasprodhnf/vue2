{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { getLoginUser as databaseGetLoginUser, insertLoginUser as databaseInsertLoginUser, updateLoginUserByMap as databaseUpdateLoginUserByMap } from '../../sqls';\nimport { formatResponse, converSqlExecResult, convertToSnakeCaseObject, convertObjectField } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getLoginUser(userID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetLoginUser(db, userID);\n    if (execResult.length === 0) {\n      return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no login user with id ${userID}`);\n    }\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'nickname'\n    })[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function insertLoginUser(userStr) {\n  try {\n    const db = await getInstance();\n    const user = convertToSnakeCaseObject(convertObjectField(JSON.parse(userStr), {\n      nickname: 'name'\n    }));\n    const execResult = databaseInsertLoginUser(db, user);\n    return formatResponse(execResult);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateLoginUserByMap(userID, user) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseUpdateLoginUserByMap(db, userID, user);\n    return formatResponse(execResult);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","getLoginUser","databaseGetLoginUser","insertLoginUser","databaseInsertLoginUser","updateLoginUserByMap","databaseUpdateLoginUserByMap","formatResponse","converSqlExecResult","convertToSnakeCaseObject","convertObjectField","getInstance","userID","db","execResult","length","ErrorNoRecord","name","e","console","error","undefined","ErrorInit","JSON","stringify","userStr","user","parse","nickname"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/api/database/users.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { getLoginUser as databaseGetLoginUser, insertLoginUser as databaseInsertLoginUser, updateLoginUserByMap as databaseUpdateLoginUserByMap, } from '../../sqls';\nimport { formatResponse, converSqlExecResult, convertToSnakeCaseObject, convertObjectField, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getLoginUser(userID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetLoginUser(db, userID);\n        if (execResult.length === 0) {\n            return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no login user with id ${userID}`);\n        }\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'nickname',\n        })[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function insertLoginUser(userStr) {\n    try {\n        const db = await getInstance();\n        const user = convertToSnakeCaseObject(convertObjectField(JSON.parse(userStr), { nickname: 'name' }));\n        const execResult = databaseInsertLoginUser(db, user);\n        return formatResponse(execResult);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateLoginUserByMap(userID, user) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseUpdateLoginUserByMap(db, userID, user);\n        return formatResponse(execResult);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,YAAY,IAAIC,oBAAoB,EAAEC,eAAe,IAAIC,uBAAuB,EAAEC,oBAAoB,IAAIC,4BAA4B,QAAS,YAAY;AACpK,SAASC,cAAc,EAAEC,mBAAmB,EAAEC,wBAAwB,EAAEC,kBAAkB,QAAS,aAAa;AAChH,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAO,eAAeV,YAAYA,CAACW,MAAM,EAAE;EACvC,IAAI;IACA,MAAMC,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMG,UAAU,GAAGZ,oBAAoB,CAACW,EAAE,EAAED,MAAM,CAAC;IACnD,IAAIE,UAAU,CAACC,MAAM,KAAK,CAAC,EAAE;MACzB,OAAOR,cAAc,CAAC,EAAE,EAAEP,iBAAiB,CAACgB,aAAa,EAAG,yBAAwBJ,MAAO,EAAC,CAAC;IACjG;IACA,OAAOL,cAAc,CAACC,mBAAmB,CAACM,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;MACtEG,IAAI,EAAE;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CACD,OAAOC,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOX,cAAc,CAACc,SAAS,EAAErB,iBAAiB,CAACsB,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACN,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAef,eAAeA,CAACsB,OAAO,EAAE;EAC3C,IAAI;IACA,MAAMZ,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMe,IAAI,GAAGjB,wBAAwB,CAACC,kBAAkB,CAACa,IAAI,CAACI,KAAK,CAACF,OAAO,CAAC,EAAE;MAAEG,QAAQ,EAAE;IAAO,CAAC,CAAC,CAAC;IACpG,MAAMd,UAAU,GAAGV,uBAAuB,CAACS,EAAE,EAAEa,IAAI,CAAC;IACpD,OAAOnB,cAAc,CAACO,UAAU,CAAC;EACrC,CAAC,CACD,OAAOI,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOX,cAAc,CAACc,SAAS,EAAErB,iBAAiB,CAACsB,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACN,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAeb,oBAAoBA,CAACO,MAAM,EAAEc,IAAI,EAAE;EACrD,IAAI;IACA,MAAMb,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMG,UAAU,GAAGR,4BAA4B,CAACO,EAAE,EAAED,MAAM,EAAEc,IAAI,CAAC;IACjE,OAAOnB,cAAc,CAACO,UAAU,CAAC;EACrC,CAAC,CACD,OAAOI,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOX,cAAc,CAACc,SAAS,EAAErB,iBAAiB,CAACsB,SAAS,EAAEC,IAAI,CAACC,SAAS,CAACN,CAAC,CAAC,CAAC;EACpF;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}