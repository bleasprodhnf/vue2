{"ast":null,"code":"import squel from 'squel';\nexport function localConversations(db) {\n  return db.exec(`\n      create table if not exists 'local_conversations' (\n            'conversation_id' char(128),\n            'conversation_type' integer,\n            'user_id' char(64),\n            'group_id' char(128),\n            'show_name' varchar(255),\n            'face_url' varchar(255),\n            'recv_msg_opt' integer,\n            'unread_count' integer,\n            'group_at_type' integer,\n            'latest_msg' varchar(1000),\n            'latest_msg_send_time' integer,\n            'draft_text' text,\n            'draft_text_time' integer,\n            'is_pinned' numeric,\n            'burn_duration' integer,\n            'is_private_chat' numeric,\n            'is_not_in_group' numeric,\n            'update_unread_count_time' integer,\n            'attached_info' varchar(1024),\n            'ex' varchar(1024),\n            primary key ('conversation_id')\n        )\n    `);\n}\nexport function getConversationByUserID(db, userID) {\n  return db.exec(`\n        select * from local_conversations where user_id = \"${userID}\";\n    `);\n}\nexport function getAllConversationList(db) {\n  return db.exec(`\n        select * from local_conversations where latest_msg_send_time > 0 order by case when is_pinned=1 then 0 else 1 end,max(latest_msg_send_time,draft_text_time) desc;\n    `);\n}\nexport function getAllConversationListToSync(db) {\n  return db.exec(`\n        select * from local_conversations;\n    `);\n}\nexport function getHiddenConversationList(db) {\n  return db.exec(`\n        select * from local_conversations where latest_msg_send_time = 0;\n    `);\n}\nexport function getConversationListSplit(db, offset, count) {\n  return db.exec(`\n    SELECT *\n    FROM local_conversations\n    WHERE latest_msg_send_time > 0\n    ORDER BY case\n                 when is_pinned = 1 then 0\n                 else 1 end, max(latest_msg_send_time, draft_text_time) DESC\n    LIMIT ${count} OFFSET ${offset}\n    `);\n}\nexport function getConversation(db, conversationID) {\n  return db.exec(`\n        select * from local_conversations where conversation_id = '${conversationID}' limit 1;\n    `);\n}\nexport function getMultipleConversation(db, conversationIDList) {\n  const ids = conversationIDList.map(v => `'${v}'`);\n  return db.exec(`\n        select * from local_conversations where conversation_id in (${ids.join(',')});\n    `);\n}\nexport function updateColumnsConversation(db, conversationID, conversation) {\n  const sql = squel.update().table('local_conversations').setFields(conversation).where(`conversation_id = '${conversationID}'`).toString();\n  return db.exec(sql);\n}\nexport function incrConversationUnreadCount(db, conversationID) {\n  return db.exec(`\n        update local_conversations set \n            unread_count=unread_count+1 \n        where conversation_id = '${conversationID}';\n    `);\n}\nexport function decrConversationUnreadCount(db, conversationID, count) {\n  db.exec('begin');\n  db.exec(`\n        update local_conversations set \n            unread_count=unread_count-${count} \n        where conversation_id = '${conversationID}';\n    `);\n  const current = db.exec(`select unread_count from local_conversations where conversation_id = '${conversationID}'`);\n  if (Number(current[0].values[0]) >= 0) {\n    return db.exec('commit');\n  } else {\n    db.exec('rollback');\n    throw 'decrConversationUnreadCount rollback for unread_count < 0 after exec';\n  }\n}\nexport function batchInsertConversationList(db, conversationList) {\n  const sql = squel.insert().into('local_conversations').setFieldsRows(conversationList).toString();\n  return db.exec(sql);\n}\nexport function insertConversation(db, localConversation) {\n  const sql = squel.insert().into('local_conversations').setFields(localConversation).toString();\n  return db.exec(sql);\n}\nexport function updateConversation(db, localConversation) {\n  const sql = squel.update().table('local_conversations').setFields(localConversation).where(`conversation_id = '${localConversation.conversation_id}'`).toString();\n  return db.exec(sql);\n}\nexport function deleteConversation(db, conversationID) {\n  return db.exec(`\n    DELETE\n      FROM local_conversations\n      WHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function conversationIfExists(db, conversationID) {\n  return db.exec(`\n  SELECT count(*)\n  FROM local_conversations\n  WHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function resetConversation(db, conversationID) {\n  return db.exec(`\n  UPDATE local_conversations\n    SET unread_count=0,\n    latest_msg=\"\",\n    latest_msg_send_time=0,\n    draft_text=\"\",\n    draft_text_time=0\nWHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function resetAllConversation(db) {\n  return db.exec(`\n  UPDATE local_conversations\n    SET unread_count=0,\n    latest_msg=\"\",\n    latest_msg_send_time=0,\n    draft_text=\"\",\n    draft_text_time=0\n  `);\n}\nexport function clearConversation(db, conversationID) {\n  return db.exec(`\n  UPDATE local_conversations\nSET unread_count=0,\n    latest_msg=\"\",\n    draft_text=\"\",\n    draft_text_time=0\nWHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function clearAllConversation(db) {\n  return db.exec(`\n  UPDATE local_conversations\nSET unread_count=0,\n    latest_msg=\"\",\n    draft_text=\"\",\n    draft_text_time=0\n  `);\n}\nexport function setConversationDraft(db, conversationID, draftText) {\n  const nowDate = new Date().getTime();\n  return db.exec(`\n  update local_conversations\n    set draft_text='${draftText}',\n    draft_text_time=${nowDate},\n    latest_msg_send_time=case when latest_msg_send_time = 0 then ${nowDate} else latest_msg_send_time end\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function removeConversationDraft(db, conversationID, draftText) {\n  return db.exec(`\n  update local_conversations\n    set draft_text=\"${draftText}\",\n    draft_text_time=0\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function unPinConversation(db, conversationID, isPinned) {\n  return db.exec(`\n  update local_conversations\n    set is_pinned=${isPinned},\n    draft_text_time=case when draft_text = \"\" then 0 else draft_text_time end\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function getTotalUnreadMsgCount(db) {\n  return db.exec(`\n        select sum(unread_count) from local_conversations where recv_msg_opt < 2;\n    `);\n}\nexport function setMultipleConversationRecvMsgOpt(db, conversationIDList, opt) {\n  const values = conversationIDList.map(v => `${v}`).join(',');\n  return db.exec(`\n    UPDATE local_conversations\n    SET recv_msg_opt=${opt}\n    WHERE conversation_id IN (${values})\n    `);\n}","map":{"version":3,"names":["squel","localConversations","db","exec","getConversationByUserID","userID","getAllConversationList","getAllConversationListToSync","getHiddenConversationList","getConversationListSplit","offset","count","getConversation","conversationID","getMultipleConversation","conversationIDList","ids","map","v","join","updateColumnsConversation","conversation","sql","update","table","setFields","where","toString","incrConversationUnreadCount","decrConversationUnreadCount","current","Number","values","batchInsertConversationList","conversationList","insert","into","setFieldsRows","insertConversation","localConversation","updateConversation","conversation_id","deleteConversation","conversationIfExists","resetConversation","resetAllConversation","clearConversation","clearAllConversation","setConversationDraft","draftText","nowDate","Date","getTime","removeConversationDraft","unPinConversation","isPinned","getTotalUnreadMsgCount","setMultipleConversationRecvMsgOpt","opt"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/sqls/localConversations.js"],"sourcesContent":["import squel from 'squel';\nexport function localConversations(db) {\n    return db.exec(`\n      create table if not exists 'local_conversations' (\n            'conversation_id' char(128),\n            'conversation_type' integer,\n            'user_id' char(64),\n            'group_id' char(128),\n            'show_name' varchar(255),\n            'face_url' varchar(255),\n            'recv_msg_opt' integer,\n            'unread_count' integer,\n            'group_at_type' integer,\n            'latest_msg' varchar(1000),\n            'latest_msg_send_time' integer,\n            'draft_text' text,\n            'draft_text_time' integer,\n            'is_pinned' numeric,\n            'burn_duration' integer,\n            'is_private_chat' numeric,\n            'is_not_in_group' numeric,\n            'update_unread_count_time' integer,\n            'attached_info' varchar(1024),\n            'ex' varchar(1024),\n            primary key ('conversation_id')\n        )\n    `);\n}\nexport function getConversationByUserID(db, userID) {\n    return db.exec(`\n        select * from local_conversations where user_id = \"${userID}\";\n    `);\n}\nexport function getAllConversationList(db) {\n    return db.exec(`\n        select * from local_conversations where latest_msg_send_time > 0 order by case when is_pinned=1 then 0 else 1 end,max(latest_msg_send_time,draft_text_time) desc;\n    `);\n}\nexport function getAllConversationListToSync(db) {\n    return db.exec(`\n        select * from local_conversations;\n    `);\n}\nexport function getHiddenConversationList(db) {\n    return db.exec(`\n        select * from local_conversations where latest_msg_send_time = 0;\n    `);\n}\nexport function getConversationListSplit(db, offset, count) {\n    return db.exec(`\n    SELECT *\n    FROM local_conversations\n    WHERE latest_msg_send_time > 0\n    ORDER BY case\n                 when is_pinned = 1 then 0\n                 else 1 end, max(latest_msg_send_time, draft_text_time) DESC\n    LIMIT ${count} OFFSET ${offset}\n    `);\n}\nexport function getConversation(db, conversationID) {\n    return db.exec(`\n        select * from local_conversations where conversation_id = '${conversationID}' limit 1;\n    `);\n}\nexport function getMultipleConversation(db, conversationIDList) {\n    const ids = conversationIDList.map(v => `'${v}'`);\n    return db.exec(`\n        select * from local_conversations where conversation_id in (${ids.join(',')});\n    `);\n}\nexport function updateColumnsConversation(db, conversationID, conversation) {\n    const sql = squel\n        .update()\n        .table('local_conversations')\n        .setFields(conversation)\n        .where(`conversation_id = '${conversationID}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function incrConversationUnreadCount(db, conversationID) {\n    return db.exec(`\n        update local_conversations set \n            unread_count=unread_count+1 \n        where conversation_id = '${conversationID}';\n    `);\n}\nexport function decrConversationUnreadCount(db, conversationID, count) {\n    db.exec('begin');\n    db.exec(`\n        update local_conversations set \n            unread_count=unread_count-${count} \n        where conversation_id = '${conversationID}';\n    `);\n    const current = db.exec(`select unread_count from local_conversations where conversation_id = '${conversationID}'`);\n    if (Number(current[0].values[0]) >= 0) {\n        return db.exec('commit');\n    }\n    else {\n        db.exec('rollback');\n        throw 'decrConversationUnreadCount rollback for unread_count < 0 after exec';\n    }\n}\nexport function batchInsertConversationList(db, conversationList) {\n    const sql = squel\n        .insert()\n        .into('local_conversations')\n        .setFieldsRows(conversationList)\n        .toString();\n    return db.exec(sql);\n}\nexport function insertConversation(db, localConversation) {\n    const sql = squel\n        .insert()\n        .into('local_conversations')\n        .setFields(localConversation)\n        .toString();\n    return db.exec(sql);\n}\nexport function updateConversation(db, localConversation) {\n    const sql = squel\n        .update()\n        .table('local_conversations')\n        .setFields(localConversation)\n        .where(`conversation_id = '${localConversation.conversation_id}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteConversation(db, conversationID) {\n    return db.exec(`\n    DELETE\n      FROM local_conversations\n      WHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function conversationIfExists(db, conversationID) {\n    return db.exec(`\n  SELECT count(*)\n  FROM local_conversations\n  WHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function resetConversation(db, conversationID) {\n    return db.exec(`\n  UPDATE local_conversations\n    SET unread_count=0,\n    latest_msg=\"\",\n    latest_msg_send_time=0,\n    draft_text=\"\",\n    draft_text_time=0\nWHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function resetAllConversation(db) {\n    return db.exec(`\n  UPDATE local_conversations\n    SET unread_count=0,\n    latest_msg=\"\",\n    latest_msg_send_time=0,\n    draft_text=\"\",\n    draft_text_time=0\n  `);\n}\nexport function clearConversation(db, conversationID) {\n    return db.exec(`\n  UPDATE local_conversations\nSET unread_count=0,\n    latest_msg=\"\",\n    draft_text=\"\",\n    draft_text_time=0\nWHERE conversation_id = \"${conversationID}\"\n  `);\n}\nexport function clearAllConversation(db) {\n    return db.exec(`\n  UPDATE local_conversations\nSET unread_count=0,\n    latest_msg=\"\",\n    draft_text=\"\",\n    draft_text_time=0\n  `);\n}\nexport function setConversationDraft(db, conversationID, draftText) {\n    const nowDate = new Date().getTime();\n    return db.exec(`\n  update local_conversations\n    set draft_text='${draftText}',\n    draft_text_time=${nowDate},\n    latest_msg_send_time=case when latest_msg_send_time = 0 then ${nowDate} else latest_msg_send_time end\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function removeConversationDraft(db, conversationID, draftText) {\n    return db.exec(`\n  update local_conversations\n    set draft_text=\"${draftText}\",\n    draft_text_time=0\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function unPinConversation(db, conversationID, isPinned) {\n    return db.exec(`\n  update local_conversations\n    set is_pinned=${isPinned},\n    draft_text_time=case when draft_text = \"\" then 0 else draft_text_time end\n    where conversation_id = \"${conversationID}\"\n  `);\n}\nexport function getTotalUnreadMsgCount(db) {\n    return db.exec(`\n        select sum(unread_count) from local_conversations where recv_msg_opt < 2;\n    `);\n}\nexport function setMultipleConversationRecvMsgOpt(db, conversationIDList, opt) {\n    const values = conversationIDList.map(v => `${v}`).join(',');\n    return db.exec(`\n    UPDATE local_conversations\n    SET recv_msg_opt=${opt}\n    WHERE conversation_id IN (${values})\n    `);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}