{"ast":null,"code":"// eslint-disable-next-line no-control-regex\nconst CHARS_GLOBAL_BACKSLASH_SUPPORTED_RX = /[\\0\\b\\t\\n\\r\\x1a\"'\\\\]/g;\nconst CHARS_ESCAPE_BACKSLASH_SUPPORTED_MAP = {\n  '\\0': '\\\\0',\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\x1a': '\\\\Z',\n  '\"': '\\\\\"',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\'\n};\n/**\n * Escapes the given string to protect against SQL injection attacks.\n *\n * By default it assumes that backslashes are not supported as they are not part of the standard SQL spec.\n * Quoting from the [SQLlite web site](https://sqlite.org/lang_expr.html):\n *\n * > C-style escapes using the backslash character are not supported because they are not standard SQL.\n *\n * This means three things:\n *\n * - backslashes and double quotes `\"` are not escaped by default\n * - single quotes are escaped via `''` instead of `\\'`\n * - your sql engine should throw an error when encountering a backslash escape\n *   as part of a string, unless it is a literal backslash, i.e. `'backslash: \\\\'`.\n *\n * It is recommended to set the `backslashSupported` option `true` if your SQL\n * engine supports it. In that case backslash sequences are escaped and single\n * and double quotes are escaped via a backslash, i.e. `'\\''`.\n *\n */\nexport function escapeString(val, opts = {\n  backslashSupported: false\n}) {\n  if (val == null) {\n    throw new Error('Need to pass a valid string');\n  }\n  opts = opts || {};\n  const backslashSupported = !!opts.backslashSupported;\n  if (!backslashSupported) return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n  const charsRx = CHARS_GLOBAL_BACKSLASH_SUPPORTED_RX;\n  const charsEscapeMap = CHARS_ESCAPE_BACKSLASH_SUPPORTED_MAP;\n  let chunkIndex = charsRx.lastIndex = 0;\n  let escapedVal = '';\n  let match;\n  while (match = charsRx.exec(val)) {\n    escapedVal += val.slice(chunkIndex, match.index) + charsEscapeMap[match[0]];\n    chunkIndex = charsRx.lastIndex;\n  }\n  // Nothing was escaped\n  if (chunkIndex === 0) return \"'\" + val + \"'\";\n  if (chunkIndex < val.length) return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n  return \"'\" + escapedVal + \"'\";\n}","map":{"version":3,"names":["CHARS_GLOBAL_BACKSLASH_SUPPORTED_RX","CHARS_ESCAPE_BACKSLASH_SUPPORTED_MAP","escapeString","val","opts","backslashSupported","Error","replace","charsRx","charsEscapeMap","chunkIndex","lastIndex","escapedVal","match","exec","slice","index","length"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/utils/escape.js"],"sourcesContent":["// eslint-disable-next-line no-control-regex\nconst CHARS_GLOBAL_BACKSLASH_SUPPORTED_RX = /[\\0\\b\\t\\n\\r\\x1a\"'\\\\]/g;\nconst CHARS_ESCAPE_BACKSLASH_SUPPORTED_MAP = {\n    '\\0': '\\\\0',\n    '\\b': '\\\\b',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\x1a': '\\\\Z',\n    '\"': '\\\\\"',\n    \"'\": \"\\\\'\",\n    '\\\\': '\\\\\\\\',\n};\n/**\n * Escapes the given string to protect against SQL injection attacks.\n *\n * By default it assumes that backslashes are not supported as they are not part of the standard SQL spec.\n * Quoting from the [SQLlite web site](https://sqlite.org/lang_expr.html):\n *\n * > C-style escapes using the backslash character are not supported because they are not standard SQL.\n *\n * This means three things:\n *\n * - backslashes and double quotes `\"` are not escaped by default\n * - single quotes are escaped via `''` instead of `\\'`\n * - your sql engine should throw an error when encountering a backslash escape\n *   as part of a string, unless it is a literal backslash, i.e. `'backslash: \\\\'`.\n *\n * It is recommended to set the `backslashSupported` option `true` if your SQL\n * engine supports it. In that case backslash sequences are escaped and single\n * and double quotes are escaped via a backslash, i.e. `'\\''`.\n *\n */\nexport function escapeString(val, opts = { backslashSupported: false }) {\n    if (val == null) {\n        throw new Error('Need to pass a valid string');\n    }\n    opts = opts || {};\n    const backslashSupported = !!opts.backslashSupported;\n    if (!backslashSupported)\n        return \"'\" + val.replace(/'/g, \"''\") + \"'\";\n    const charsRx = CHARS_GLOBAL_BACKSLASH_SUPPORTED_RX;\n    const charsEscapeMap = CHARS_ESCAPE_BACKSLASH_SUPPORTED_MAP;\n    let chunkIndex = (charsRx.lastIndex = 0);\n    let escapedVal = '';\n    let match;\n    while ((match = charsRx.exec(val))) {\n        escapedVal += val.slice(chunkIndex, match.index) + charsEscapeMap[match[0]];\n        chunkIndex = charsRx.lastIndex;\n    }\n    // Nothing was escaped\n    if (chunkIndex === 0)\n        return \"'\" + val + \"'\";\n    if (chunkIndex < val.length)\n        return \"'\" + escapedVal + val.slice(chunkIndex) + \"'\";\n    return \"'\" + escapedVal + \"'\";\n}\n"],"mappings":"AAAA;AACA,MAAMA,mCAAmC,GAAG,uBAAuB;AACnE,MAAMC,oCAAoC,GAAG;EACzC,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,MAAM,EAAE,KAAK;EACb,GAAG,EAAE,KAAK;EACV,GAAG,EAAE,KAAK;EACV,IAAI,EAAE;AACV,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,GAAG,EAAEC,IAAI,GAAG;EAAEC,kBAAkB,EAAE;AAAM,CAAC,EAAE;EACpE,IAAIF,GAAG,IAAI,IAAI,EAAE;IACb,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;EAClD;EACAF,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;EACjB,MAAMC,kBAAkB,GAAG,CAAC,CAACD,IAAI,CAACC,kBAAkB;EACpD,IAAI,CAACA,kBAAkB,EACnB,OAAO,GAAG,GAAGF,GAAG,CAACI,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,GAAG;EAC9C,MAAMC,OAAO,GAAGR,mCAAmC;EACnD,MAAMS,cAAc,GAAGR,oCAAoC;EAC3D,IAAIS,UAAU,GAAIF,OAAO,CAACG,SAAS,GAAG,CAAE;EACxC,IAAIC,UAAU,GAAG,EAAE;EACnB,IAAIC,KAAK;EACT,OAAQA,KAAK,GAAGL,OAAO,CAACM,IAAI,CAACX,GAAG,CAAC,EAAG;IAChCS,UAAU,IAAIT,GAAG,CAACY,KAAK,CAACL,UAAU,EAAEG,KAAK,CAACG,KAAK,CAAC,GAAGP,cAAc,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3EH,UAAU,GAAGF,OAAO,CAACG,SAAS;EAClC;EACA;EACA,IAAID,UAAU,KAAK,CAAC,EAChB,OAAO,GAAG,GAAGP,GAAG,GAAG,GAAG;EAC1B,IAAIO,UAAU,GAAGP,GAAG,CAACc,MAAM,EACvB,OAAO,GAAG,GAAGL,UAAU,GAAGT,GAAG,CAACY,KAAK,CAACL,UAAU,CAAC,GAAG,GAAG;EACzD,OAAO,GAAG,GAAGE,UAAU,GAAG,GAAG;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}