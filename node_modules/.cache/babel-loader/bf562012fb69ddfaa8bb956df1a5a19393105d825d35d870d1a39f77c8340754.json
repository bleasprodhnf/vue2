{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n;\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.squel = factory();\n  }\n})(this, function () {\n  'use strict';\n\n  var _get = function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n      if (getter === undefined) {\n        return undefined;\n      }\n      return getter.call(receiver);\n    }\n  };\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n  var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  };\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  // append to string if non-empty\n  function _pad(str, pad) {\n    return str.length ? str + pad : str;\n  }\n\n  // Extend given object's with other objects' properties, overriding existing ones if necessary\n  function _extend(dst) {\n    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    if (dst && sources) {\n      var _loop = function _loop(src) {\n        if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n          Object.getOwnPropertyNames(src).forEach(function (key) {\n            dst[key] = src[key];\n          });\n        }\n      };\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n      try {\n        for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var src = _step.value;\n          _loop(src);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n    return dst;\n  }\n  ;\n\n  // get whether object is a plain object\n  function _isPlainObject(obj) {\n    return obj && obj.constructor.prototype === Object.prototype;\n  }\n  ;\n\n  // get whether object is an array\n  function _isArray(obj) {\n    return obj && obj.constructor.prototype === Array.prototype;\n  }\n  ;\n\n  // clone given item\n  function _clone(src) {\n    if (!src) {\n      return src;\n    }\n    if (typeof src.clone === 'function') {\n      return src.clone();\n    } else if (_isPlainObject(src) || _isArray(src)) {\n      var ret = new src.constructor();\n      Object.getOwnPropertyNames(src).forEach(function (key) {\n        if (typeof src[key] !== 'function') {\n          ret[key] = _clone(src[key]);\n        }\n      });\n      return ret;\n    } else {\n      return JSON.parse(JSON.stringify(src));\n    }\n  }\n  ;\n\n  /**\n   * Register a value type handler\n   *\n   * Note: this will override any existing handler registered for this value type.\n   */\n  function _registerValueHandler(handlers, type, handler) {\n    var typeofType = typeof type === 'undefined' ? 'undefined' : _typeof(type);\n    if (typeofType !== 'function' && typeofType !== 'string') {\n      throw new Error(\"type must be a class constructor or string\");\n    }\n    if (typeof handler !== 'function') {\n      throw new Error(\"handler must be a function\");\n    }\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n    try {\n      for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var typeHandler = _step2.value;\n        if (typeHandler.type === type) {\n          typeHandler.handler = handler;\n          return;\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n    handlers.push({\n      type: type,\n      handler: handler\n    });\n  }\n  ;\n\n  /**\n   * Get value type handler for given type\n   */\n  function getValueHandler(value, localHandlers, globalHandlers) {\n    return _getValueHandler(value, localHandlers) || _getValueHandler(value, globalHandlers);\n  }\n  ;\n  function _getValueHandler(value, handlers) {\n    for (var i = 0; i < handlers.length; i++) {\n      var typeHandler = handlers[i];\n      // if type is a string then use `typeof` or else use `instanceof`\n      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === typeHandler.type || typeof typeHandler.type !== 'string' && value instanceof typeHandler.type) {\n        return typeHandler.handler;\n      }\n    }\n  }\n  ;\n\n  /**\n   * Build base squel classes and methods\n   */\n  function _buildSquel() {\n    var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    var cls = {\n      // Get whether obj is a query builder\n      isSquelBuilder: function isSquelBuilder(obj) {\n        return obj && !!obj._toParamString;\n      }\n    };\n\n    // Get whether nesting should be applied for given item\n    var _shouldApplyNesting = function _shouldApplyNesting(obj) {\n      return !cls.isSquelBuilder(obj) || !obj.options.rawNesting;\n    };\n\n    // default query builder options\n    cls.DefaultQueryBuilderOptions = {\n      // If true then table names will be rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n      autoQuoteTableNames: false,\n      // If true then field names will rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n      autoQuoteFieldNames: false,\n      // If true then alias names will rendered inside quotes. The quote character used is configurable via the `tableAliasQuoteCharacter` and `fieldAliasQuoteCharacter` options.\n      autoQuoteAliasNames: true,\n      // If true then table alias names will rendered after AS keyword.\n      useAsForTableAliasNames: false,\n      // The quote character used for when quoting table and field names\n      nameQuoteCharacter: '`',\n      // The quote character used for when quoting table alias names\n      tableAliasQuoteCharacter: '`',\n      // The quote character used for when quoting table alias names\n      fieldAliasQuoteCharacter: '\"',\n      // Custom value handlers where key is the value type and the value is the handler function\n      valueHandlers: [],\n      // Character used to represent a parameter value\n      parameterCharacter: '?',\n      // Numbered parameters returned from toParam() as $1, $2, etc.\n      numberedParameters: false,\n      // Numbered parameters prefix character(s)\n      numberedParametersPrefix: '$',\n      // Numbered parameters start at this number.\n      numberedParametersStartAt: 1,\n      // If true then replaces all single quotes within strings. The replacement string used is configurable via the `singleQuoteReplacement` option.\n      replaceSingleQuotes: false,\n      // The string to replace single quotes with in query strings\n      singleQuoteReplacement: '\\'\\'',\n      // String used to join individual blocks in a query when it's stringified\n      separator: ' ',\n      // Function for formatting string values prior to insertion into query string\n      stringFormatter: null,\n      // Whether to prevent the addition of brackets () when nesting this query builder's output\n      rawNesting: false\n    };\n\n    // Global custom value handlers for all instances of builder\n    cls.globalValueHandlers = [];\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # Custom value types\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n     */\n\n    // Register a new value handler\n    cls.registerValueHandler = function (type, handler) {\n      _registerValueHandler(cls.globalValueHandlers, type, handler);\n    };\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # Base classes\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    */\n\n    // Base class for cloneable builders\n    cls.Cloneable = function () {\n      function _class() {\n        _classCallCheck(this, _class);\n      }\n      _createClass(_class, [{\n        key: 'clone',\n        /**\n         * Clone this builder\n         */\n        value: function clone() {\n          var newInstance = new this.constructor();\n          return _extend(newInstance, _clone(_extend({}, this)));\n        }\n      }]);\n      return _class;\n    }();\n\n    // Base class for all builders\n    cls.BaseBuilder = function (_cls$Cloneable) {\n      _inherits(_class2, _cls$Cloneable);\n\n      /**\n       * Constructor.\n       * this.param  {Object} options Overriding one or more of `cls.DefaultQueryBuilderOptions`.\n       */\n      function _class2(options) {\n        _classCallCheck(this, _class2);\n        var _this = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this));\n        var defaults = JSON.parse(JSON.stringify(cls.DefaultQueryBuilderOptions));\n        // for function values, etc we need to manually copy\n        ['stringFormatter'].forEach(function (p) {\n          defaults[p] = cls.DefaultQueryBuilderOptions[p];\n        });\n        _this.options = _extend({}, defaults, options);\n        return _this;\n      }\n\n      /**\n       * Register a custom value handler for this builder instance.\n       *\n       * Note: this will override any globally registered handler for this value type.\n       */\n\n      _createClass(_class2, [{\n        key: 'registerValueHandler',\n        value: function registerValueHandler(type, handler) {\n          _registerValueHandler(this.options.valueHandlers, type, handler);\n          return this;\n        }\n\n        /**\n         * Sanitize given expression.\n         */\n      }, {\n        key: '_sanitizeExpression',\n        value: function _sanitizeExpression(expr) {\n          // If it's not a base builder instance\n          if (!cls.isSquelBuilder(expr)) {\n            // It must then be a string\n            if (typeof expr !== \"string\") {\n              throw new Error(\"expression must be a string or builder instance\");\n            }\n          }\n          return expr;\n        }\n\n        /**\n         * Sanitize the given name.\n         *\n         * The 'type' parameter is used to construct a meaningful error message in case validation fails.\n         */\n      }, {\n        key: '_sanitizeName',\n        value: function _sanitizeName(value, type) {\n          if (typeof value !== \"string\") {\n            throw new Error(type + ' must be a string');\n          }\n          return value;\n        }\n      }, {\n        key: '_sanitizeField',\n        value: function _sanitizeField(item) {\n          if (!cls.isSquelBuilder(item)) {\n            item = this._sanitizeName(item, \"field name\");\n          }\n          return item;\n        }\n      }, {\n        key: '_sanitizeBaseBuilder',\n        value: function _sanitizeBaseBuilder(item) {\n          if (cls.isSquelBuilder(item)) {\n            return item;\n          }\n          throw new Error(\"must be a builder instance\");\n        }\n      }, {\n        key: '_sanitizeTable',\n        value: function _sanitizeTable(item) {\n          if (typeof item !== \"string\") {\n            try {\n              item = this._sanitizeBaseBuilder(item);\n            } catch (e) {\n              throw new Error(\"table name must be a string or a builder\");\n            }\n          } else {\n            item = this._sanitizeName(item, 'table');\n          }\n          return item;\n        }\n      }, {\n        key: '_sanitizeTableAlias',\n        value: function _sanitizeTableAlias(item) {\n          return this._sanitizeName(item, \"table alias\");\n        }\n      }, {\n        key: '_sanitizeFieldAlias',\n        value: function _sanitizeFieldAlias(item) {\n          return this._sanitizeName(item, \"field alias\");\n        }\n\n        // Sanitize the given limit/offset value.\n      }, {\n        key: '_sanitizeLimitOffset',\n        value: function _sanitizeLimitOffset(value) {\n          value = parseInt(value);\n          if (0 > value || isNaN(value)) {\n            throw new Error(\"limit/offset must be >= 0\");\n          }\n          return value;\n        }\n\n        // Santize the given field value\n      }, {\n        key: '_sanitizeValue',\n        value: function _sanitizeValue(item) {\n          var itemType = typeof item === 'undefined' ? 'undefined' : _typeof(item);\n          if (null === item) {\n            // null is allowed\n          } else if (\"string\" === itemType || \"number\" === itemType || \"boolean\" === itemType) {\n            // primitives are allowed\n          } else if (cls.isSquelBuilder(item)) {\n            // Builders allowed\n          } else {\n            var typeIsValid = !!getValueHandler(item, this.options.valueHandlers, cls.globalValueHandlers);\n            if (!typeIsValid) {\n              throw new Error(\"field value must be a string, number, boolean, null or one of the registered custom value types\");\n            }\n          }\n          return item;\n        }\n\n        // Escape a string value, e.g. escape quotes and other characters within it.\n      }, {\n        key: '_escapeValue',\n        value: function _escapeValue(value) {\n          return this.options.replaceSingleQuotes && value ? value.replace(/\\'/g, this.options.singleQuoteReplacement) : value;\n        }\n      }, {\n        key: '_formatTableName',\n        value: function _formatTableName(item) {\n          if (this.options.autoQuoteTableNames) {\n            var quoteChar = this.options.nameQuoteCharacter;\n            item = '' + quoteChar + item + quoteChar;\n          }\n          return item;\n        }\n      }, {\n        key: '_formatFieldAlias',\n        value: function _formatFieldAlias(item) {\n          if (this.options.autoQuoteAliasNames) {\n            var quoteChar = this.options.fieldAliasQuoteCharacter;\n            item = '' + quoteChar + item + quoteChar;\n          }\n          return item;\n        }\n      }, {\n        key: '_formatTableAlias',\n        value: function _formatTableAlias(item) {\n          if (this.options.autoQuoteAliasNames) {\n            var quoteChar = this.options.tableAliasQuoteCharacter;\n            item = '' + quoteChar + item + quoteChar;\n          }\n          return this.options.useAsForTableAliasNames ? 'AS ' + item : item;\n        }\n      }, {\n        key: '_formatFieldName',\n        value: function _formatFieldName(item) {\n          var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if (this.options.autoQuoteFieldNames) {\n            var quoteChar = this.options.nameQuoteCharacter;\n            if (formattingOptions.ignorePeriodsForFieldNameQuotes) {\n              // a.b.c -> `a.b.c`\n              item = '' + quoteChar + item + quoteChar;\n            } else {\n              // a.b.c -> `a`.`b`.`c`\n              item = item.split('.').map(function (v) {\n                // treat '*' as special case (#79)\n                return '*' === v ? v : '' + quoteChar + v + quoteChar;\n              }).join('.');\n            }\n          }\n          return item;\n        }\n\n        // Format the given custom value\n      }, {\n        key: '_formatCustomValue',\n        value: function _formatCustomValue(value, asParam, formattingOptions) {\n          // user defined custom handlers takes precedence\n          var customHandler = getValueHandler(value, this.options.valueHandlers, cls.globalValueHandlers);\n\n          // use the custom handler if available\n          if (customHandler) {\n            value = customHandler(value, asParam, formattingOptions);\n\n            // custom value handler can instruct caller not to process returned value\n            if (value && value.rawNesting) {\n              return {\n                formatted: true,\n                rawNesting: true,\n                value: value.value\n              };\n            }\n          }\n          return {\n            formatted: !!customHandler,\n            value: value\n          };\n        }\n\n        /**\n         * Format given value for inclusion into parameter values array.\n         */\n      }, {\n        key: '_formatValueForParamArray',\n        value: function _formatValueForParamArray(value) {\n          var _this2 = this;\n          var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if (_isArray(value)) {\n            return value.map(function (v) {\n              return _this2._formatValueForParamArray(v, formattingOptions);\n            });\n          } else {\n            return this._formatCustomValue(value, true, formattingOptions).value;\n          }\n        }\n\n        /**\n         * Format the given field value for inclusion into the query string\n         */\n      }, {\n        key: '_formatValueForQueryString',\n        value: function _formatValueForQueryString(initialValue) {\n          var _this3 = this;\n          var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n          // maybe we have a cusotm value handler\n          var _formatCustomValue2 = this._formatCustomValue(initialValue, false, formattingOptions),\n            rawNesting = _formatCustomValue2.rawNesting,\n            formatted = _formatCustomValue2.formatted,\n            value = _formatCustomValue2.value;\n\n          // if formatting took place then return it directly\n\n          if (formatted) {\n            if (rawNesting) {\n              return value;\n            } else {\n              return this._applyNestingFormatting(value, _shouldApplyNesting(initialValue));\n            }\n          }\n\n          // if it's an array then format each element separately\n          if (_isArray(value)) {\n            value = value.map(function (v) {\n              return _this3._formatValueForQueryString(v);\n            });\n            value = this._applyNestingFormatting(value.join(', '), _shouldApplyNesting(value));\n          } else {\n            var typeofValue = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n            if (null === value) {\n              value = \"NULL\";\n            } else if (typeofValue === \"boolean\") {\n              value = value ? \"TRUE\" : \"FALSE\";\n            } else if (cls.isSquelBuilder(value)) {\n              value = this._applyNestingFormatting(value.toString(), _shouldApplyNesting(value));\n            } else if (typeofValue !== \"number\") {\n              // if it's a string and we have custom string formatting turned on then use that\n              if ('string' === typeofValue && this.options.stringFormatter) {\n                return this.options.stringFormatter(value);\n              }\n              if (formattingOptions.dontQuote) {\n                value = '' + value;\n              } else {\n                var escapedValue = this._escapeValue(value);\n                value = '\\'' + escapedValue + '\\'';\n              }\n            }\n          }\n          return value;\n        }\n      }, {\n        key: '_applyNestingFormatting',\n        value: function _applyNestingFormatting(str) {\n          var nesting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          if (str && typeof str === 'string' && nesting && !this.options.rawNesting) {\n            // apply brackets if they're not already existing\n            var alreadyHasBrackets = '(' === str.charAt(0) && ')' === str.charAt(str.length - 1);\n            if (alreadyHasBrackets) {\n              // check that it's the form \"((x)..(y))\" rather than \"(x)..(y)\"\n              var idx = 0,\n                open = 1;\n              while (str.length - 1 > ++idx) {\n                var c = str.charAt(idx);\n                if ('(' === c) {\n                  open++;\n                } else if (')' === c) {\n                  open--;\n                  if (1 > open) {\n                    alreadyHasBrackets = false;\n                    break;\n                  }\n                }\n              }\n            }\n            if (!alreadyHasBrackets) {\n              str = '(' + str + ')';\n            }\n          }\n          return str;\n        }\n\n        /**\n         * Build given string and its corresponding parameter values into\n         * output.\n         *\n         * @param {String} str\n         * @param {Array}  values\n         * @param {Object} [options] Additional options.\n         * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n         * @param {Boolean} [options.nested] Whether this expression is nested within another.\n         * @param {Boolean} [options.formattingOptions] Formatting options for values in query string.\n         * @return {Object}\n         */\n      }, {\n        key: '_buildString',\n        value: function _buildString(str, values) {\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          var nested = options.nested,\n            buildParameterized = options.buildParameterized,\n            formattingOptions = options.formattingOptions;\n          values = values || [];\n          str = str || '';\n          var formattedStr = '',\n            curValue = -1,\n            formattedValues = [];\n          var paramChar = this.options.parameterCharacter;\n          var idx = 0;\n          while (str.length > idx) {\n            // param char?\n            if (str.substr(idx, paramChar.length) === paramChar) {\n              var value = values[++curValue];\n              if (buildParameterized) {\n                if (cls.isSquelBuilder(value)) {\n                  var ret = value._toParamString({\n                    buildParameterized: buildParameterized,\n                    nested: true\n                  });\n                  formattedStr += ret.text;\n                  ret.values.forEach(function (value) {\n                    return formattedValues.push(value);\n                  });\n                } else {\n                  value = this._formatValueForParamArray(value, formattingOptions);\n                  if (_isArray(value)) {\n                    // Array(6) -> \"(??, ??, ??, ??, ??, ??)\"\n                    var tmpStr = value.map(function () {\n                      return paramChar;\n                    }).join(', ');\n                    formattedStr += '(' + tmpStr + ')';\n                    value.forEach(function (val) {\n                      return formattedValues.push(val);\n                    });\n                  } else {\n                    formattedStr += paramChar;\n                    formattedValues.push(value);\n                  }\n                }\n              } else {\n                formattedStr += this._formatValueForQueryString(value, formattingOptions);\n              }\n              idx += paramChar.length;\n            } else {\n              formattedStr += str.charAt(idx);\n              idx++;\n            }\n          }\n          return {\n            text: this._applyNestingFormatting(formattedStr, !!nested),\n            values: formattedValues\n          };\n        }\n\n        /**\n         * Build all given strings and their corresponding parameter values into\n         * output.\n         *\n         * @param {Array} strings\n         * @param {Array}  strValues array of value arrays corresponding to each string.\n         * @param {Object} [options] Additional options.\n         * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n         * @param {Boolean} [options.nested] Whether this expression is nested within another.\n         * @return {Object}\n         */\n      }, {\n        key: '_buildManyStrings',\n        value: function _buildManyStrings(strings, strValues) {\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          var totalStr = [],\n            totalValues = [];\n          for (var idx = 0; strings.length > idx; ++idx) {\n            var inputString = strings[idx],\n              inputValues = strValues[idx];\n            var _buildString2 = this._buildString(inputString, inputValues, {\n                buildParameterized: options.buildParameterized,\n                nested: false\n              }),\n              text = _buildString2.text,\n              values = _buildString2.values;\n            totalStr.push(text);\n            values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n          totalStr = totalStr.join(this.options.separator);\n          return {\n            text: totalStr.length ? this._applyNestingFormatting(totalStr, !!options.nested) : '',\n            values: totalValues\n          };\n        }\n\n        /**\n         * Get parameterized representation of this instance.\n         *\n         * @param {Object} [options] Options.\n         * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n         * @param {Boolean} [options.nested] Whether this expression is nested within another.\n         * @return {Object}\n         */\n      }, {\n        key: '_toParamString',\n        value: function _toParamString(options) {\n          throw new Error('Not yet implemented');\n        }\n\n        /**\n         * Get the expression string.\n         * @return {String}\n         */\n      }, {\n        key: 'toString',\n        value: function toString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return this._toParamString(options).text;\n        }\n\n        /**\n         * Get the parameterized expression string.\n         * @return {Object}\n         */\n      }, {\n        key: 'toParam',\n        value: function toParam() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return this._toParamString(_extend({}, options, {\n            buildParameterized: true\n          }));\n        }\n      }]);\n      return _class2;\n    }(cls.Cloneable);\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # cls.Expressions\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    */\n\n    /**\n     * An SQL expression builder.\n     *\n     * SQL expressions are used in WHERE and ON clauses to filter data by various criteria.\n     *\n     * Expressions can be nested. Nested expression contains can themselves\n     * contain nested expressions. When rendered a nested expression will be\n     * fully contained within brackets.\n     *\n     * All the build methods in this object return the object instance for chained method calling purposes.\n     */\n    cls.Expression = function (_cls$BaseBuilder) {\n      _inherits(_class3, _cls$BaseBuilder);\n\n      // Initialise the expression.\n      function _class3(options) {\n        _classCallCheck(this, _class3);\n        var _this4 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, options));\n        _this4._nodes = [];\n        return _this4;\n      }\n\n      // Combine the current expression with the given expression using the intersection operator (AND).\n\n      _createClass(_class3, [{\n        key: 'and',\n        value: function and(expr) {\n          for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            params[_key2 - 1] = arguments[_key2];\n          }\n          expr = this._sanitizeExpression(expr);\n          this._nodes.push({\n            type: 'AND',\n            expr: expr,\n            para: params\n          });\n          return this;\n        }\n\n        // Combine the current expression with the given expression using the union operator (OR).\n      }, {\n        key: 'or',\n        value: function or(expr) {\n          for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n            params[_key3 - 1] = arguments[_key3];\n          }\n          expr = this._sanitizeExpression(expr);\n          this._nodes.push({\n            type: 'OR',\n            expr: expr,\n            para: params\n          });\n          return this;\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = [],\n            totalValues = [];\n          var _iteratorNormalCompletion3 = true;\n          var _didIteratorError3 = false;\n          var _iteratorError3 = undefined;\n          try {\n            for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n              var node = _step3.value;\n              var type = node.type,\n                expr = node.expr,\n                para = node.para;\n              var _ref = cls.isSquelBuilder(expr) ? expr._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                }) : this._buildString(expr, para, {\n                  buildParameterized: options.buildParameterized\n                }),\n                text = _ref.text,\n                values = _ref.values;\n              if (totalStr.length) {\n                totalStr.push(type);\n              }\n              totalStr.push(text);\n              values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          } catch (err) {\n            _didIteratorError3 = true;\n            _iteratorError3 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion3 && _iterator3.return) {\n                _iterator3.return();\n              }\n            } finally {\n              if (_didIteratorError3) {\n                throw _iteratorError3;\n              }\n            }\n          }\n          totalStr = totalStr.join(' ');\n          return {\n            text: this._applyNestingFormatting(totalStr, !!options.nested),\n            values: totalValues\n          };\n        }\n      }]);\n      return _class3;\n    }(cls.BaseBuilder);\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # cls.Case\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    */\n\n    /**\n     * An SQL CASE expression builder.\n     *\n     * SQL cases are used to select proper values based on specific criteria.\n     */\n    cls.Case = function (_cls$BaseBuilder2) {\n      _inherits(_class4, _cls$BaseBuilder2);\n      function _class4(fieldName) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        _classCallCheck(this, _class4);\n        var _this5 = _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, options));\n        if (_isPlainObject(fieldName)) {\n          options = fieldName;\n          fieldName = null;\n        }\n        if (fieldName) {\n          _this5._fieldName = _this5._sanitizeField(fieldName);\n        }\n        _this5.options = _extend({}, cls.DefaultQueryBuilderOptions, options);\n        _this5._cases = [];\n        _this5._elseValue = null;\n        return _this5;\n      }\n      _createClass(_class4, [{\n        key: 'when',\n        value: function when(expression) {\n          for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n            values[_key4 - 1] = arguments[_key4];\n          }\n          this._cases.unshift({\n            expression: expression,\n            values: values || []\n          });\n          return this;\n        }\n      }, {\n        key: 'then',\n        value: function then(result) {\n          if (this._cases.length == 0) {\n            throw new Error(\"when() needs to be called first\");\n          }\n          this._cases[0].result = result;\n          return this;\n        }\n      }, {\n        key: 'else',\n        value: function _else(elseValue) {\n          this._elseValue = elseValue;\n          return this;\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = '',\n            totalValues = [];\n          var _iteratorNormalCompletion4 = true;\n          var _didIteratorError4 = false;\n          var _iteratorError4 = undefined;\n          try {\n            for (var _iterator4 = this._cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n              var _ref2 = _step4.value;\n              var expression = _ref2.expression;\n              var _values = _ref2.values;\n              var result = _ref2.result;\n              totalStr = _pad(totalStr, ' ');\n              var ret = this._buildString(expression, _values, {\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n              totalStr += 'WHEN ' + ret.text + ' THEN ' + this._formatValueForQueryString(result);\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          } catch (err) {\n            _didIteratorError4 = true;\n            _iteratorError4 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion4 && _iterator4.return) {\n                _iterator4.return();\n              }\n            } finally {\n              if (_didIteratorError4) {\n                throw _iteratorError4;\n              }\n            }\n          }\n          if (totalStr.length) {\n            totalStr += ' ELSE ' + this._formatValueForQueryString(this._elseValue) + ' END';\n            if (this._fieldName) {\n              totalStr = this._fieldName + ' ' + totalStr;\n            }\n            totalStr = 'CASE ' + totalStr;\n          } else {\n            totalStr = this._formatValueForQueryString(this._elseValue);\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class4;\n    }(cls.BaseBuilder);\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # Building blocks\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    */\n\n    /*\n    # A building block represents a single build-step within a query building process.\n    #\n    # Query builders consist of one or more building blocks which get run in a particular order. Building blocks can\n    # optionally specify methods to expose through the query builder interface. They can access all the input data for\n    # the query builder and manipulate it as necessary, as well as append to the final query string output.\n    #\n    # If you wish to customize how queries get built or add proprietary query phrases and content then it is recommended\n    # that you do so using one or more custom building blocks.\n    #\n    # Original idea posted in https://github.com/hiddentao/export/issues/10#issuecomment-15016427\n    */\n    cls.Block = function (_cls$BaseBuilder3) {\n      _inherits(_class5, _cls$BaseBuilder3);\n      function _class5(options) {\n        _classCallCheck(this, _class5);\n        return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, options));\n      }\n\n      /**\n      # Get input methods to expose within the query builder.\n      #\n      # By default all methods except the following get returned:\n      #   methods prefixed with _\n      #   constructor and toString()\n      #\n      # @return Object key -> function pairs\n      */\n\n      _createClass(_class5, [{\n        key: 'exposedMethods',\n        value: function exposedMethods() {\n          var ret = {};\n          var obj = this;\n          while (obj) {\n            Object.getOwnPropertyNames(obj).forEach(function (prop) {\n              if ('constructor' !== prop && typeof obj[prop] === \"function\" && prop.charAt(0) !== '_' && !cls.Block.prototype[prop]) {\n                ret[prop] = obj[prop];\n              }\n            });\n            obj = Object.getPrototypeOf(obj);\n          }\n          ;\n          return ret;\n        }\n      }]);\n      return _class5;\n    }(cls.BaseBuilder);\n\n    // A fixed string which always gets output\n    cls.StringBlock = function (_cls$Block) {\n      _inherits(_class6, _cls$Block);\n      function _class6(options, str) {\n        _classCallCheck(this, _class6);\n        var _this7 = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this, options));\n        _this7._str = str;\n        return _this7;\n      }\n      _createClass(_class6, [{\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return {\n            text: this._str,\n            values: []\n          };\n        }\n      }]);\n      return _class6;\n    }(cls.Block);\n\n    // A function string block\n    cls.FunctionBlock = function (_cls$Block2) {\n      _inherits(_class7, _cls$Block2);\n      function _class7(options) {\n        _classCallCheck(this, _class7);\n        var _this8 = _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).call(this, options));\n        _this8._strings = [];\n        _this8._values = [];\n        return _this8;\n      }\n      _createClass(_class7, [{\n        key: 'function',\n        value: function _function(str) {\n          this._strings.push(str);\n          for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n            values[_key5 - 1] = arguments[_key5];\n          }\n          this._values.push(values);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return this._buildManyStrings(this._strings, this._values, options);\n        }\n      }]);\n      return _class7;\n    }(cls.Block);\n\n    // value handler for FunctionValueBlock objects\n    cls.registerValueHandler(cls.FunctionBlock, function (value) {\n      var asParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return asParam ? value.toParam() : value.toString();\n    });\n\n    /*\n    # Table specifier base class\n    */\n    cls.AbstractTableBlock = function (_cls$Block3) {\n      _inherits(_class8, _cls$Block3);\n\n      /**\n       * @param {Boolean} [options.singleTable] If true then only allow one table spec.\n       * @param {String} [options.prefix] String prefix for output.\n       */\n      function _class8(options, prefix) {\n        _classCallCheck(this, _class8);\n        var _this9 = _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).call(this, options));\n        _this9._tables = [];\n        return _this9;\n      }\n\n      /**\n      # Update given table.\n      #\n      # An alias may also be specified for the table.\n      #\n      # Concrete subclasses should provide a method which calls this\n      */\n\n      _createClass(_class8, [{\n        key: '_table',\n        value: function _table(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          alias = alias ? this._sanitizeTableAlias(alias) : alias;\n          table = this._sanitizeTable(table);\n          if (this.options.singleTable) {\n            this._tables = [];\n          }\n          this._tables.push({\n            table: table,\n            alias: alias\n          });\n        }\n\n        // get whether a table has been set\n      }, {\n        key: '_hasTable',\n        value: function _hasTable() {\n          return 0 < this._tables.length;\n        }\n\n        /**\n         * @override\n         */\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = '',\n            totalValues = [];\n          if (this._hasTable()) {\n            // retrieve the parameterised queries\n            var _iteratorNormalCompletion5 = true;\n            var _didIteratorError5 = false;\n            var _iteratorError5 = undefined;\n            try {\n              for (var _iterator5 = this._tables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n                var _ref3 = _step5.value;\n                var table = _ref3.table;\n                var alias = _ref3.alias;\n                totalStr = _pad(totalStr, ', ');\n                var tableStr = void 0;\n                if (cls.isSquelBuilder(table)) {\n                  var _table$_toParamString = table._toParamString({\n                      buildParameterized: options.buildParameterized,\n                      nested: true\n                    }),\n                    text = _table$_toParamString.text,\n                    values = _table$_toParamString.values;\n                  tableStr = text;\n                  values.forEach(function (value) {\n                    return totalValues.push(value);\n                  });\n                } else {\n                  tableStr = this._formatTableName(table);\n                }\n                if (alias) {\n                  tableStr += ' ' + this._formatTableAlias(alias);\n                }\n                totalStr += tableStr;\n              }\n            } catch (err) {\n              _didIteratorError5 = true;\n              _iteratorError5 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                  _iterator5.return();\n                }\n              } finally {\n                if (_didIteratorError5) {\n                  throw _iteratorError5;\n                }\n              }\n            }\n            if (this.options.prefix) {\n              totalStr = this.options.prefix + ' ' + totalStr;\n            }\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class8;\n    }(cls.Block);\n\n    // target table for DELETE queries, DELETE <??> FROM\n    cls.TargetTableBlock = function (_cls$AbstractTableBlo) {\n      _inherits(_class9, _cls$AbstractTableBlo);\n      function _class9() {\n        _classCallCheck(this, _class9);\n        return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));\n      }\n      _createClass(_class9, [{\n        key: 'target',\n        value: function target(table) {\n          this._table(table);\n        }\n      }]);\n      return _class9;\n    }(cls.AbstractTableBlock);\n\n    // Update Table\n    cls.UpdateTableBlock = function (_cls$AbstractTableBlo2) {\n      _inherits(_class10, _cls$AbstractTableBlo2);\n      function _class10() {\n        _classCallCheck(this, _class10);\n        return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));\n      }\n      _createClass(_class10, [{\n        key: 'table',\n        value: function table(_table2) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          this._table(_table2, alias);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (!this._hasTable()) {\n            throw new Error(\"table() needs to be called\");\n          }\n          return _get(_class10.prototype.__proto__ || Object.getPrototypeOf(_class10.prototype), '_toParamString', this).call(this, options);\n        }\n      }]);\n      return _class10;\n    }(cls.AbstractTableBlock);\n\n    // FROM table\n    cls.FromTableBlock = function (_cls$AbstractTableBlo3) {\n      _inherits(_class11, _cls$AbstractTableBlo3);\n      function _class11(options) {\n        _classCallCheck(this, _class11);\n        return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, _extend({}, options, {\n          prefix: 'FROM'\n        })));\n      }\n      _createClass(_class11, [{\n        key: 'from',\n        value: function from(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          this._table(table, alias);\n        }\n      }]);\n      return _class11;\n    }(cls.AbstractTableBlock);\n\n    // INTO table\n    cls.IntoTableBlock = function (_cls$AbstractTableBlo4) {\n      _inherits(_class12, _cls$AbstractTableBlo4);\n      function _class12(options) {\n        _classCallCheck(this, _class12);\n        return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).call(this, _extend({}, options, {\n          prefix: 'INTO',\n          singleTable: true\n        })));\n      }\n      _createClass(_class12, [{\n        key: 'into',\n        value: function into(table) {\n          this._table(table);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          if (!this._hasTable()) {\n            throw new Error(\"into() needs to be called\");\n          }\n          return _get(_class12.prototype.__proto__ || Object.getPrototypeOf(_class12.prototype), '_toParamString', this).call(this, options);\n        }\n      }]);\n      return _class12;\n    }(cls.AbstractTableBlock);\n\n    // (SELECT) Get field\n    cls.GetFieldBlock = function (_cls$Block4) {\n      _inherits(_class13, _cls$Block4);\n      function _class13(options) {\n        _classCallCheck(this, _class13);\n        var _this14 = _possibleConstructorReturn(this, (_class13.__proto__ || Object.getPrototypeOf(_class13)).call(this, options));\n        _this14._fields = [];\n        return _this14;\n      }\n\n      /**\n      # Add the given fields to the final result set.\n      #\n      # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n      # as the values. If the value for a key is null then no alias is set for that field.\n      #\n      # Internally this method simply calls the field() method of this block to add each individual field.\n      #\n      # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n      */\n\n      _createClass(_class13, [{\n        key: 'fields',\n        value: function fields(_fields) {\n          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if (_isArray(_fields)) {\n            var _iteratorNormalCompletion6 = true;\n            var _didIteratorError6 = false;\n            var _iteratorError6 = undefined;\n            try {\n              for (var _iterator6 = _fields[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n                var field = _step6.value;\n                this.field(field, null, options);\n              }\n            } catch (err) {\n              _didIteratorError6 = true;\n              _iteratorError6 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                  _iterator6.return();\n                }\n              } finally {\n                if (_didIteratorError6) {\n                  throw _iteratorError6;\n                }\n              }\n            }\n          } else {\n            for (var _field2 in _fields) {\n              var alias = _fields[_field2];\n              this.field(_field2, alias, options);\n            }\n          }\n        }\n\n        /**\n        # Add the given field to the final result set.\n        #\n        # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n        # e.g. DATE_FORMAT(a.started, \"%H\")\n        #\n        # An alias may also be specified for this field.\n        #\n        # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n        */\n      }, {\n        key: 'field',\n        value: function field(_field) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n          _field = this._sanitizeField(_field);\n\n          // if field-alias combo already present then don't add\n          var existingField = this._fields.filter(function (f) {\n            return f.name === _field && f.alias === alias;\n          });\n          if (existingField.length) {\n            return this;\n          }\n          this._fields.push({\n            name: _field,\n            alias: alias,\n            options: options\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n          var totalStr = '',\n            totalValues = [];\n          var _iteratorNormalCompletion7 = true;\n          var _didIteratorError7 = false;\n          var _iteratorError7 = undefined;\n          try {\n            for (var _iterator7 = this._fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n              var field = _step7.value;\n              totalStr = _pad(totalStr, \", \");\n              var name = field.name,\n                alias = field.alias,\n                _options = field.options;\n              if (typeof name === 'string') {\n                totalStr += this._formatFieldName(name, _options);\n              } else {\n                var ret = name._toParamString({\n                  nested: true,\n                  buildParameterized: buildParameterized\n                });\n                totalStr += ret.text;\n                ret.values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              }\n              if (alias) {\n                totalStr += ' AS ' + this._formatFieldAlias(alias);\n              }\n            }\n          } catch (err) {\n            _didIteratorError7 = true;\n            _iteratorError7 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion7 && _iterator7.return) {\n                _iterator7.return();\n              }\n            } finally {\n              if (_didIteratorError7) {\n                throw _iteratorError7;\n              }\n            }\n          }\n          if (!totalStr.length) {\n            // if select query and a table is set then all fields wanted\n            var fromTableBlock = queryBuilder && queryBuilder.getBlock(cls.FromTableBlock);\n            if (fromTableBlock && fromTableBlock._hasTable()) {\n              totalStr = \"*\";\n            }\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class13;\n    }(cls.Block);\n\n    // Base class for setting fields to values (used for INSERT and UPDATE queries)\n    cls.AbstractSetFieldBlock = function (_cls$Block5) {\n      _inherits(_class14, _cls$Block5);\n      function _class14(options) {\n        _classCallCheck(this, _class14);\n        var _this15 = _possibleConstructorReturn(this, (_class14.__proto__ || Object.getPrototypeOf(_class14)).call(this, options));\n        _this15._reset();\n        return _this15;\n      }\n      _createClass(_class14, [{\n        key: '_reset',\n        value: function _reset() {\n          this._fields = [];\n          this._values = [[]];\n          this._valueOptions = [[]];\n        }\n\n        // Update the given field with the given value.\n        // This will override any previously set value for the given field.\n      }, {\n        key: '_set',\n        value: function _set(field, value) {\n          var valueOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          if (this._values.length > 1) {\n            throw new Error(\"Cannot set multiple rows of fields this way.\");\n          }\n          if (typeof value !== 'undefined') {\n            value = this._sanitizeValue(value);\n          }\n          field = this._sanitizeField(field);\n\n          // Explicity overwrite existing fields\n          var index = this._fields.indexOf(field);\n\n          // if field not defined before\n          if (-1 === index) {\n            this._fields.push(field);\n            index = this._fields.length - 1;\n          }\n          this._values[0][index] = value;\n          this._valueOptions[0][index] = valueOptions;\n        }\n\n        // Insert fields based on the key/value pairs in the given object\n      }, {\n        key: '_setFields',\n        value: function _setFields(fields) {\n          var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) !== 'object') {\n            throw new Error(\"Expected an object but got \" + (typeof fields === 'undefined' ? 'undefined' : _typeof(fields)));\n          }\n          for (var field in fields) {\n            this._set(field, fields[field], valueOptions);\n          }\n        }\n\n        // Insert multiple rows for the given fields. Accepts an array of objects.\n        // This will override all previously set values for every field.\n      }, {\n        key: '_setFieldsRows',\n        value: function _setFieldsRows(fieldsRows) {\n          var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          if (!_isArray(fieldsRows)) {\n            throw new Error(\"Expected an array of objects but got \" + (typeof fieldsRows === 'undefined' ? 'undefined' : _typeof(fieldsRows)));\n          }\n\n          // Reset the objects stored fields and values\n          this._reset();\n\n          // for each row\n          for (var i = 0; fieldsRows.length > i; ++i) {\n            var fieldRow = fieldsRows[i];\n\n            // for each field\n            for (var field in fieldRow) {\n              var value = fieldRow[field];\n              field = this._sanitizeField(field);\n              value = this._sanitizeValue(value);\n              var index = this._fields.indexOf(field);\n              if (0 < i && -1 === index) {\n                throw new Error('All fields in subsequent rows must match the fields in the first row');\n              }\n\n              // Add field only if it hasn't been added before\n              if (-1 === index) {\n                this._fields.push(field);\n                index = this._fields.length - 1;\n              }\n\n              // The first value added needs to add the array\n              if (!_isArray(this._values[i])) {\n                this._values[i] = [];\n                this._valueOptions[i] = [];\n              }\n              this._values[i][index] = value;\n              this._valueOptions[i][index] = valueOptions;\n            }\n          }\n        }\n      }]);\n      return _class14;\n    }(cls.Block);\n\n    // (UPDATE) SET field=value\n    cls.SetFieldBlock = function (_cls$AbstractSetField) {\n      _inherits(_class15, _cls$AbstractSetField);\n      function _class15() {\n        _classCallCheck(this, _class15);\n        return _possibleConstructorReturn(this, (_class15.__proto__ || Object.getPrototypeOf(_class15)).apply(this, arguments));\n      }\n      _createClass(_class15, [{\n        key: 'set',\n        value: function set(field, value, options) {\n          this._set(field, value, options);\n        }\n      }, {\n        key: 'setFields',\n        value: function setFields(fields, valueOptions) {\n          this._setFields(fields, valueOptions);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var buildParameterized = options.buildParameterized;\n          if (0 >= this._fields.length) {\n            throw new Error(\"set() needs to be called\");\n          }\n          var totalStr = '',\n            totalValues = [];\n          for (var i = 0; i < this._fields.length; ++i) {\n            totalStr = _pad(totalStr, ', ');\n            var field = this._formatFieldName(this._fields[i]);\n            var value = this._values[0][i];\n\n            // e.g. field can be an expression such as `count = count + 1`\n            if (0 > field.indexOf('=')) {\n              field = field + ' = ' + this.options.parameterCharacter;\n            }\n            var ret = this._buildString(field, [value], {\n              buildParameterized: buildParameterized,\n              formattingOptions: this._valueOptions[0][i]\n            });\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n          return {\n            text: 'SET ' + totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class15;\n    }(cls.AbstractSetFieldBlock);\n\n    // (INSERT INTO) ... field ... value\n    cls.InsertFieldValueBlock = function (_cls$AbstractSetField2) {\n      _inherits(_class16, _cls$AbstractSetField2);\n      function _class16() {\n        _classCallCheck(this, _class16);\n        return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));\n      }\n      _createClass(_class16, [{\n        key: 'set',\n        value: function set(field, value) {\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          this._set(field, value, options);\n        }\n      }, {\n        key: 'setFields',\n        value: function setFields(fields, valueOptions) {\n          this._setFields(fields, valueOptions);\n        }\n      }, {\n        key: 'setFieldsRows',\n        value: function setFieldsRows(fieldsRows, valueOptions) {\n          this._setFieldsRows(fieldsRows, valueOptions);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var _this18 = this;\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var buildParameterized = options.buildParameterized;\n          var fieldString = this._fields.map(function (f) {\n            return _this18._formatFieldName(f);\n          }).join(', ');\n          var valueStrings = [],\n            totalValues = [];\n          for (var i = 0; i < this._values.length; ++i) {\n            valueStrings[i] = '';\n            for (var j = 0; j < this._values[i].length; ++j) {\n              var ret = this._buildString(this.options.parameterCharacter, [this._values[i][j]], {\n                buildParameterized: buildParameterized,\n                formattingOptions: this._valueOptions[i][j]\n              });\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n              valueStrings[i] = _pad(valueStrings[i], ', ');\n              valueStrings[i] += ret.text;\n            }\n          }\n          return {\n            text: fieldString.length ? '(' + fieldString + ') VALUES (' + valueStrings.join('), (') + ')' : '',\n            values: totalValues\n          };\n        }\n      }]);\n      return _class16;\n    }(cls.AbstractSetFieldBlock);\n\n    // (INSERT INTO) ... field ... (SELECT ... FROM ...)\n    cls.InsertFieldsFromQueryBlock = function (_cls$Block6) {\n      _inherits(_class17, _cls$Block6);\n      function _class17(options) {\n        _classCallCheck(this, _class17);\n        var _this19 = _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).call(this, options));\n        _this19._fields = [];\n        _this19._query = null;\n        return _this19;\n      }\n      _createClass(_class17, [{\n        key: 'fromQuery',\n        value: function fromQuery(fields, selectQuery) {\n          var _this20 = this;\n          this._fields = fields.map(function (v) {\n            return _this20._sanitizeField(v);\n          });\n          this._query = this._sanitizeBaseBuilder(selectQuery);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = '',\n            totalValues = [];\n          if (this._fields.length && this._query) {\n            var _query$_toParamString = this._query._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              }),\n              text = _query$_toParamString.text,\n              values = _query$_toParamString.values;\n            totalStr = '(' + this._fields.join(', ') + ') ' + this._applyNestingFormatting(text);\n            totalValues = values;\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class17;\n    }(cls.Block);\n\n    // DISTINCT\n    cls.DistinctBlock = function (_cls$Block7) {\n      _inherits(_class18, _cls$Block7);\n      function _class18() {\n        _classCallCheck(this, _class18);\n        return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));\n      }\n      _createClass(_class18, [{\n        key: 'distinct',\n        // Add the DISTINCT keyword to the query.\n        value: function distinct() {\n          this._useDistinct = true;\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          return {\n            text: this._useDistinct ? \"DISTINCT\" : \"\",\n            values: []\n          };\n        }\n      }]);\n      return _class18;\n    }(cls.Block);\n\n    // GROUP BY\n    cls.GroupByBlock = function (_cls$Block8) {\n      _inherits(_class19, _cls$Block8);\n      function _class19(options) {\n        _classCallCheck(this, _class19);\n        var _this22 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this, options));\n        _this22._groups = [];\n        return _this22;\n      }\n\n      // Add a GROUP BY transformation for the given field.\n\n      _createClass(_class19, [{\n        key: 'group',\n        value: function group(field) {\n          this._groups.push(this._sanitizeField(field));\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return {\n            text: this._groups.length ? 'GROUP BY ' + this._groups.join(', ') : '',\n            values: []\n          };\n        }\n      }]);\n      return _class19;\n    }(cls.Block);\n    cls.AbstractVerbSingleValueBlock = function (_cls$Block9) {\n      _inherits(_class20, _cls$Block9);\n\n      /**\n       * @param options.verb The prefix verb string.\n       */\n      function _class20(options) {\n        _classCallCheck(this, _class20);\n        var _this23 = _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).call(this, options));\n        _this23._value = null;\n        return _this23;\n      }\n      _createClass(_class20, [{\n        key: '_setValue',\n        value: function _setValue(value) {\n          this._value = null !== value ? this._sanitizeLimitOffset(value) : value;\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var expr = null !== this._value ? this.options.verb + ' ' + this.options.parameterCharacter : '';\n          var values = null !== this._value ? [this._value] : [];\n          return this._buildString(expr, values, options);\n        }\n      }]);\n      return _class20;\n    }(cls.Block);\n\n    // OFFSET x\n    cls.OffsetBlock = function (_cls$AbstractVerbSing) {\n      _inherits(_class21, _cls$AbstractVerbSing);\n      function _class21(options) {\n        _classCallCheck(this, _class21);\n        return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, _extend({}, options, {\n          verb: 'OFFSET'\n        })));\n      }\n\n      /**\n      # Set the OFFSET transformation.\n      #\n      # Call this will override the previously set offset for this query. Also note that Passing 0 for 'max' will remove\n      # the offset.\n      */\n\n      _createClass(_class21, [{\n        key: 'offset',\n        value: function offset(start) {\n          this._setValue(start);\n        }\n      }]);\n      return _class21;\n    }(cls.AbstractVerbSingleValueBlock);\n\n    // LIMIT\n    cls.LimitBlock = function (_cls$AbstractVerbSing2) {\n      _inherits(_class22, _cls$AbstractVerbSing2);\n      function _class22(options) {\n        _classCallCheck(this, _class22);\n        return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).call(this, _extend({}, options, {\n          verb: 'LIMIT'\n        })));\n      }\n\n      /**\n      # Set the LIMIT transformation.\n      #\n      # Call this will override the previously set limit for this query. Also note that Passing `null` will remove\n      # the limit.\n      */\n\n      _createClass(_class22, [{\n        key: 'limit',\n        value: function limit(_limit2) {\n          this._setValue(_limit2);\n        }\n      }]);\n      return _class22;\n    }(cls.AbstractVerbSingleValueBlock);\n\n    // Abstract condition base class\n    cls.AbstractConditionBlock = function (_cls$Block10) {\n      _inherits(_class23, _cls$Block10);\n\n      /**\n       * @param {String} options.verb The condition verb.\n       */\n      function _class23(options) {\n        _classCallCheck(this, _class23);\n        var _this26 = _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, options));\n        _this26._conditions = [];\n        return _this26;\n      }\n\n      /**\n      # Add a condition.\n      #\n      # When the final query is constructed all the conditions are combined using the intersection (AND) operator.\n      #\n      # Concrete subclasses should provide a method which calls this\n      */\n\n      _createClass(_class23, [{\n        key: '_condition',\n        value: function _condition(condition) {\n          condition = this._sanitizeExpression(condition);\n          for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n            values[_key6 - 1] = arguments[_key6];\n          }\n          this._conditions.push({\n            expr: condition,\n            values: values || []\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = [],\n            totalValues = [];\n          var _iteratorNormalCompletion8 = true;\n          var _didIteratorError8 = false;\n          var _iteratorError8 = undefined;\n          try {\n            for (var _iterator8 = this._conditions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n              var _ref4 = _step8.value;\n              var expr = _ref4.expr;\n              var _values2 = _ref4.values;\n              var ret = cls.isSquelBuilder(expr) ? expr._toParamString({\n                buildParameterized: options.buildParameterized\n              }) : this._buildString(expr, _values2, {\n                buildParameterized: options.buildParameterized\n              });\n              if (ret.text.length) {\n                totalStr.push(ret.text);\n              }\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          } catch (err) {\n            _didIteratorError8 = true;\n            _iteratorError8 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion8 && _iterator8.return) {\n                _iterator8.return();\n              }\n            } finally {\n              if (_didIteratorError8) {\n                throw _iteratorError8;\n              }\n            }\n          }\n          if (totalStr.length) {\n            totalStr = totalStr.join(') AND (');\n          }\n          return {\n            text: totalStr.length ? this.options.verb + ' (' + totalStr + ')' : '',\n            values: totalValues\n          };\n        }\n      }]);\n      return _class23;\n    }(cls.Block);\n\n    // WHERE\n    cls.WhereBlock = function (_cls$AbstractConditio) {\n      _inherits(_class24, _cls$AbstractConditio);\n      function _class24(options) {\n        _classCallCheck(this, _class24);\n        return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).call(this, _extend({}, options, {\n          verb: 'WHERE'\n        })));\n      }\n      _createClass(_class24, [{\n        key: 'where',\n        value: function where(condition) {\n          for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n            values[_key7 - 1] = arguments[_key7];\n          }\n          this._condition.apply(this, [condition].concat(values));\n        }\n      }]);\n      return _class24;\n    }(cls.AbstractConditionBlock);\n\n    // HAVING\n    cls.HavingBlock = function (_cls$AbstractConditio2) {\n      _inherits(_class25, _cls$AbstractConditio2);\n      function _class25(options) {\n        _classCallCheck(this, _class25);\n        return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, _extend({}, options, {\n          verb: 'HAVING'\n        })));\n      }\n      _createClass(_class25, [{\n        key: 'having',\n        value: function having(condition) {\n          for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n            values[_key8 - 1] = arguments[_key8];\n          }\n          this._condition.apply(this, [condition].concat(values));\n        }\n      }]);\n      return _class25;\n    }(cls.AbstractConditionBlock);\n\n    // ORDER BY\n    cls.OrderByBlock = function (_cls$Block11) {\n      _inherits(_class26, _cls$Block11);\n      function _class26(options) {\n        _classCallCheck(this, _class26);\n        var _this29 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, options));\n        _this29._orders = [];\n        return _this29;\n      }\n\n      /**\n      # Add an ORDER BY transformation for the given field in the given order.\n      #\n      # To specify descending order pass false for the 'dir' parameter.\n      */\n\n      _createClass(_class26, [{\n        key: 'order',\n        value: function order(field, dir) {\n          field = this._sanitizeField(field);\n          if (!(typeof dir === 'string')) {\n            if (dir === undefined) {\n              dir = 'ASC'; // Default to asc\n            } else if (dir !== null) {\n              dir = dir ? 'ASC' : 'DESC'; // Convert truthy to asc\n            }\n          }\n\n          for (var _len9 = arguments.length, values = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n            values[_key9 - 2] = arguments[_key9];\n          }\n          this._orders.push({\n            field: field,\n            dir: dir,\n            values: values || []\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = '',\n            totalValues = [];\n          var _iteratorNormalCompletion9 = true;\n          var _didIteratorError9 = false;\n          var _iteratorError9 = undefined;\n          try {\n            for (var _iterator9 = this._orders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n              var _ref5 = _step9.value;\n              var field = _ref5.field;\n              var dir = _ref5.dir;\n              var _values3 = _ref5.values;\n              totalStr = _pad(totalStr, ', ');\n              var ret = this._buildString(field, _values3, {\n                buildParameterized: options.buildParameterized\n              });\n              totalStr += ret.text, _isArray(ret.values) && ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n              if (dir !== null) {\n                totalStr += ' ' + dir;\n              }\n            }\n          } catch (err) {\n            _didIteratorError9 = true;\n            _iteratorError9 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion9 && _iterator9.return) {\n                _iterator9.return();\n              }\n            } finally {\n              if (_didIteratorError9) {\n                throw _iteratorError9;\n              }\n            }\n          }\n          return {\n            text: totalStr.length ? 'ORDER BY ' + totalStr : '',\n            values: totalValues\n          };\n        }\n      }]);\n      return _class26;\n    }(cls.Block);\n\n    // JOIN\n    cls.JoinBlock = function (_cls$Block12) {\n      _inherits(_class27, _cls$Block12);\n      function _class27(options) {\n        _classCallCheck(this, _class27);\n        var _this30 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, options));\n        _this30._joins = [];\n        return _this30;\n      }\n\n      /**\n      # Add a JOIN with the given table.\n      #\n      # 'table' is the name of the table to join with.\n      #\n      # 'alias' is an optional alias for the table name.\n      #\n      # 'condition' is an optional condition (containing an SQL expression) for the JOIN.\n      #\n      # 'type' must be either one of INNER, OUTER, LEFT or RIGHT. Default is 'INNER'.\n      #\n      */\n\n      _createClass(_class27, [{\n        key: 'join',\n        value: function join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'INNER';\n          table = this._sanitizeTable(table, true);\n          alias = alias ? this._sanitizeTableAlias(alias) : alias;\n          condition = condition ? this._sanitizeExpression(condition) : condition;\n          this._joins.push({\n            type: type,\n            table: table,\n            alias: alias,\n            condition: condition\n          });\n        }\n      }, {\n        key: 'left_join',\n        value: function left_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'LEFT');\n        }\n      }, {\n        key: 'right_join',\n        value: function right_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'RIGHT');\n        }\n      }, {\n        key: 'outer_join',\n        value: function outer_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'OUTER');\n        }\n      }, {\n        key: 'left_outer_join',\n        value: function left_outer_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'LEFT OUTER');\n        }\n      }, {\n        key: 'full_join',\n        value: function full_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'FULL');\n        }\n      }, {\n        key: 'cross_join',\n        value: function cross_join(table) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n          this.join(table, alias, condition, 'CROSS');\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = \"\",\n            totalValues = [];\n          var _iteratorNormalCompletion10 = true;\n          var _didIteratorError10 = false;\n          var _iteratorError10 = undefined;\n          try {\n            for (var _iterator10 = this._joins[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n              var _ref6 = _step10.value;\n              var type = _ref6.type;\n              var table = _ref6.table;\n              var alias = _ref6.alias;\n              var condition = _ref6.condition;\n              totalStr = _pad(totalStr, this.options.separator);\n              var tableStr = void 0;\n              if (cls.isSquelBuilder(table)) {\n                var ret = table._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                });\n                ret.values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n                tableStr = ret.text;\n              } else {\n                tableStr = this._formatTableName(table);\n              }\n              totalStr += type + ' JOIN ' + tableStr;\n              if (alias) {\n                totalStr += ' ' + this._formatTableAlias(alias);\n              }\n              if (condition) {\n                totalStr += ' ON ';\n                var _ret2 = void 0;\n                if (cls.isSquelBuilder(condition)) {\n                  _ret2 = condition._toParamString({\n                    buildParameterized: options.buildParameterized\n                  });\n                } else {\n                  _ret2 = this._buildString(condition, [], {\n                    buildParameterized: options.buildParameterized\n                  });\n                }\n                totalStr += this._applyNestingFormatting(_ret2.text);\n                _ret2.values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              }\n            }\n          } catch (err) {\n            _didIteratorError10 = true;\n            _iteratorError10 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion10 && _iterator10.return) {\n                _iterator10.return();\n              }\n            } finally {\n              if (_didIteratorError10) {\n                throw _iteratorError10;\n              }\n            }\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class27;\n    }(cls.Block);\n\n    // UNION\n    cls.UnionBlock = function (_cls$Block13) {\n      _inherits(_class28, _cls$Block13);\n      function _class28(options) {\n        _classCallCheck(this, _class28);\n        var _this31 = _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).call(this, options));\n        _this31._unions = [];\n        return _this31;\n      }\n\n      /**\n      # Add a UNION with the given table/query.\n      #\n      # 'table' is the name of the table or query to union with.\n      #\n      # 'type' must be either one of UNION or UNION ALL.... Default is 'UNION'.\n      */\n\n      _createClass(_class28, [{\n        key: 'union',\n        value: function union(table) {\n          var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UNION';\n          table = this._sanitizeTable(table);\n          this._unions.push({\n            type: type,\n            table: table\n          });\n        }\n\n        // Add a UNION ALL with the given table/query.\n      }, {\n        key: 'union_all',\n        value: function union_all(table) {\n          this.union(table, 'UNION ALL');\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = '',\n            totalValues = [];\n          var _iteratorNormalCompletion11 = true;\n          var _didIteratorError11 = false;\n          var _iteratorError11 = undefined;\n          try {\n            for (var _iterator11 = this._unions[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n              var _ref7 = _step11.value;\n              var type = _ref7.type;\n              var table = _ref7.table;\n              totalStr = _pad(totalStr, this.options.separator);\n              var tableStr = void 0;\n              if (table instanceof cls.BaseBuilder) {\n                var ret = table._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                });\n                tableStr = ret.text;\n                ret.values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              } else {\n                totalStr = this._formatTableName(table);\n              }\n              totalStr += type + ' ' + tableStr;\n            }\n          } catch (err) {\n            _didIteratorError11 = true;\n            _iteratorError11 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion11 && _iterator11.return) {\n                _iterator11.return();\n              }\n            } finally {\n              if (_didIteratorError11) {\n                throw _iteratorError11;\n              }\n            }\n          }\n          return {\n            text: totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class28;\n    }(cls.Block);\n\n    /*\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    # Query builders\n    # ---------------------------------------------------------------------------------------------------------\n    # ---------------------------------------------------------------------------------------------------------\n    */\n\n    /**\n    # Query builder base class\n    #\n    # Note that the query builder does not check the final query string for correctness.\n    #\n    # All the build methods in this object return the object instance for chained method calling purposes.\n    */\n    cls.QueryBuilder = function (_cls$BaseBuilder4) {\n      _inherits(_class29, _cls$BaseBuilder4);\n\n      /**\n      # Constructor\n      #\n      # blocks - array of cls.BaseBuilderBlock instances to build the query with.\n      */\n      function _class29(options, blocks) {\n        _classCallCheck(this, _class29);\n        var _this32 = _possibleConstructorReturn(this, (_class29.__proto__ || Object.getPrototypeOf(_class29)).call(this, options));\n        _this32.blocks = blocks || [];\n\n        // Copy exposed methods into myself\n        var _iteratorNormalCompletion12 = true;\n        var _didIteratorError12 = false;\n        var _iteratorError12 = undefined;\n        try {\n          for (var _iterator12 = _this32.blocks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n            var block = _step12.value;\n            var exposedMethods = block.exposedMethods();\n            for (var methodName in exposedMethods) {\n              var methodBody = exposedMethods[methodName];\n              if (undefined !== _this32[methodName]) {\n                throw new Error('Builder already has a builder method called: ' + methodName);\n              }\n              (function (block, name, body) {\n                _this32[name] = function () {\n                  for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n                    args[_key10] = arguments[_key10];\n                  }\n                  body.call.apply(body, [block].concat(args));\n                  return _this32;\n                };\n              })(block, methodName, methodBody);\n            }\n          }\n        } catch (err) {\n          _didIteratorError12 = true;\n          _iteratorError12 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion12 && _iterator12.return) {\n              _iterator12.return();\n            }\n          } finally {\n            if (_didIteratorError12) {\n              throw _iteratorError12;\n            }\n          }\n        }\n        return _this32;\n      }\n\n      /**\n      # Register a custom value handler for this query builder and all its contained blocks.\n      #\n      # Note: This will override any globally registered handler for this value type.\n      */\n\n      _createClass(_class29, [{\n        key: 'registerValueHandler',\n        value: function registerValueHandler(type, handler) {\n          var _iteratorNormalCompletion13 = true;\n          var _didIteratorError13 = false;\n          var _iteratorError13 = undefined;\n          try {\n            for (var _iterator13 = this.blocks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n              var block = _step13.value;\n              block.registerValueHandler(type, handler);\n            }\n          } catch (err) {\n            _didIteratorError13 = true;\n            _iteratorError13 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion13 && _iterator13.return) {\n                _iterator13.return();\n              }\n            } finally {\n              if (_didIteratorError13) {\n                throw _iteratorError13;\n              }\n            }\n          }\n          _get(_class29.prototype.__proto__ || Object.getPrototypeOf(_class29.prototype), 'registerValueHandler', this).call(this, type, handler);\n          return this;\n        }\n\n        /**\n        # Update query builder options\n        #\n        # This will update the options for all blocks too. Use this method with caution as it allows you to change the\n        # behaviour of your query builder mid-build.\n        */\n      }, {\n        key: 'updateOptions',\n        value: function updateOptions(options) {\n          this.options = _extend({}, this.options, options);\n          var _iteratorNormalCompletion14 = true;\n          var _didIteratorError14 = false;\n          var _iteratorError14 = undefined;\n          try {\n            for (var _iterator14 = this.blocks[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n              var block = _step14.value;\n              block.options = _extend({}, block.options, options);\n            }\n          } catch (err) {\n            _didIteratorError14 = true;\n            _iteratorError14 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion14 && _iterator14.return) {\n                _iterator14.return();\n              }\n            } finally {\n              if (_didIteratorError14) {\n                throw _iteratorError14;\n              }\n            }\n          }\n        }\n\n        // Get the final fully constructed query param obj.\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var _this33 = this;\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          options = _extend({}, this.options, options);\n          var blockResults = this.blocks.map(function (b) {\n            return b._toParamString({\n              buildParameterized: options.buildParameterized,\n              queryBuilder: _this33\n            });\n          });\n          var blockTexts = blockResults.map(function (b) {\n            return b.text;\n          });\n          var blockValues = blockResults.map(function (b) {\n            return b.values;\n          });\n          var totalStr = blockTexts.filter(function (v) {\n            return 0 < v.length;\n          }).join(options.separator);\n          var totalValues = [];\n          blockValues.forEach(function (block) {\n            return block.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          });\n          if (!options.nested) {\n            if (options.numberedParameters) {\n              var i = undefined !== options.numberedParametersStartAt ? options.numberedParametersStartAt : 1;\n\n              // construct regex for searching\n              var regex = options.parameterCharacter.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n              totalStr = totalStr.replace(new RegExp(regex, 'g'), function () {\n                return '' + options.numberedParametersPrefix + i++;\n              });\n            }\n          }\n          return {\n            text: this._applyNestingFormatting(totalStr, !!options.nested),\n            values: totalValues\n          };\n        }\n\n        // Deep clone\n      }, {\n        key: 'clone',\n        value: function clone() {\n          var blockClones = this.blocks.map(function (v) {\n            return v.clone();\n          });\n          return new this.constructor(this.options, blockClones);\n        }\n\n        // Get a specific block\n      }, {\n        key: 'getBlock',\n        value: function getBlock(blockType) {\n          var filtered = this.blocks.filter(function (b) {\n            return b instanceof blockType;\n          });\n          return filtered[0];\n        }\n      }]);\n      return _class29;\n    }(cls.BaseBuilder);\n\n    // SELECT query builder.\n    cls.Select = function (_cls$QueryBuilder) {\n      _inherits(_class30, _cls$QueryBuilder);\n      function _class30(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class30);\n        blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n        return _possibleConstructorReturn(this, (_class30.__proto__ || Object.getPrototypeOf(_class30)).call(this, options, blocks));\n      }\n      return _class30;\n    }(cls.QueryBuilder);\n\n    // UPDATE query builder.\n    cls.Update = function (_cls$QueryBuilder2) {\n      _inherits(_class31, _cls$QueryBuilder2);\n      function _class31(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class31);\n        blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n        return _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this, options, blocks));\n      }\n      return _class31;\n    }(cls.QueryBuilder);\n\n    // DELETE query builder.\n    cls.Delete = function (_cls$QueryBuilder3) {\n      _inherits(_class32, _cls$QueryBuilder3);\n      function _class32(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class32);\n        blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n          singleTable: true\n        })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n        return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).call(this, options, blocks));\n      }\n      return _class32;\n    }(cls.QueryBuilder);\n\n    // An INSERT query builder.\n    cls.Insert = function (_cls$QueryBuilder4) {\n      _inherits(_class33, _cls$QueryBuilder4);\n      function _class33(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class33);\n        blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n        return _possibleConstructorReturn(this, (_class33.__proto__ || Object.getPrototypeOf(_class33)).call(this, options, blocks));\n      }\n      return _class33;\n    }(cls.QueryBuilder);\n    var _squel = {\n      VERSION: '5.13.0',\n      flavour: flavour,\n      expr: function expr(options) {\n        return new cls.Expression(options);\n      },\n      case: function _case(name, options) {\n        return new cls.Case(name, options);\n      },\n      select: function select(options, blocks) {\n        return new cls.Select(options, blocks);\n      },\n      update: function update(options, blocks) {\n        return new cls.Update(options, blocks);\n      },\n      insert: function insert(options, blocks) {\n        return new cls.Insert(options, blocks);\n      },\n      delete: function _delete(options, blocks) {\n        return new cls.Delete(options, blocks);\n      },\n      str: function str() {\n        var inst = new cls.FunctionBlock();\n        inst.function.apply(inst, arguments);\n        return inst;\n      },\n      rstr: function rstr() {\n        var inst = new cls.FunctionBlock({\n          rawNesting: true\n        });\n        inst.function.apply(inst, arguments);\n        return inst;\n      },\n      registerValueHandler: cls.registerValueHandler\n    };\n\n    // aliases\n    _squel.remove = _squel.delete;\n\n    // classes\n    _squel.cls = cls;\n    return _squel;\n  }\n\n  /**\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Exported instance (and for use by flavour definitions further down).\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  var squel = _buildSquel();\n\n  /**\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Squel SQL flavours\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  // Available flavours\n  squel.flavours = {};\n\n  // Setup Squel for a particular SQL flavour\n  squel.useFlavour = function () {\n    var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (!flavour) {\n      return squel;\n    }\n    if (squel.flavours[flavour] instanceof Function) {\n      var s = _buildSquel(flavour);\n      squel.flavours[flavour].call(null, s);\n\n      // add in flavour methods\n      s.flavours = squel.flavours;\n      s.useFlavour = squel.useFlavour;\n      return s;\n    } else {\n      throw new Error('Flavour not available: ' + flavour);\n    }\n  };\n  squel.flavours['mssql'] = function (_squel) {\n    var cls = _squel.cls;\n    cls.DefaultQueryBuilderOptions.replaceSingleQuotes = true;\n    cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n    cls.DefaultQueryBuilderOptions.numberedParametersPrefix = '@';\n    _squel.registerValueHandler(Date, function (date) {\n      return '\\'' + date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate() + ' ' + date.getUTCHours() + ':' + date.getUTCMinutes() + ':' + date.getUTCSeconds() + '\\'';\n    });\n\n    //�LIMIT,  OFFSET x and TOP x\n    cls.MssqlLimitOffsetTopBlock = function (_cls$Block14) {\n      _inherits(_class34, _cls$Block14);\n      function _class34(options) {\n        _classCallCheck(this, _class34);\n        var _this38 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this, options));\n        _this38._limits = null;\n        _this38._offsets = null;\n\n        // This is setup as one block to return many as they all have to use each others data at different times\n        // The build String of EITHER LIMIT OR TOP should execute, never both.\n\n        /**\n        # Set the LIMIT/TOP transformation.\n        #\n        # Call this will override the previously set limit for this query. Also note that Passing 0 for 'max' will remove\n        # the limit.\n        */\n        var _limit = function _limit(max) {\n          max = this._sanitizeLimitOffset(max);\n          this._parent._limits = max;\n        };\n        _this38.ParentBlock = function (_cls$Block15) {\n          _inherits(_class35, _cls$Block15);\n          function _class35(parent) {\n            _classCallCheck(this, _class35);\n            var _this39 = _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).call(this, parent.options));\n            _this39._parent = parent;\n            return _this39;\n          }\n          return _class35;\n        }(cls.Block);\n        _this38.LimitBlock = function (_this38$ParentBlock) {\n          _inherits(_class36, _this38$ParentBlock);\n          function _class36(parent) {\n            _classCallCheck(this, _class36);\n            var _this40 = _possibleConstructorReturn(this, (_class36.__proto__ || Object.getPrototypeOf(_class36)).call(this, parent));\n            _this40.limit = _limit;\n            return _this40;\n          }\n          _createClass(_class36, [{\n            key: '_toParamString',\n            value: function _toParamString() {\n              var str = \"\";\n              if (this._parent._limits && this._parent._offsets) {\n                str = 'FETCH NEXT ' + this._parent._limits + ' ROWS ONLY';\n              }\n              return {\n                text: str,\n                values: []\n              };\n            }\n          }]);\n          return _class36;\n        }(_this38.ParentBlock);\n        _this38.TopBlock = function (_this38$ParentBlock2) {\n          _inherits(_class37, _this38$ParentBlock2);\n          function _class37(parent) {\n            _classCallCheck(this, _class37);\n            var _this41 = _possibleConstructorReturn(this, (_class37.__proto__ || Object.getPrototypeOf(_class37)).call(this, parent));\n            _this41.top = _limit;\n            return _this41;\n          }\n          _createClass(_class37, [{\n            key: '_toParamString',\n            value: function _toParamString() {\n              var str = \"\";\n              if (this._parent._limits && !this._parent._offsets) {\n                str = 'TOP (' + this._parent._limits + ')';\n              }\n              return {\n                text: str,\n                values: []\n              };\n            }\n          }]);\n          return _class37;\n        }(_this38.ParentBlock);\n        _this38.OffsetBlock = function (_this38$ParentBlock3) {\n          _inherits(_class38, _this38$ParentBlock3);\n          function _class38() {\n            _classCallCheck(this, _class38);\n            return _possibleConstructorReturn(this, (_class38.__proto__ || Object.getPrototypeOf(_class38)).apply(this, arguments));\n          }\n          _createClass(_class38, [{\n            key: 'offset',\n            value: function offset(start) {\n              this._parent._offsets = this._sanitizeLimitOffset(start);\n            }\n          }, {\n            key: '_toParamString',\n            value: function _toParamString() {\n              var str = \"\";\n              if (this._parent._offsets) {\n                str = 'OFFSET ' + this._parent._offsets + ' ROWS';\n              }\n              return {\n                text: str,\n                values: []\n              };\n            }\n          }]);\n          return _class38;\n        }(_this38.ParentBlock);\n        return _this38;\n      }\n      _createClass(_class34, [{\n        key: 'LIMIT',\n        value: function LIMIT() {\n          return new this.LimitBlock(this);\n        }\n      }, {\n        key: 'TOP',\n        value: function TOP() {\n          return new this.TopBlock(this);\n        }\n      }, {\n        key: 'OFFSET',\n        value: function OFFSET() {\n          return new this.OffsetBlock(this);\n        }\n      }]);\n      return _class34;\n    }(cls.Block);\n    cls.MssqlUpdateTopBlock = function (_cls$Block16) {\n      _inherits(_class39, _cls$Block16);\n      function _class39(options) {\n        _classCallCheck(this, _class39);\n        var _this43 = _possibleConstructorReturn(this, (_class39.__proto__ || Object.getPrototypeOf(_class39)).call(this, options));\n        _this43._limits = null;\n        _this43.limit = _this43.top = function (max) {\n          _this43._limits = _this43._sanitizeLimitOffset(max);\n        };\n        return _this43;\n      }\n      _createClass(_class39, [{\n        key: '_toParamString',\n        value: function _toParamString() {\n          return {\n            text: this._limits ? 'TOP (' + this._limits + ')' : \"\",\n            values: []\n          };\n        }\n      }]);\n      return _class39;\n    }(cls.Block);\n    cls.MssqlInsertFieldValueBlock = function (_cls$InsertFieldValue) {\n      _inherits(_class40, _cls$InsertFieldValue);\n      function _class40(options) {\n        _classCallCheck(this, _class40);\n        var _this44 = _possibleConstructorReturn(this, (_class40.__proto__ || Object.getPrototypeOf(_class40)).call(this, options));\n        _this44._outputs = [];\n        return _this44;\n      }\n\n      // add fields to the output clause\n\n      _createClass(_class40, [{\n        key: 'output',\n        value: function output(fields) {\n          var _this45 = this;\n          if ('string' === typeof fields) {\n            this._outputs.push('INSERTED.' + this._sanitizeField(fields));\n          } else {\n            fields.forEach(function (f) {\n              _this45._outputs.push('INSERTED.' + _this45._sanitizeField(f));\n            });\n          }\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString(options) {\n          var ret = _get(_class40.prototype.__proto__ || Object.getPrototypeOf(_class40.prototype), '_toParamString', this).call(this, options);\n          if (ret.text.length && 0 < this._outputs.length) {\n            var innerStr = 'OUTPUT ' + this._outputs.join(', ') + ' ';\n            var valuesPos = ret.text.indexOf('VALUES');\n            ret.text = ret.text.substr(0, valuesPos) + innerStr + ret.text.substr(valuesPos);\n          }\n          return ret;\n        }\n      }]);\n      return _class40;\n    }(cls.InsertFieldValueBlock);\n    cls.MssqlUpdateDeleteOutputBlock = function (_cls$Block17) {\n      _inherits(_class41, _cls$Block17);\n      function _class41(options) {\n        _classCallCheck(this, _class41);\n        var _this46 = _possibleConstructorReturn(this, (_class41.__proto__ || Object.getPrototypeOf(_class41)).call(this, options));\n        _this46._outputs = [];\n        return _this46;\n      }\n\n      /**\n      # Add the given fields to the final result set.\n      #\n      # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n      # as the values. If the value for a key is null then no alias is set for that field.\n      #\n      # Internally this method simply calls the field() method of this block to add each individual field.\n      */\n\n      _createClass(_class41, [{\n        key: 'outputs',\n        value: function outputs(_outputs) {\n          for (var output in _outputs) {\n            this.output(output, _outputs[output]);\n          }\n        }\n\n        /**\n        # Add the given field to the final result set.\n        #\n        # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n        # e.g. DATE_FORMAT(a.started, \"%H\")\n        #\n        # An alias may also be specified for this field.\n        */\n      }, {\n        key: 'output',\n        value: function output(_output) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          _output = this._sanitizeField(_output);\n          alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n          this._outputs.push({\n            name: this.options.forDelete ? 'DELETED.' + _output : 'INSERTED.' + _output,\n            alias: alias\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString(queryBuilder) {\n          var totalStr = \"\";\n          if (this._outputs.length) {\n            var _iteratorNormalCompletion15 = true;\n            var _didIteratorError15 = false;\n            var _iteratorError15 = undefined;\n            try {\n              for (var _iterator15 = this._outputs[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n                var output = _step15.value;\n                totalStr = _pad(totalStr, \", \");\n                totalStr += output.name;\n                if (output.alias) {\n                  totalStr += ' AS ' + this._formatFieldAlias(output.alias);\n                }\n              }\n            } catch (err) {\n              _didIteratorError15 = true;\n              _iteratorError15 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                  _iterator15.return();\n                }\n              } finally {\n                if (_didIteratorError15) {\n                  throw _iteratorError15;\n                }\n              }\n            }\n            totalStr = 'OUTPUT ' + totalStr;\n          }\n          return {\n            text: totalStr,\n            values: []\n          };\n        }\n      }]);\n      return _class41;\n    }(cls.Block);\n\n    // SELECT query builder.\n    cls.Select = function (_cls$QueryBuilder5) {\n      _inherits(_class42, _cls$QueryBuilder5);\n      function _class42(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class42);\n        var limitOffsetTopBlock = new cls.MssqlLimitOffsetTopBlock(options);\n        blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.DistinctBlock(options), limitOffsetTopBlock.TOP(), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.OrderByBlock(options), limitOffsetTopBlock.OFFSET(), limitOffsetTopBlock.LIMIT(), new cls.UnionBlock(options)];\n        return _possibleConstructorReturn(this, (_class42.__proto__ || Object.getPrototypeOf(_class42)).call(this, options, blocks));\n      }\n      return _class42;\n    }(cls.QueryBuilder);\n\n    // Order By in update requires subquery\n\n    // UPDATE query builder.\n    cls.Update = function (_cls$QueryBuilder6) {\n      _inherits(_class43, _cls$QueryBuilder6);\n      function _class43(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class43);\n        blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.MssqlUpdateTopBlock(options), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.MssqlUpdateDeleteOutputBlock(options), new cls.WhereBlock(options)];\n        return _possibleConstructorReturn(this, (_class43.__proto__ || Object.getPrototypeOf(_class43)).call(this, options, blocks));\n      }\n      return _class43;\n    }(cls.QueryBuilder);\n\n    // Order By and Limit/Top in delete requires subquery\n\n    // DELETE query builder.\n    cls.Delete = function (_cls$QueryBuilder7) {\n      _inherits(_class44, _cls$QueryBuilder7);\n      function _class44(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class44);\n        blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n          singleTable: true\n        })), new cls.JoinBlock(options), new cls.MssqlUpdateDeleteOutputBlock(_extend({}, options, {\n          forDelete: true\n        })), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n        return _possibleConstructorReturn(this, (_class44.__proto__ || Object.getPrototypeOf(_class44)).call(this, options, blocks));\n      }\n      return _class44;\n    }(cls.QueryBuilder);\n\n    // An INSERT query builder.\n    cls.Insert = function (_cls$QueryBuilder8) {\n      _inherits(_class45, _cls$QueryBuilder8);\n      function _class45(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class45);\n        blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.MssqlInsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n        return _possibleConstructorReturn(this, (_class45.__proto__ || Object.getPrototypeOf(_class45)).call(this, options, blocks));\n      }\n      return _class45;\n    }(cls.QueryBuilder);\n  };\n\n  // This file contains additional Squel commands for use with MySQL\n\n  squel.flavours['mysql'] = function (_squel) {\n    var cls = _squel.cls;\n\n    // ON DUPLICATE KEY UPDATE ...\n    cls.MysqlOnDuplicateKeyUpdateBlock = function (_cls$AbstractSetField3) {\n      _inherits(_class46, _cls$AbstractSetField3);\n      function _class46() {\n        _classCallCheck(this, _class46);\n        return _possibleConstructorReturn(this, (_class46.__proto__ || Object.getPrototypeOf(_class46)).apply(this, arguments));\n      }\n      _createClass(_class46, [{\n        key: 'onDupUpdate',\n        value: function onDupUpdate(field, value, options) {\n          this._set(field, value, options);\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = \"\",\n            totalValues = [];\n          for (var i = 0; i < this._fields.length; ++i) {\n            totalStr = _pad(totalStr, ', ');\n            var field = this._fields[i];\n            var value = this._values[0][i];\n            var valueOptions = this._valueOptions[0][i];\n\n            // e.g. if field is an expression such as: count = count + 1\n            if (typeof value === 'undefined') {\n              totalStr += field;\n            } else {\n              var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n                buildParameterized: options.buildParameterized,\n                formattingOptions: valueOptions\n              });\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          }\n          return {\n            text: !totalStr.length ? \"\" : 'ON DUPLICATE KEY UPDATE ' + totalStr,\n            values: totalValues\n          };\n        }\n      }]);\n      return _class46;\n    }(cls.AbstractSetFieldBlock);\n\n    // INSERT query builder.\n    cls.Insert = function (_cls$QueryBuilder9) {\n      _inherits(_class47, _cls$QueryBuilder9);\n      function _class47(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class47);\n        blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.MysqlOnDuplicateKeyUpdateBlock(options)];\n        return _possibleConstructorReturn(this, (_class47.__proto__ || Object.getPrototypeOf(_class47)).call(this, options, blocks));\n      }\n      return _class47;\n    }(cls.QueryBuilder);\n\n    // REPLACE query builder.\n    cls.Replace = function (_cls$QueryBuilder10) {\n      _inherits(_class48, _cls$QueryBuilder10);\n      function _class48(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class48);\n        blocks = blocks || [new cls.StringBlock(options, 'REPLACE'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n        return _possibleConstructorReturn(this, (_class48.__proto__ || Object.getPrototypeOf(_class48)).call(this, options, blocks));\n      }\n      return _class48;\n    }(cls.QueryBuilder);\n    _squel.replace = function (options, blocks) {\n      return new cls.Replace(options, blocks);\n    };\n  };\n\n  // This file contains additional Squel commands for use with the Postgres DB engine\n  squel.flavours['postgres'] = function (_squel) {\n    var cls = _squel.cls;\n    cls.DefaultQueryBuilderOptions.numberedParameters = true;\n    cls.DefaultQueryBuilderOptions.numberedParametersStartAt = 1;\n    cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n    cls.DefaultQueryBuilderOptions.useAsForTableAliasNames = true;\n    cls.PostgresOnConflictKeyUpdateBlock = function (_cls$AbstractSetField4) {\n      _inherits(_class49, _cls$AbstractSetField4);\n      function _class49() {\n        _classCallCheck(this, _class49);\n        return _possibleConstructorReturn(this, (_class49.__proto__ || Object.getPrototypeOf(_class49)).apply(this, arguments));\n      }\n      _createClass(_class49, [{\n        key: 'onConflict',\n        value: function onConflict(conflictFields, fields) {\n          var _this55 = this;\n          this._onConflict = true;\n          if (!conflictFields) {\n            return;\n          }\n          if (!_isArray(conflictFields)) {\n            conflictFields = [conflictFields];\n          }\n          this._dupFields = conflictFields.map(this._sanitizeField.bind(this));\n          if (fields) {\n            Object.keys(fields).forEach(function (key) {\n              _this55._set(key, fields[key]);\n            });\n          }\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var totalStr = \"\",\n            totalValues = [];\n          for (var i = 0; i < this._fields.length; ++i) {\n            totalStr = _pad(totalStr, ', ');\n            var field = this._fields[i];\n            var value = this._values[0][i];\n            var valueOptions = this._valueOptions[0][i];\n\n            // e.g. if field is an expression such as: count = count + 1\n            if (typeof value === 'undefined') {\n              totalStr += field;\n            } else {\n              var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n                buildParameterized: options.buildParameterized,\n                formattingOptions: valueOptions\n              });\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          }\n          var returned = {\n            text: '',\n            values: totalValues\n          };\n          if (this._onConflict) {\n            // note the trailing whitespace after the join\n            var conflictFields = this._dupFields ? '(' + this._dupFields.join(', ') + ') ' : '';\n            var action = totalStr.length ? 'UPDATE SET ' + totalStr : 'NOTHING';\n            returned.text = 'ON CONFLICT ' + conflictFields + 'DO ' + action;\n          }\n          return returned;\n        }\n      }]);\n      return _class49;\n    }(cls.AbstractSetFieldBlock);\n\n    // RETURNING\n    cls.ReturningBlock = function (_cls$Block18) {\n      _inherits(_class50, _cls$Block18);\n      function _class50(options) {\n        _classCallCheck(this, _class50);\n        var _this56 = _possibleConstructorReturn(this, (_class50.__proto__ || Object.getPrototypeOf(_class50)).call(this, options));\n        _this56._fields = [];\n        return _this56;\n      }\n      _createClass(_class50, [{\n        key: 'returning',\n        value: function returning(field) {\n          var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n          alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n          field = this._sanitizeField(field);\n\n          // if field-alias combo already present then don't add\n          var existingField = this._fields.filter(function (f) {\n            return f.name === field && f.alias === alias;\n          });\n          if (existingField.length) {\n            return this;\n          }\n          this._fields.push({\n            name: field,\n            alias: alias,\n            options: options\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n          var totalStr = '',\n            totalValues = [];\n          var _iteratorNormalCompletion16 = true;\n          var _didIteratorError16 = false;\n          var _iteratorError16 = undefined;\n          try {\n            for (var _iterator16 = this._fields[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n              var field = _step16.value;\n              totalStr = _pad(totalStr, \", \");\n              var name = field.name,\n                alias = field.alias,\n                _options2 = field.options;\n              if (typeof name === 'string') {\n                totalStr += this._formatFieldName(name, _options2);\n              } else {\n                var ret = name._toParamString({\n                  nested: true,\n                  buildParameterized: buildParameterized\n                });\n                totalStr += ret.text;\n                ret.values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              }\n              if (alias) {\n                totalStr += ' AS ' + this._formatFieldAlias(alias);\n              }\n            }\n          } catch (err) {\n            _didIteratorError16 = true;\n            _iteratorError16 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion16 && _iterator16.return) {\n                _iterator16.return();\n              }\n            } finally {\n              if (_didIteratorError16) {\n                throw _iteratorError16;\n              }\n            }\n          }\n          return {\n            text: totalStr.length > 0 ? 'RETURNING ' + totalStr : '',\n            values: totalValues\n          };\n        }\n      }]);\n      return _class50;\n    }(cls.Block);\n\n    // WITH\n    cls.WithBlock = function (_cls$Block19) {\n      _inherits(_class51, _cls$Block19);\n      function _class51(options) {\n        _classCallCheck(this, _class51);\n        var _this57 = _possibleConstructorReturn(this, (_class51.__proto__ || Object.getPrototypeOf(_class51)).call(this, options));\n        _this57._tables = [];\n        return _this57;\n      }\n      _createClass(_class51, [{\n        key: 'with',\n        value: function _with(alias, table) {\n          this._tables.push({\n            alias: alias,\n            table: table\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          var parts = [];\n          var values = [];\n          var _iteratorNormalCompletion17 = true;\n          var _didIteratorError17 = false;\n          var _iteratorError17 = undefined;\n          try {\n            for (var _iterator17 = this._tables[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n              var _ref8 = _step17.value;\n              var alias = _ref8.alias;\n              var table = _ref8.table;\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n              parts.push(alias + ' AS ' + ret.text);\n              ret.values.forEach(function (value) {\n                return values.push(value);\n              });\n            }\n          } catch (err) {\n            _didIteratorError17 = true;\n            _iteratorError17 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion17 && _iterator17.return) {\n                _iterator17.return();\n              }\n            } finally {\n              if (_didIteratorError17) {\n                throw _iteratorError17;\n              }\n            }\n          }\n          return {\n            text: parts.length ? 'WITH ' + parts.join(', ') : '',\n            values: values\n          };\n        }\n      }]);\n      return _class51;\n    }(cls.Block);\n\n    // DISTINCT [ON]\n    cls.DistinctOnBlock = function (_cls$Block20) {\n      _inherits(_class52, _cls$Block20);\n      function _class52(options) {\n        _classCallCheck(this, _class52);\n        var _this58 = _possibleConstructorReturn(this, (_class52.__proto__ || Object.getPrototypeOf(_class52)).call(this, options));\n        _this58._distinctFields = [];\n        return _this58;\n      }\n      _createClass(_class52, [{\n        key: 'distinct',\n        value: function distinct() {\n          var _this59 = this;\n          this._useDistinct = true;\n\n          // Add all fields to the DISTINCT ON clause.\n\n          for (var _len11 = arguments.length, fields = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n            fields[_key11] = arguments[_key11];\n          }\n          fields.forEach(function (field) {\n            _this59._distinctFields.push(_this59._sanitizeField(field));\n          });\n        }\n      }, {\n        key: '_toParamString',\n        value: function _toParamString() {\n          var text = '';\n          if (this._useDistinct) {\n            text = 'DISTINCT';\n            if (this._distinctFields.length) {\n              text += ' ON (' + this._distinctFields.join(', ') + ')';\n            }\n          }\n          return {\n            text: text,\n            values: []\n          };\n        }\n      }]);\n      return _class52;\n    }(cls.Block);\n\n    // SELECT query builder.\n    cls.Select = function (_cls$QueryBuilder11) {\n      _inherits(_class53, _cls$QueryBuilder11);\n      function _class53(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class53);\n        blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctOnBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n        return _possibleConstructorReturn(this, (_class53.__proto__ || Object.getPrototypeOf(_class53)).call(this, options, blocks));\n      }\n      return _class53;\n    }(cls.QueryBuilder);\n\n    // INSERT query builder\n    cls.Insert = function (_cls$QueryBuilder12) {\n      _inherits(_class54, _cls$QueryBuilder12);\n      function _class54(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class54);\n        blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.PostgresOnConflictKeyUpdateBlock(options), new cls.ReturningBlock(options)];\n        return _possibleConstructorReturn(this, (_class54.__proto__ || Object.getPrototypeOf(_class54)).call(this, options, blocks));\n      }\n      return _class54;\n    }(cls.QueryBuilder);\n\n    // UPDATE query builder\n    cls.Update = function (_cls$QueryBuilder13) {\n      _inherits(_class55, _cls$QueryBuilder13);\n      function _class55(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class55);\n        blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.FromTableBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n        return _possibleConstructorReturn(this, (_class55.__proto__ || Object.getPrototypeOf(_class55)).call(this, options, blocks));\n      }\n      return _class55;\n    }(cls.QueryBuilder);\n\n    // DELETE query builder\n    cls.Delete = function (_cls$QueryBuilder14) {\n      _inherits(_class56, _cls$QueryBuilder14);\n      function _class56(options) {\n        var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        _classCallCheck(this, _class56);\n        blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n          singleTable: true\n        })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n        return _possibleConstructorReturn(this, (_class56.__proto__ || Object.getPrototypeOf(_class56)).call(this, options, blocks));\n      }\n      return _class56;\n    }(cls.QueryBuilder);\n  };\n  return squel;\n});","map":{"version":3,"names":["root","factory","define","amd","exports","module","squel","_get","get","object","property","receiver","Function","prototype","desc","Object","getOwnPropertyDescriptor","undefined","parent","getPrototypeOf","value","getter","call","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","_typeof","Symbol","iterator","obj","constructor","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","TypeError","create","setPrototypeOf","__proto__","_classCallCheck","instance","_pad","str","pad","_extend","dst","_len","arguments","sources","Array","_key","_loop","src","getOwnPropertyNames","forEach","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","next","done","err","return","_isPlainObject","_isArray","_clone","clone","ret","JSON","parse","stringify","_registerValueHandler","handlers","type","handler","typeofType","Error","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","typeHandler","push","getValueHandler","localHandlers","globalHandlers","_getValueHandler","_buildSquel","flavour","cls","isSquelBuilder","_toParamString","_shouldApplyNesting","options","rawNesting","DefaultQueryBuilderOptions","autoQuoteTableNames","autoQuoteFieldNames","autoQuoteAliasNames","useAsForTableAliasNames","nameQuoteCharacter","tableAliasQuoteCharacter","fieldAliasQuoteCharacter","valueHandlers","parameterCharacter","numberedParameters","numberedParametersPrefix","numberedParametersStartAt","replaceSingleQuotes","singleQuoteReplacement","separator","stringFormatter","globalValueHandlers","registerValueHandler","Cloneable","_class","newInstance","BaseBuilder","_cls$Cloneable","_class2","_this","defaults","p","_sanitizeExpression","expr","_sanitizeName","_sanitizeField","item","_sanitizeBaseBuilder","_sanitizeTable","e","_sanitizeTableAlias","_sanitizeFieldAlias","_sanitizeLimitOffset","parseInt","isNaN","_sanitizeValue","itemType","typeIsValid","_escapeValue","replace","_formatTableName","quoteChar","_formatFieldAlias","_formatTableAlias","_formatFieldName","formattingOptions","ignorePeriodsForFieldNameQuotes","split","map","v","join","_formatCustomValue","asParam","customHandler","formatted","_formatValueForParamArray","_this2","_formatValueForQueryString","initialValue","_this3","_formatCustomValue2","_applyNestingFormatting","typeofValue","toString","dontQuote","escapedValue","nesting","alreadyHasBrackets","charAt","idx","open","c","_buildString","values","nested","buildParameterized","formattedStr","curValue","formattedValues","paramChar","substr","text","tmpStr","val","_buildManyStrings","strings","strValues","totalStr","totalValues","inputString","inputValues","_buildString2","toParam","Expression","_cls$BaseBuilder","_class3","_this4","_nodes","and","_len2","params","_key2","para","or","_len3","_key3","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","node","_ref","Case","_cls$BaseBuilder2","_class4","fieldName","_this5","_fieldName","_cases","_elseValue","when","expression","_len4","_key4","unshift","then","result","_else","elseValue","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","_ref2","_values","Block","_cls$BaseBuilder3","_class5","exposedMethods","prop","StringBlock","_cls$Block","_class6","_this7","_str","FunctionBlock","_cls$Block2","_class7","_this8","_strings","_function","_len5","_key5","AbstractTableBlock","_cls$Block3","_class8","prefix","_this9","_tables","_table","table","alias","singleTable","_hasTable","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_ref3","tableStr","_table$_toParamString","TargetTableBlock","_cls$AbstractTableBlo","_class9","apply","UpdateTableBlock","_cls$AbstractTableBlo2","_class10","_table2","FromTableBlock","_cls$AbstractTableBlo3","_class11","from","IntoTableBlock","_cls$AbstractTableBlo4","_class12","into","GetFieldBlock","_cls$Block4","_class13","_this14","_fields","fields","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_iterator6","_step6","field","_field2","_field","existingField","filter","f","name","queryBuilder","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_iterator7","_step7","_options","fromTableBlock","getBlock","AbstractSetFieldBlock","_cls$Block5","_class14","_this15","_reset","_valueOptions","_set","valueOptions","index","indexOf","_setFields","_setFieldsRows","fieldsRows","fieldRow","SetFieldBlock","_cls$AbstractSetField","_class15","set","setFields","InsertFieldValueBlock","_cls$AbstractSetField2","_class16","setFieldsRows","_this18","fieldString","valueStrings","j","InsertFieldsFromQueryBlock","_cls$Block6","_class17","_this19","_query","fromQuery","selectQuery","_this20","_query$_toParamString","DistinctBlock","_cls$Block7","_class18","distinct","_useDistinct","GroupByBlock","_cls$Block8","_class19","_this22","_groups","group","AbstractVerbSingleValueBlock","_cls$Block9","_class20","_this23","_value","_setValue","verb","OffsetBlock","_cls$AbstractVerbSing","_class21","offset","start","LimitBlock","_cls$AbstractVerbSing2","_class22","limit","_limit2","AbstractConditionBlock","_cls$Block10","_class23","_this26","_conditions","_condition","condition","_len6","_key6","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_iterator8","_step8","_ref4","_values2","WhereBlock","_cls$AbstractConditio","_class24","where","_len7","_key7","concat","HavingBlock","_cls$AbstractConditio2","_class25","having","_len8","_key8","OrderByBlock","_cls$Block11","_class26","_this29","_orders","order","dir","_len9","_key9","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_iterator9","_step9","_ref5","_values3","JoinBlock","_cls$Block12","_class27","_this30","_joins","left_join","right_join","outer_join","left_outer_join","full_join","cross_join","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_iterator10","_step10","_ref6","_ret2","UnionBlock","_cls$Block13","_class28","_this31","_unions","union","union_all","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_iterator11","_step11","_ref7","QueryBuilder","_cls$BaseBuilder4","_class29","blocks","_this32","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_iterator12","_step12","block","methodName","methodBody","body","_len10","args","_key10","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_iterator13","_step13","updateOptions","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_iterator14","_step14","_this33","blockResults","b","blockTexts","blockValues","regex","RegExp","blockClones","blockType","filtered","Select","_cls$QueryBuilder","_class30","Update","_cls$QueryBuilder2","_class31","Delete","_cls$QueryBuilder3","_class32","Insert","_cls$QueryBuilder4","_class33","_squel","VERSION","case","_case","select","update","insert","delete","_delete","inst","function","rstr","remove","flavours","useFlavour","s","Date","date","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","MssqlLimitOffsetTopBlock","_cls$Block14","_class34","_this38","_limits","_offsets","_limit","max","_parent","ParentBlock","_cls$Block15","_class35","_this39","_this38$ParentBlock","_class36","_this40","TopBlock","_this38$ParentBlock2","_class37","_this41","top","_this38$ParentBlock3","_class38","LIMIT","TOP","OFFSET","MssqlUpdateTopBlock","_cls$Block16","_class39","_this43","MssqlInsertFieldValueBlock","_cls$InsertFieldValue","_class40","_this44","_outputs","output","_this45","innerStr","valuesPos","MssqlUpdateDeleteOutputBlock","_cls$Block17","_class41","_this46","outputs","_output","forDelete","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_iterator15","_step15","_cls$QueryBuilder5","_class42","limitOffsetTopBlock","_cls$QueryBuilder6","_class43","_cls$QueryBuilder7","_class44","_cls$QueryBuilder8","_class45","MysqlOnDuplicateKeyUpdateBlock","_cls$AbstractSetField3","_class46","onDupUpdate","_cls$QueryBuilder9","_class47","Replace","_cls$QueryBuilder10","_class48","PostgresOnConflictKeyUpdateBlock","_cls$AbstractSetField4","_class49","onConflict","conflictFields","_this55","_onConflict","_dupFields","bind","keys","returned","action","ReturningBlock","_cls$Block18","_class50","_this56","returning","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_iterator16","_step16","_options2","WithBlock","_cls$Block19","_class51","_this57","_with","parts","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_iterator17","_step17","_ref8","DistinctOnBlock","_cls$Block20","_class52","_this58","_distinctFields","_this59","_len11","_key11","_cls$QueryBuilder11","_class53","_cls$QueryBuilder12","_class54","_cls$QueryBuilder13","_class55","_cls$QueryBuilder14","_class56"],"sources":["C:/ysx/xm/mark/web/node_modules/squel/dist/squel.js"],"sourcesContent":[";(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.squel = factory();\n  }\n}(this, function() {\n'use strict';\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// append to string if non-empty\nfunction _pad(str, pad) {\n  return str.length ? str + pad : str;\n}\n\n// Extend given object's with other objects' properties, overriding existing ones if necessary\nfunction _extend(dst) {\n  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  if (dst && sources) {\n    var _loop = function _loop(src) {\n      if ((typeof src === 'undefined' ? 'undefined' : _typeof(src)) === 'object') {\n        Object.getOwnPropertyNames(src).forEach(function (key) {\n          dst[key] = src[key];\n        });\n      }\n    };\n\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = sources[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var src = _step.value;\n\n        _loop(src);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return dst;\n};\n\n// get whether object is a plain object\nfunction _isPlainObject(obj) {\n  return obj && obj.constructor.prototype === Object.prototype;\n};\n\n// get whether object is an array\nfunction _isArray(obj) {\n  return obj && obj.constructor.prototype === Array.prototype;\n};\n\n// clone given item\nfunction _clone(src) {\n  if (!src) {\n    return src;\n  }\n\n  if (typeof src.clone === 'function') {\n    return src.clone();\n  } else if (_isPlainObject(src) || _isArray(src)) {\n    var ret = new src.constructor();\n\n    Object.getOwnPropertyNames(src).forEach(function (key) {\n      if (typeof src[key] !== 'function') {\n        ret[key] = _clone(src[key]);\n      }\n    });\n\n    return ret;\n  } else {\n    return JSON.parse(JSON.stringify(src));\n  }\n};\n\n/**\n * Register a value type handler\n *\n * Note: this will override any existing handler registered for this value type.\n */\nfunction _registerValueHandler(handlers, type, handler) {\n  var typeofType = typeof type === 'undefined' ? 'undefined' : _typeof(type);\n\n  if (typeofType !== 'function' && typeofType !== 'string') {\n    throw new Error(\"type must be a class constructor or string\");\n  }\n\n  if (typeof handler !== 'function') {\n    throw new Error(\"handler must be a function\");\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = handlers[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var typeHandler = _step2.value;\n\n      if (typeHandler.type === type) {\n        typeHandler.handler = handler;\n\n        return;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  handlers.push({\n    type: type,\n    handler: handler\n  });\n};\n\n/**\n * Get value type handler for given type\n */\nfunction getValueHandler(value, localHandlers, globalHandlers) {\n  return _getValueHandler(value, localHandlers) || _getValueHandler(value, globalHandlers);\n};\n\nfunction _getValueHandler(value, handlers) {\n  for (var i = 0; i < handlers.length; i++) {\n    var typeHandler = handlers[i];\n    // if type is a string then use `typeof` or else use `instanceof`\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === typeHandler.type || typeof typeHandler.type !== 'string' && value instanceof typeHandler.type) {\n      return typeHandler.handler;\n    }\n  }\n};\n\n/**\n * Build base squel classes and methods\n */\nfunction _buildSquel() {\n  var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  var cls = {\n    // Get whether obj is a query builder\n    isSquelBuilder: function isSquelBuilder(obj) {\n      return obj && !!obj._toParamString;\n    }\n  };\n\n  // Get whether nesting should be applied for given item\n  var _shouldApplyNesting = function _shouldApplyNesting(obj) {\n    return !cls.isSquelBuilder(obj) || !obj.options.rawNesting;\n  };\n\n  // default query builder options\n  cls.DefaultQueryBuilderOptions = {\n    // If true then table names will be rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteTableNames: false,\n    // If true then field names will rendered inside quotes. The quote character used is configurable via the nameQuoteCharacter option.\n    autoQuoteFieldNames: false,\n    // If true then alias names will rendered inside quotes. The quote character used is configurable via the `tableAliasQuoteCharacter` and `fieldAliasQuoteCharacter` options.\n    autoQuoteAliasNames: true,\n    // If true then table alias names will rendered after AS keyword.\n    useAsForTableAliasNames: false,\n    // The quote character used for when quoting table and field names\n    nameQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    tableAliasQuoteCharacter: '`',\n    // The quote character used for when quoting table alias names\n    fieldAliasQuoteCharacter: '\"',\n    // Custom value handlers where key is the value type and the value is the handler function\n    valueHandlers: [],\n    // Character used to represent a parameter value\n    parameterCharacter: '?',\n    // Numbered parameters returned from toParam() as $1, $2, etc.\n    numberedParameters: false,\n    // Numbered parameters prefix character(s)\n    numberedParametersPrefix: '$',\n    // Numbered parameters start at this number.\n    numberedParametersStartAt: 1,\n    // If true then replaces all single quotes within strings. The replacement string used is configurable via the `singleQuoteReplacement` option.\n    replaceSingleQuotes: false,\n    // The string to replace single quotes with in query strings\n    singleQuoteReplacement: '\\'\\'',\n    // String used to join individual blocks in a query when it's stringified\n    separator: ' ',\n    // Function for formatting string values prior to insertion into query string\n    stringFormatter: null,\n    // Whether to prevent the addition of brackets () when nesting this query builder's output\n    rawNesting: false\n  };\n\n  // Global custom value handlers for all instances of builder\n  cls.globalValueHandlers = [];\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Custom value types\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n   */\n\n  // Register a new value handler\n  cls.registerValueHandler = function (type, handler) {\n    _registerValueHandler(cls.globalValueHandlers, type, handler);\n  };\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Base classes\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  // Base class for cloneable builders\n  cls.Cloneable = function () {\n    function _class() {\n      _classCallCheck(this, _class);\n    }\n\n    _createClass(_class, [{\n      key: 'clone',\n\n      /**\n       * Clone this builder\n       */\n      value: function clone() {\n        var newInstance = new this.constructor();\n\n        return _extend(newInstance, _clone(_extend({}, this)));\n      }\n    }]);\n\n    return _class;\n  }();\n\n  // Base class for all builders\n  cls.BaseBuilder = function (_cls$Cloneable) {\n    _inherits(_class2, _cls$Cloneable);\n\n    /**\n     * Constructor.\n     * this.param  {Object} options Overriding one or more of `cls.DefaultQueryBuilderOptions`.\n     */\n    function _class2(options) {\n      _classCallCheck(this, _class2);\n\n      var _this = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this));\n\n      var defaults = JSON.parse(JSON.stringify(cls.DefaultQueryBuilderOptions));\n      // for function values, etc we need to manually copy\n      ['stringFormatter'].forEach(function (p) {\n        defaults[p] = cls.DefaultQueryBuilderOptions[p];\n      });\n\n      _this.options = _extend({}, defaults, options);\n      return _this;\n    }\n\n    /**\n     * Register a custom value handler for this builder instance.\n     *\n     * Note: this will override any globally registered handler for this value type.\n     */\n\n\n    _createClass(_class2, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        _registerValueHandler(this.options.valueHandlers, type, handler);\n        return this;\n      }\n\n      /**\n       * Sanitize given expression.\n       */\n\n    }, {\n      key: '_sanitizeExpression',\n      value: function _sanitizeExpression(expr) {\n        // If it's not a base builder instance\n        if (!cls.isSquelBuilder(expr)) {\n          // It must then be a string\n          if (typeof expr !== \"string\") {\n            throw new Error(\"expression must be a string or builder instance\");\n          }\n        }\n\n        return expr;\n      }\n\n      /**\n       * Sanitize the given name.\n       *\n       * The 'type' parameter is used to construct a meaningful error message in case validation fails.\n       */\n\n    }, {\n      key: '_sanitizeName',\n      value: function _sanitizeName(value, type) {\n        if (typeof value !== \"string\") {\n          throw new Error(type + ' must be a string');\n        }\n\n        return value;\n      }\n    }, {\n      key: '_sanitizeField',\n      value: function _sanitizeField(item) {\n        if (!cls.isSquelBuilder(item)) {\n          item = this._sanitizeName(item, \"field name\");\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeBaseBuilder',\n      value: function _sanitizeBaseBuilder(item) {\n        if (cls.isSquelBuilder(item)) {\n          return item;\n        }\n\n        throw new Error(\"must be a builder instance\");\n      }\n    }, {\n      key: '_sanitizeTable',\n      value: function _sanitizeTable(item) {\n        if (typeof item !== \"string\") {\n          try {\n            item = this._sanitizeBaseBuilder(item);\n          } catch (e) {\n            throw new Error(\"table name must be a string or a builder\");\n          }\n        } else {\n          item = this._sanitizeName(item, 'table');\n        }\n\n        return item;\n      }\n    }, {\n      key: '_sanitizeTableAlias',\n      value: function _sanitizeTableAlias(item) {\n        return this._sanitizeName(item, \"table alias\");\n      }\n    }, {\n      key: '_sanitizeFieldAlias',\n      value: function _sanitizeFieldAlias(item) {\n        return this._sanitizeName(item, \"field alias\");\n      }\n\n      // Sanitize the given limit/offset value.\n\n    }, {\n      key: '_sanitizeLimitOffset',\n      value: function _sanitizeLimitOffset(value) {\n        value = parseInt(value);\n\n        if (0 > value || isNaN(value)) {\n          throw new Error(\"limit/offset must be >= 0\");\n        }\n\n        return value;\n      }\n\n      // Santize the given field value\n\n    }, {\n      key: '_sanitizeValue',\n      value: function _sanitizeValue(item) {\n        var itemType = typeof item === 'undefined' ? 'undefined' : _typeof(item);\n\n        if (null === item) {\n          // null is allowed\n        } else if (\"string\" === itemType || \"number\" === itemType || \"boolean\" === itemType) {\n          // primitives are allowed\n        } else if (cls.isSquelBuilder(item)) {\n          // Builders allowed\n        } else {\n          var typeIsValid = !!getValueHandler(item, this.options.valueHandlers, cls.globalValueHandlers);\n\n          if (!typeIsValid) {\n            throw new Error(\"field value must be a string, number, boolean, null or one of the registered custom value types\");\n          }\n        }\n\n        return item;\n      }\n\n      // Escape a string value, e.g. escape quotes and other characters within it.\n\n    }, {\n      key: '_escapeValue',\n      value: function _escapeValue(value) {\n        return this.options.replaceSingleQuotes && value ? value.replace(/\\'/g, this.options.singleQuoteReplacement) : value;\n      }\n    }, {\n      key: '_formatTableName',\n      value: function _formatTableName(item) {\n        if (this.options.autoQuoteTableNames) {\n          var quoteChar = this.options.nameQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatFieldAlias',\n      value: function _formatFieldAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.fieldAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return item;\n      }\n    }, {\n      key: '_formatTableAlias',\n      value: function _formatTableAlias(item) {\n        if (this.options.autoQuoteAliasNames) {\n          var quoteChar = this.options.tableAliasQuoteCharacter;\n\n          item = '' + quoteChar + item + quoteChar;\n        }\n\n        return this.options.useAsForTableAliasNames ? 'AS ' + item : item;\n      }\n    }, {\n      key: '_formatFieldName',\n      value: function _formatFieldName(item) {\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (this.options.autoQuoteFieldNames) {\n          var quoteChar = this.options.nameQuoteCharacter;\n\n          if (formattingOptions.ignorePeriodsForFieldNameQuotes) {\n            // a.b.c -> `a.b.c`\n            item = '' + quoteChar + item + quoteChar;\n          } else {\n            // a.b.c -> `a`.`b`.`c`\n            item = item.split('.').map(function (v) {\n              // treat '*' as special case (#79)\n              return '*' === v ? v : '' + quoteChar + v + quoteChar;\n            }).join('.');\n          }\n        }\n\n        return item;\n      }\n\n      // Format the given custom value\n\n    }, {\n      key: '_formatCustomValue',\n      value: function _formatCustomValue(value, asParam, formattingOptions) {\n        // user defined custom handlers takes precedence\n        var customHandler = getValueHandler(value, this.options.valueHandlers, cls.globalValueHandlers);\n\n        // use the custom handler if available\n        if (customHandler) {\n          value = customHandler(value, asParam, formattingOptions);\n\n          // custom value handler can instruct caller not to process returned value\n          if (value && value.rawNesting) {\n            return {\n              formatted: true,\n              rawNesting: true,\n              value: value.value\n            };\n          }\n        }\n\n        return {\n          formatted: !!customHandler,\n          value: value\n\n        };\n      }\n\n      /**\n       * Format given value for inclusion into parameter values array.\n       */\n\n    }, {\n      key: '_formatValueForParamArray',\n      value: function _formatValueForParamArray(value) {\n        var _this2 = this;\n\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (_isArray(value)) {\n          return value.map(function (v) {\n            return _this2._formatValueForParamArray(v, formattingOptions);\n          });\n        } else {\n          return this._formatCustomValue(value, true, formattingOptions).value;\n        }\n      }\n\n      /**\n       * Format the given field value for inclusion into the query string\n       */\n\n    }, {\n      key: '_formatValueForQueryString',\n      value: function _formatValueForQueryString(initialValue) {\n        var _this3 = this;\n\n        var formattingOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        // maybe we have a cusotm value handler\n        var _formatCustomValue2 = this._formatCustomValue(initialValue, false, formattingOptions),\n            rawNesting = _formatCustomValue2.rawNesting,\n            formatted = _formatCustomValue2.formatted,\n            value = _formatCustomValue2.value;\n\n        // if formatting took place then return it directly\n\n\n        if (formatted) {\n          if (rawNesting) {\n            return value;\n          } else {\n            return this._applyNestingFormatting(value, _shouldApplyNesting(initialValue));\n          }\n        }\n\n        // if it's an array then format each element separately\n        if (_isArray(value)) {\n          value = value.map(function (v) {\n            return _this3._formatValueForQueryString(v);\n          });\n\n          value = this._applyNestingFormatting(value.join(', '), _shouldApplyNesting(value));\n        } else {\n          var typeofValue = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n\n          if (null === value) {\n            value = \"NULL\";\n          } else if (typeofValue === \"boolean\") {\n            value = value ? \"TRUE\" : \"FALSE\";\n          } else if (cls.isSquelBuilder(value)) {\n            value = this._applyNestingFormatting(value.toString(), _shouldApplyNesting(value));\n          } else if (typeofValue !== \"number\") {\n            // if it's a string and we have custom string formatting turned on then use that\n            if ('string' === typeofValue && this.options.stringFormatter) {\n              return this.options.stringFormatter(value);\n            }\n\n            if (formattingOptions.dontQuote) {\n              value = '' + value;\n            } else {\n              var escapedValue = this._escapeValue(value);\n\n              value = '\\'' + escapedValue + '\\'';\n            }\n          }\n        }\n\n        return value;\n      }\n    }, {\n      key: '_applyNestingFormatting',\n      value: function _applyNestingFormatting(str) {\n        var nesting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (str && typeof str === 'string' && nesting && !this.options.rawNesting) {\n          // apply brackets if they're not already existing\n          var alreadyHasBrackets = '(' === str.charAt(0) && ')' === str.charAt(str.length - 1);\n\n          if (alreadyHasBrackets) {\n            // check that it's the form \"((x)..(y))\" rather than \"(x)..(y)\"\n            var idx = 0,\n                open = 1;\n\n            while (str.length - 1 > ++idx) {\n              var c = str.charAt(idx);\n\n              if ('(' === c) {\n                open++;\n              } else if (')' === c) {\n                open--;\n                if (1 > open) {\n                  alreadyHasBrackets = false;\n\n                  break;\n                }\n              }\n            }\n          }\n\n          if (!alreadyHasBrackets) {\n            str = '(' + str + ')';\n          }\n        }\n\n        return str;\n      }\n\n      /**\n       * Build given string and its corresponding parameter values into\n       * output.\n       *\n       * @param {String} str\n       * @param {Array}  values\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @param {Boolean} [options.formattingOptions] Formatting options for values in query string.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildString',\n      value: function _buildString(str, values) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        var nested = options.nested,\n            buildParameterized = options.buildParameterized,\n            formattingOptions = options.formattingOptions;\n\n\n        values = values || [];\n        str = str || '';\n\n        var formattedStr = '',\n            curValue = -1,\n            formattedValues = [];\n\n        var paramChar = this.options.parameterCharacter;\n\n        var idx = 0;\n\n        while (str.length > idx) {\n          // param char?\n          if (str.substr(idx, paramChar.length) === paramChar) {\n            var value = values[++curValue];\n\n            if (buildParameterized) {\n              if (cls.isSquelBuilder(value)) {\n                var ret = value._toParamString({\n                  buildParameterized: buildParameterized,\n                  nested: true\n                });\n\n                formattedStr += ret.text;\n                ret.values.forEach(function (value) {\n                  return formattedValues.push(value);\n                });\n              } else {\n                value = this._formatValueForParamArray(value, formattingOptions);\n\n                if (_isArray(value)) {\n                  // Array(6) -> \"(??, ??, ??, ??, ??, ??)\"\n                  var tmpStr = value.map(function () {\n                    return paramChar;\n                  }).join(', ');\n\n                  formattedStr += '(' + tmpStr + ')';\n\n                  value.forEach(function (val) {\n                    return formattedValues.push(val);\n                  });\n                } else {\n                  formattedStr += paramChar;\n\n                  formattedValues.push(value);\n                }\n              }\n            } else {\n              formattedStr += this._formatValueForQueryString(value, formattingOptions);\n            }\n\n            idx += paramChar.length;\n          } else {\n            formattedStr += str.charAt(idx);\n\n            idx++;\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(formattedStr, !!nested),\n          values: formattedValues\n        };\n      }\n\n      /**\n       * Build all given strings and their corresponding parameter values into\n       * output.\n       *\n       * @param {Array} strings\n       * @param {Array}  strValues array of value arrays corresponding to each string.\n       * @param {Object} [options] Additional options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_buildManyStrings',\n      value: function _buildManyStrings(strings, strValues) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        for (var idx = 0; strings.length > idx; ++idx) {\n          var inputString = strings[idx],\n              inputValues = strValues[idx];\n\n          var _buildString2 = this._buildString(inputString, inputValues, {\n            buildParameterized: options.buildParameterized,\n            nested: false\n          }),\n              text = _buildString2.text,\n              values = _buildString2.values;\n\n          totalStr.push(text);\n          values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        totalStr = totalStr.join(this.options.separator);\n\n        return {\n          text: totalStr.length ? this._applyNestingFormatting(totalStr, !!options.nested) : '',\n          values: totalValues\n        };\n      }\n\n      /**\n       * Get parameterized representation of this instance.\n       *\n       * @param {Object} [options] Options.\n       * @param {Boolean} [options.buildParameterized] Whether to build paramterized string. Default is false.\n       * @param {Boolean} [options.nested] Whether this expression is nested within another.\n       * @return {Object}\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        throw new Error('Not yet implemented');\n      }\n\n      /**\n       * Get the expression string.\n       * @return {String}\n       */\n\n    }, {\n      key: 'toString',\n      value: function toString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._toParamString(options).text;\n      }\n\n      /**\n       * Get the parameterized expression string.\n       * @return {Object}\n       */\n\n    }, {\n      key: 'toParam',\n      value: function toParam() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._toParamString(_extend({}, options, {\n          buildParameterized: true\n        }));\n      }\n    }]);\n\n    return _class2;\n  }(cls.Cloneable);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Expressions\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL expression builder.\n   *\n   * SQL expressions are used in WHERE and ON clauses to filter data by various criteria.\n   *\n   * Expressions can be nested. Nested expression contains can themselves\n   * contain nested expressions. When rendered a nested expression will be\n   * fully contained within brackets.\n   *\n   * All the build methods in this object return the object instance for chained method calling purposes.\n   */\n  cls.Expression = function (_cls$BaseBuilder) {\n    _inherits(_class3, _cls$BaseBuilder);\n\n    // Initialise the expression.\n    function _class3(options) {\n      _classCallCheck(this, _class3);\n\n      var _this4 = _possibleConstructorReturn(this, (_class3.__proto__ || Object.getPrototypeOf(_class3)).call(this, options));\n\n      _this4._nodes = [];\n      return _this4;\n    }\n\n    // Combine the current expression with the given expression using the intersection operator (AND).\n\n\n    _createClass(_class3, [{\n      key: 'and',\n      value: function and(expr) {\n        for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          params[_key2 - 1] = arguments[_key2];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'AND',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n\n      // Combine the current expression with the given expression using the union operator (OR).\n\n    }, {\n      key: 'or',\n      value: function or(expr) {\n        for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n          params[_key3 - 1] = arguments[_key3];\n        }\n\n        expr = this._sanitizeExpression(expr);\n\n        this._nodes.push({\n          type: 'OR',\n          expr: expr,\n          para: params\n        });\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = this._nodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var node = _step3.value;\n            var type = node.type,\n                expr = node.expr,\n                para = node.para;\n\n            var _ref = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            }) : this._buildString(expr, para, {\n              buildParameterized: options.buildParameterized\n            }),\n                text = _ref.text,\n                values = _ref.values;\n\n            if (totalStr.length) {\n              totalStr.push(type);\n            }\n\n            totalStr.push(text);\n            values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        totalStr = totalStr.join(' ');\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class3;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # cls.Case\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n   * An SQL CASE expression builder.\n   *\n   * SQL cases are used to select proper values based on specific criteria.\n   */\n  cls.Case = function (_cls$BaseBuilder2) {\n    _inherits(_class4, _cls$BaseBuilder2);\n\n    function _class4(fieldName) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      _classCallCheck(this, _class4);\n\n      var _this5 = _possibleConstructorReturn(this, (_class4.__proto__ || Object.getPrototypeOf(_class4)).call(this, options));\n\n      if (_isPlainObject(fieldName)) {\n        options = fieldName;\n\n        fieldName = null;\n      }\n\n      if (fieldName) {\n        _this5._fieldName = _this5._sanitizeField(fieldName);\n      }\n\n      _this5.options = _extend({}, cls.DefaultQueryBuilderOptions, options);\n\n      _this5._cases = [];\n      _this5._elseValue = null;\n      return _this5;\n    }\n\n    _createClass(_class4, [{\n      key: 'when',\n      value: function when(expression) {\n        for (var _len4 = arguments.length, values = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n          values[_key4 - 1] = arguments[_key4];\n        }\n\n        this._cases.unshift({\n          expression: expression,\n          values: values || []\n        });\n\n        return this;\n      }\n    }, {\n      key: 'then',\n      value: function then(result) {\n        if (this._cases.length == 0) {\n          throw new Error(\"when() needs to be called first\");\n        }\n\n        this._cases[0].result = result;\n\n        return this;\n      }\n    }, {\n      key: 'else',\n      value: function _else(elseValue) {\n        this._elseValue = elseValue;\n\n        return this;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion4 = true;\n        var _didIteratorError4 = false;\n        var _iteratorError4 = undefined;\n\n        try {\n          for (var _iterator4 = this._cases[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n            var _ref2 = _step4.value;\n            var expression = _ref2.expression;\n            var _values = _ref2.values;\n            var result = _ref2.result;\n\n            totalStr = _pad(totalStr, ' ');\n\n            var ret = this._buildString(expression, _values, {\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            totalStr += 'WHEN ' + ret.text + ' THEN ' + this._formatValueForQueryString(result);\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError4 = true;\n          _iteratorError4 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion4 && _iterator4.return) {\n              _iterator4.return();\n            }\n          } finally {\n            if (_didIteratorError4) {\n              throw _iteratorError4;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr += ' ELSE ' + this._formatValueForQueryString(this._elseValue) + ' END';\n\n          if (this._fieldName) {\n            totalStr = this._fieldName + ' ' + totalStr;\n          }\n\n          totalStr = 'CASE ' + totalStr;\n        } else {\n          totalStr = this._formatValueForQueryString(this._elseValue);\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class4;\n  }(cls.BaseBuilder);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Building blocks\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /*\n  # A building block represents a single build-step within a query building process.\n  #\n  # Query builders consist of one or more building blocks which get run in a particular order. Building blocks can\n  # optionally specify methods to expose through the query builder interface. They can access all the input data for\n  # the query builder and manipulate it as necessary, as well as append to the final query string output.\n  #\n  # If you wish to customize how queries get built or add proprietary query phrases and content then it is recommended\n  # that you do so using one or more custom building blocks.\n  #\n  # Original idea posted in https://github.com/hiddentao/export/issues/10#issuecomment-15016427\n  */\n  cls.Block = function (_cls$BaseBuilder3) {\n    _inherits(_class5, _cls$BaseBuilder3);\n\n    function _class5(options) {\n      _classCallCheck(this, _class5);\n\n      return _possibleConstructorReturn(this, (_class5.__proto__ || Object.getPrototypeOf(_class5)).call(this, options));\n    }\n\n    /**\n    # Get input methods to expose within the query builder.\n    #\n    # By default all methods except the following get returned:\n    #   methods prefixed with _\n    #   constructor and toString()\n    #\n    # @return Object key -> function pairs\n    */\n\n\n    _createClass(_class5, [{\n      key: 'exposedMethods',\n      value: function exposedMethods() {\n        var ret = {};\n\n        var obj = this;\n\n        while (obj) {\n          Object.getOwnPropertyNames(obj).forEach(function (prop) {\n            if ('constructor' !== prop && typeof obj[prop] === \"function\" && prop.charAt(0) !== '_' && !cls.Block.prototype[prop]) {\n              ret[prop] = obj[prop];\n            }\n          });\n\n          obj = Object.getPrototypeOf(obj);\n        };\n\n        return ret;\n      }\n    }]);\n\n    return _class5;\n  }(cls.BaseBuilder);\n\n  // A fixed string which always gets output\n  cls.StringBlock = function (_cls$Block) {\n    _inherits(_class6, _cls$Block);\n\n    function _class6(options, str) {\n      _classCallCheck(this, _class6);\n\n      var _this7 = _possibleConstructorReturn(this, (_class6.__proto__ || Object.getPrototypeOf(_class6)).call(this, options));\n\n      _this7._str = str;\n      return _this7;\n    }\n\n    _createClass(_class6, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return {\n          text: this._str,\n          values: []\n        };\n      }\n    }]);\n\n    return _class6;\n  }(cls.Block);\n\n  // A function string block\n  cls.FunctionBlock = function (_cls$Block2) {\n    _inherits(_class7, _cls$Block2);\n\n    function _class7(options) {\n      _classCallCheck(this, _class7);\n\n      var _this8 = _possibleConstructorReturn(this, (_class7.__proto__ || Object.getPrototypeOf(_class7)).call(this, options));\n\n      _this8._strings = [];\n      _this8._values = [];\n      return _this8;\n    }\n\n    _createClass(_class7, [{\n      key: 'function',\n      value: function _function(str) {\n        this._strings.push(str);\n\n        for (var _len5 = arguments.length, values = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n          values[_key5 - 1] = arguments[_key5];\n        }\n\n        this._values.push(values);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return this._buildManyStrings(this._strings, this._values, options);\n      }\n    }]);\n\n    return _class7;\n  }(cls.Block);\n\n  // value handler for FunctionValueBlock objects\n  cls.registerValueHandler(cls.FunctionBlock, function (value) {\n    var asParam = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    return asParam ? value.toParam() : value.toString();\n  });\n\n  /*\n  # Table specifier base class\n  */\n  cls.AbstractTableBlock = function (_cls$Block3) {\n    _inherits(_class8, _cls$Block3);\n\n    /**\n     * @param {Boolean} [options.singleTable] If true then only allow one table spec.\n     * @param {String} [options.prefix] String prefix for output.\n     */\n    function _class8(options, prefix) {\n      _classCallCheck(this, _class8);\n\n      var _this9 = _possibleConstructorReturn(this, (_class8.__proto__ || Object.getPrototypeOf(_class8)).call(this, options));\n\n      _this9._tables = [];\n      return _this9;\n    }\n\n    /**\n    # Update given table.\n    #\n    # An alias may also be specified for the table.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class8, [{\n      key: '_table',\n      value: function _table(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        table = this._sanitizeTable(table);\n\n        if (this.options.singleTable) {\n          this._tables = [];\n        }\n\n        this._tables.push({\n          table: table,\n          alias: alias\n        });\n      }\n\n      // get whether a table has been set\n\n    }, {\n      key: '_hasTable',\n      value: function _hasTable() {\n        return 0 < this._tables.length;\n      }\n\n      /**\n       * @override\n       */\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._hasTable()) {\n          // retrieve the parameterised queries\n          var _iteratorNormalCompletion5 = true;\n          var _didIteratorError5 = false;\n          var _iteratorError5 = undefined;\n\n          try {\n            for (var _iterator5 = this._tables[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n              var _ref3 = _step5.value;\n              var table = _ref3.table;\n              var alias = _ref3.alias;\n\n              totalStr = _pad(totalStr, ', ');\n\n              var tableStr = void 0;\n\n              if (cls.isSquelBuilder(table)) {\n                var _table$_toParamString = table._toParamString({\n                  buildParameterized: options.buildParameterized,\n                  nested: true\n                }),\n                    text = _table$_toParamString.text,\n                    values = _table$_toParamString.values;\n\n                tableStr = text;\n                values.forEach(function (value) {\n                  return totalValues.push(value);\n                });\n              } else {\n                tableStr = this._formatTableName(table);\n              }\n\n              if (alias) {\n                tableStr += ' ' + this._formatTableAlias(alias);\n              }\n\n              totalStr += tableStr;\n            }\n          } catch (err) {\n            _didIteratorError5 = true;\n            _iteratorError5 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion5 && _iterator5.return) {\n                _iterator5.return();\n              }\n            } finally {\n              if (_didIteratorError5) {\n                throw _iteratorError5;\n              }\n            }\n          }\n\n          if (this.options.prefix) {\n            totalStr = this.options.prefix + ' ' + totalStr;\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class8;\n  }(cls.Block);\n\n  // target table for DELETE queries, DELETE <??> FROM\n  cls.TargetTableBlock = function (_cls$AbstractTableBlo) {\n    _inherits(_class9, _cls$AbstractTableBlo);\n\n    function _class9() {\n      _classCallCheck(this, _class9);\n\n      return _possibleConstructorReturn(this, (_class9.__proto__ || Object.getPrototypeOf(_class9)).apply(this, arguments));\n    }\n\n    _createClass(_class9, [{\n      key: 'target',\n      value: function target(table) {\n        this._table(table);\n      }\n    }]);\n\n    return _class9;\n  }(cls.AbstractTableBlock);\n\n  // Update Table\n  cls.UpdateTableBlock = function (_cls$AbstractTableBlo2) {\n    _inherits(_class10, _cls$AbstractTableBlo2);\n\n    function _class10() {\n      _classCallCheck(this, _class10);\n\n      return _possibleConstructorReturn(this, (_class10.__proto__ || Object.getPrototypeOf(_class10)).apply(this, arguments));\n    }\n\n    _createClass(_class10, [{\n      key: 'table',\n      value: function table(_table2) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this._table(_table2, alias);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._hasTable()) {\n          throw new Error(\"table() needs to be called\");\n        }\n\n        return _get(_class10.prototype.__proto__ || Object.getPrototypeOf(_class10.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class10;\n  }(cls.AbstractTableBlock);\n\n  // FROM table\n  cls.FromTableBlock = function (_cls$AbstractTableBlo3) {\n    _inherits(_class11, _cls$AbstractTableBlo3);\n\n    function _class11(options) {\n      _classCallCheck(this, _class11);\n\n      return _possibleConstructorReturn(this, (_class11.__proto__ || Object.getPrototypeOf(_class11)).call(this, _extend({}, options, {\n        prefix: 'FROM'\n      })));\n    }\n\n    _createClass(_class11, [{\n      key: 'from',\n      value: function from(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        this._table(table, alias);\n      }\n    }]);\n\n    return _class11;\n  }(cls.AbstractTableBlock);\n\n  // INTO table\n  cls.IntoTableBlock = function (_cls$AbstractTableBlo4) {\n    _inherits(_class12, _cls$AbstractTableBlo4);\n\n    function _class12(options) {\n      _classCallCheck(this, _class12);\n\n      return _possibleConstructorReturn(this, (_class12.__proto__ || Object.getPrototypeOf(_class12)).call(this, _extend({}, options, {\n        prefix: 'INTO',\n        singleTable: true\n      })));\n    }\n\n    _createClass(_class12, [{\n      key: 'into',\n      value: function into(table) {\n        this._table(table);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        if (!this._hasTable()) {\n          throw new Error(\"into() needs to be called\");\n        }\n\n        return _get(_class12.prototype.__proto__ || Object.getPrototypeOf(_class12.prototype), '_toParamString', this).call(this, options);\n      }\n    }]);\n\n    return _class12;\n  }(cls.AbstractTableBlock);\n\n  // (SELECT) Get field\n  cls.GetFieldBlock = function (_cls$Block4) {\n    _inherits(_class13, _cls$Block4);\n\n    function _class13(options) {\n      _classCallCheck(this, _class13);\n\n      var _this14 = _possibleConstructorReturn(this, (_class13.__proto__ || Object.getPrototypeOf(_class13)).call(this, options));\n\n      _this14._fields = [];\n      return _this14;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    #\n    # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n    */\n\n\n    _createClass(_class13, [{\n      key: 'fields',\n      value: function fields(_fields) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (_isArray(_fields)) {\n          var _iteratorNormalCompletion6 = true;\n          var _didIteratorError6 = false;\n          var _iteratorError6 = undefined;\n\n          try {\n            for (var _iterator6 = _fields[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n              var field = _step6.value;\n\n              this.field(field, null, options);\n            }\n          } catch (err) {\n            _didIteratorError6 = true;\n            _iteratorError6 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion6 && _iterator6.return) {\n                _iterator6.return();\n              }\n            } finally {\n              if (_didIteratorError6) {\n                throw _iteratorError6;\n              }\n            }\n          }\n        } else {\n          for (var _field2 in _fields) {\n            var alias = _fields[_field2];\n\n            this.field(_field2, alias, options);\n          }\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      #\n      # options.ignorePeriodsForFieldNameQuotes - whether to ignore period (.) when automatically quoting the field name\n      */\n\n    }, {\n      key: 'field',\n      value: function field(_field) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        _field = this._sanitizeField(_field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === _field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: _field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion7 = true;\n        var _didIteratorError7 = false;\n        var _iteratorError7 = undefined;\n\n        try {\n          for (var _iterator7 = this._fields[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {\n            var field = _step7.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name,\n                alias = field.alias,\n                _options = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError7 = true;\n          _iteratorError7 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion7 && _iterator7.return) {\n              _iterator7.return();\n            }\n          } finally {\n            if (_didIteratorError7) {\n              throw _iteratorError7;\n            }\n          }\n        }\n\n        if (!totalStr.length) {\n          // if select query and a table is set then all fields wanted\n          var fromTableBlock = queryBuilder && queryBuilder.getBlock(cls.FromTableBlock);\n          if (fromTableBlock && fromTableBlock._hasTable()) {\n            totalStr = \"*\";\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class13;\n  }(cls.Block);\n\n  // Base class for setting fields to values (used for INSERT and UPDATE queries)\n  cls.AbstractSetFieldBlock = function (_cls$Block5) {\n    _inherits(_class14, _cls$Block5);\n\n    function _class14(options) {\n      _classCallCheck(this, _class14);\n\n      var _this15 = _possibleConstructorReturn(this, (_class14.__proto__ || Object.getPrototypeOf(_class14)).call(this, options));\n\n      _this15._reset();\n      return _this15;\n    }\n\n    _createClass(_class14, [{\n      key: '_reset',\n      value: function _reset() {\n        this._fields = [];\n        this._values = [[]];\n        this._valueOptions = [[]];\n      }\n\n      // Update the given field with the given value.\n      // This will override any previously set value for the given field.\n\n    }, {\n      key: '_set',\n      value: function _set(field, value) {\n        var valueOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (this._values.length > 1) {\n          throw new Error(\"Cannot set multiple rows of fields this way.\");\n        }\n\n        if (typeof value !== 'undefined') {\n          value = this._sanitizeValue(value);\n        }\n\n        field = this._sanitizeField(field);\n\n        // Explicity overwrite existing fields\n        var index = this._fields.indexOf(field);\n\n        // if field not defined before\n        if (-1 === index) {\n          this._fields.push(field);\n          index = this._fields.length - 1;\n        }\n\n        this._values[0][index] = value;\n        this._valueOptions[0][index] = valueOptions;\n      }\n\n      // Insert fields based on the key/value pairs in the given object\n\n    }, {\n      key: '_setFields',\n      value: function _setFields(fields) {\n        var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if ((typeof fields === 'undefined' ? 'undefined' : _typeof(fields)) !== 'object') {\n          throw new Error(\"Expected an object but got \" + (typeof fields === 'undefined' ? 'undefined' : _typeof(fields)));\n        }\n\n        for (var field in fields) {\n          this._set(field, fields[field], valueOptions);\n        }\n      }\n\n      // Insert multiple rows for the given fields. Accepts an array of objects.\n      // This will override all previously set values for every field.\n\n    }, {\n      key: '_setFieldsRows',\n      value: function _setFieldsRows(fieldsRows) {\n        var valueOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        if (!_isArray(fieldsRows)) {\n          throw new Error(\"Expected an array of objects but got \" + (typeof fieldsRows === 'undefined' ? 'undefined' : _typeof(fieldsRows)));\n        }\n\n        // Reset the objects stored fields and values\n        this._reset();\n\n        // for each row\n        for (var i = 0; fieldsRows.length > i; ++i) {\n          var fieldRow = fieldsRows[i];\n\n          // for each field\n          for (var field in fieldRow) {\n            var value = fieldRow[field];\n\n            field = this._sanitizeField(field);\n            value = this._sanitizeValue(value);\n\n            var index = this._fields.indexOf(field);\n\n            if (0 < i && -1 === index) {\n              throw new Error('All fields in subsequent rows must match the fields in the first row');\n            }\n\n            // Add field only if it hasn't been added before\n            if (-1 === index) {\n              this._fields.push(field);\n              index = this._fields.length - 1;\n            }\n\n            // The first value added needs to add the array\n            if (!_isArray(this._values[i])) {\n              this._values[i] = [];\n              this._valueOptions[i] = [];\n            }\n\n            this._values[i][index] = value;\n            this._valueOptions[i][index] = valueOptions;\n          }\n        }\n      }\n    }]);\n\n    return _class14;\n  }(cls.Block);\n\n  // (UPDATE) SET field=value\n  cls.SetFieldBlock = function (_cls$AbstractSetField) {\n    _inherits(_class15, _cls$AbstractSetField);\n\n    function _class15() {\n      _classCallCheck(this, _class15);\n\n      return _possibleConstructorReturn(this, (_class15.__proto__ || Object.getPrototypeOf(_class15)).apply(this, arguments));\n    }\n\n    _createClass(_class15, [{\n      key: 'set',\n      value: function set(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var buildParameterized = options.buildParameterized;\n\n\n        if (0 >= this._fields.length) {\n          throw new Error(\"set() needs to be called\");\n        }\n\n        var totalStr = '',\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._formatFieldName(this._fields[i]);\n          var value = this._values[0][i];\n\n          // e.g. field can be an expression such as `count = count + 1`\n          if (0 > field.indexOf('=')) {\n            field = field + ' = ' + this.options.parameterCharacter;\n          }\n\n          var ret = this._buildString(field, [value], {\n            buildParameterized: buildParameterized,\n            formattingOptions: this._valueOptions[0][i]\n          });\n\n          totalStr += ret.text;\n          ret.values.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        }\n\n        return {\n          text: 'SET ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class15;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... value\n  cls.InsertFieldValueBlock = function (_cls$AbstractSetField2) {\n    _inherits(_class16, _cls$AbstractSetField2);\n\n    function _class16() {\n      _classCallCheck(this, _class16);\n\n      return _possibleConstructorReturn(this, (_class16.__proto__ || Object.getPrototypeOf(_class16)).apply(this, arguments));\n    }\n\n    _createClass(_class16, [{\n      key: 'set',\n      value: function set(field, value) {\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        this._set(field, value, options);\n      }\n    }, {\n      key: 'setFields',\n      value: function setFields(fields, valueOptions) {\n        this._setFields(fields, valueOptions);\n      }\n    }, {\n      key: 'setFieldsRows',\n      value: function setFieldsRows(fieldsRows, valueOptions) {\n        this._setFieldsRows(fieldsRows, valueOptions);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this18 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var buildParameterized = options.buildParameterized;\n\n\n        var fieldString = this._fields.map(function (f) {\n          return _this18._formatFieldName(f);\n        }).join(', ');\n\n        var valueStrings = [],\n            totalValues = [];\n\n        for (var i = 0; i < this._values.length; ++i) {\n          valueStrings[i] = '';\n\n          for (var j = 0; j < this._values[i].length; ++j) {\n            var ret = this._buildString(this.options.parameterCharacter, [this._values[i][j]], {\n              buildParameterized: buildParameterized,\n              formattingOptions: this._valueOptions[i][j]\n            });\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            valueStrings[i] = _pad(valueStrings[i], ', ');\n            valueStrings[i] += ret.text;\n          }\n        }\n\n        return {\n          text: fieldString.length ? '(' + fieldString + ') VALUES (' + valueStrings.join('), (') + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class16;\n  }(cls.AbstractSetFieldBlock);\n\n  // (INSERT INTO) ... field ... (SELECT ... FROM ...)\n  cls.InsertFieldsFromQueryBlock = function (_cls$Block6) {\n    _inherits(_class17, _cls$Block6);\n\n    function _class17(options) {\n      _classCallCheck(this, _class17);\n\n      var _this19 = _possibleConstructorReturn(this, (_class17.__proto__ || Object.getPrototypeOf(_class17)).call(this, options));\n\n      _this19._fields = [];\n      _this19._query = null;\n      return _this19;\n    }\n\n    _createClass(_class17, [{\n      key: 'fromQuery',\n      value: function fromQuery(fields, selectQuery) {\n        var _this20 = this;\n\n        this._fields = fields.map(function (v) {\n          return _this20._sanitizeField(v);\n        });\n\n        this._query = this._sanitizeBaseBuilder(selectQuery);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        if (this._fields.length && this._query) {\n          var _query$_toParamString = this._query._toParamString({\n            buildParameterized: options.buildParameterized,\n            nested: true\n          }),\n              text = _query$_toParamString.text,\n              values = _query$_toParamString.values;\n\n          totalStr = '(' + this._fields.join(', ') + ') ' + this._applyNestingFormatting(text);\n          totalValues = values;\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class17;\n  }(cls.Block);\n\n  // DISTINCT\n  cls.DistinctBlock = function (_cls$Block7) {\n    _inherits(_class18, _cls$Block7);\n\n    function _class18() {\n      _classCallCheck(this, _class18);\n\n      return _possibleConstructorReturn(this, (_class18.__proto__ || Object.getPrototypeOf(_class18)).apply(this, arguments));\n    }\n\n    _createClass(_class18, [{\n      key: 'distinct',\n\n      // Add the DISTINCT keyword to the query.\n      value: function distinct() {\n        this._useDistinct = true;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._useDistinct ? \"DISTINCT\" : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class18;\n  }(cls.Block);\n\n  // GROUP BY\n  cls.GroupByBlock = function (_cls$Block8) {\n    _inherits(_class19, _cls$Block8);\n\n    function _class19(options) {\n      _classCallCheck(this, _class19);\n\n      var _this22 = _possibleConstructorReturn(this, (_class19.__proto__ || Object.getPrototypeOf(_class19)).call(this, options));\n\n      _this22._groups = [];\n      return _this22;\n    }\n\n    // Add a GROUP BY transformation for the given field.\n\n\n    _createClass(_class19, [{\n      key: 'group',\n      value: function group(field) {\n        this._groups.push(this._sanitizeField(field));\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        return {\n          text: this._groups.length ? 'GROUP BY ' + this._groups.join(', ') : '',\n          values: []\n        };\n      }\n    }]);\n\n    return _class19;\n  }(cls.Block);\n\n  cls.AbstractVerbSingleValueBlock = function (_cls$Block9) {\n    _inherits(_class20, _cls$Block9);\n\n    /**\n     * @param options.verb The prefix verb string.\n     */\n    function _class20(options) {\n      _classCallCheck(this, _class20);\n\n      var _this23 = _possibleConstructorReturn(this, (_class20.__proto__ || Object.getPrototypeOf(_class20)).call(this, options));\n\n      _this23._value = null;\n      return _this23;\n    }\n\n    _createClass(_class20, [{\n      key: '_setValue',\n      value: function _setValue(value) {\n        this._value = null !== value ? this._sanitizeLimitOffset(value) : value;\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var expr = null !== this._value ? this.options.verb + ' ' + this.options.parameterCharacter : '';\n\n        var values = null !== this._value ? [this._value] : [];\n\n        return this._buildString(expr, values, options);\n      }\n    }]);\n\n    return _class20;\n  }(cls.Block);\n\n  // OFFSET x\n  cls.OffsetBlock = function (_cls$AbstractVerbSing) {\n    _inherits(_class21, _cls$AbstractVerbSing);\n\n    function _class21(options) {\n      _classCallCheck(this, _class21);\n\n      return _possibleConstructorReturn(this, (_class21.__proto__ || Object.getPrototypeOf(_class21)).call(this, _extend({}, options, {\n        verb: 'OFFSET'\n      })));\n    }\n\n    /**\n    # Set the OFFSET transformation.\n    #\n    # Call this will override the previously set offset for this query. Also note that Passing 0 for 'max' will remove\n    # the offset.\n    */\n\n\n    _createClass(_class21, [{\n      key: 'offset',\n      value: function offset(start) {\n        this._setValue(start);\n      }\n    }]);\n\n    return _class21;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // LIMIT\n  cls.LimitBlock = function (_cls$AbstractVerbSing2) {\n    _inherits(_class22, _cls$AbstractVerbSing2);\n\n    function _class22(options) {\n      _classCallCheck(this, _class22);\n\n      return _possibleConstructorReturn(this, (_class22.__proto__ || Object.getPrototypeOf(_class22)).call(this, _extend({}, options, {\n        verb: 'LIMIT'\n      })));\n    }\n\n    /**\n    # Set the LIMIT transformation.\n    #\n    # Call this will override the previously set limit for this query. Also note that Passing `null` will remove\n    # the limit.\n    */\n\n\n    _createClass(_class22, [{\n      key: 'limit',\n      value: function limit(_limit2) {\n        this._setValue(_limit2);\n      }\n    }]);\n\n    return _class22;\n  }(cls.AbstractVerbSingleValueBlock);\n\n  // Abstract condition base class\n  cls.AbstractConditionBlock = function (_cls$Block10) {\n    _inherits(_class23, _cls$Block10);\n\n    /**\n     * @param {String} options.verb The condition verb.\n     */\n    function _class23(options) {\n      _classCallCheck(this, _class23);\n\n      var _this26 = _possibleConstructorReturn(this, (_class23.__proto__ || Object.getPrototypeOf(_class23)).call(this, options));\n\n      _this26._conditions = [];\n      return _this26;\n    }\n\n    /**\n    # Add a condition.\n    #\n    # When the final query is constructed all the conditions are combined using the intersection (AND) operator.\n    #\n    # Concrete subclasses should provide a method which calls this\n    */\n\n\n    _createClass(_class23, [{\n      key: '_condition',\n      value: function _condition(condition) {\n        condition = this._sanitizeExpression(condition);\n\n        for (var _len6 = arguments.length, values = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n          values[_key6 - 1] = arguments[_key6];\n        }\n\n        this._conditions.push({\n          expr: condition,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = [],\n            totalValues = [];\n\n        var _iteratorNormalCompletion8 = true;\n        var _didIteratorError8 = false;\n        var _iteratorError8 = undefined;\n\n        try {\n          for (var _iterator8 = this._conditions[Symbol.iterator](), _step8; !(_iteratorNormalCompletion8 = (_step8 = _iterator8.next()).done); _iteratorNormalCompletion8 = true) {\n            var _ref4 = _step8.value;\n            var expr = _ref4.expr;\n            var _values2 = _ref4.values;\n\n            var ret = cls.isSquelBuilder(expr) ? expr._toParamString({\n              buildParameterized: options.buildParameterized\n            }) : this._buildString(expr, _values2, {\n              buildParameterized: options.buildParameterized\n            });\n\n            if (ret.text.length) {\n              totalStr.push(ret.text);\n            }\n\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError8 = true;\n          _iteratorError8 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion8 && _iterator8.return) {\n              _iterator8.return();\n            }\n          } finally {\n            if (_didIteratorError8) {\n              throw _iteratorError8;\n            }\n          }\n        }\n\n        if (totalStr.length) {\n          totalStr = totalStr.join(') AND (');\n        }\n\n        return {\n          text: totalStr.length ? this.options.verb + ' (' + totalStr + ')' : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class23;\n  }(cls.Block);\n\n  // WHERE\n  cls.WhereBlock = function (_cls$AbstractConditio) {\n    _inherits(_class24, _cls$AbstractConditio);\n\n    function _class24(options) {\n      _classCallCheck(this, _class24);\n\n      return _possibleConstructorReturn(this, (_class24.__proto__ || Object.getPrototypeOf(_class24)).call(this, _extend({}, options, {\n        verb: 'WHERE'\n      })));\n    }\n\n    _createClass(_class24, [{\n      key: 'where',\n      value: function where(condition) {\n        for (var _len7 = arguments.length, values = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n          values[_key7 - 1] = arguments[_key7];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class24;\n  }(cls.AbstractConditionBlock);\n\n  // HAVING\n  cls.HavingBlock = function (_cls$AbstractConditio2) {\n    _inherits(_class25, _cls$AbstractConditio2);\n\n    function _class25(options) {\n      _classCallCheck(this, _class25);\n\n      return _possibleConstructorReturn(this, (_class25.__proto__ || Object.getPrototypeOf(_class25)).call(this, _extend({}, options, {\n        verb: 'HAVING'\n      })));\n    }\n\n    _createClass(_class25, [{\n      key: 'having',\n      value: function having(condition) {\n        for (var _len8 = arguments.length, values = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n          values[_key8 - 1] = arguments[_key8];\n        }\n\n        this._condition.apply(this, [condition].concat(values));\n      }\n    }]);\n\n    return _class25;\n  }(cls.AbstractConditionBlock);\n\n  // ORDER BY\n  cls.OrderByBlock = function (_cls$Block11) {\n    _inherits(_class26, _cls$Block11);\n\n    function _class26(options) {\n      _classCallCheck(this, _class26);\n\n      var _this29 = _possibleConstructorReturn(this, (_class26.__proto__ || Object.getPrototypeOf(_class26)).call(this, options));\n\n      _this29._orders = [];\n      return _this29;\n    }\n\n    /**\n    # Add an ORDER BY transformation for the given field in the given order.\n    #\n    # To specify descending order pass false for the 'dir' parameter.\n    */\n\n\n    _createClass(_class26, [{\n      key: 'order',\n      value: function order(field, dir) {\n        field = this._sanitizeField(field);\n\n        if (!(typeof dir === 'string')) {\n          if (dir === undefined) {\n            dir = 'ASC'; // Default to asc\n          } else if (dir !== null) {\n            dir = dir ? 'ASC' : 'DESC'; // Convert truthy to asc\n          }\n        }\n\n        for (var _len9 = arguments.length, values = Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n          values[_key9 - 2] = arguments[_key9];\n        }\n\n        this._orders.push({\n          field: field,\n          dir: dir,\n          values: values || []\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion9 = true;\n        var _didIteratorError9 = false;\n        var _iteratorError9 = undefined;\n\n        try {\n          for (var _iterator9 = this._orders[Symbol.iterator](), _step9; !(_iteratorNormalCompletion9 = (_step9 = _iterator9.next()).done); _iteratorNormalCompletion9 = true) {\n            var _ref5 = _step9.value;\n            var field = _ref5.field;\n            var dir = _ref5.dir;\n            var _values3 = _ref5.values;\n\n            totalStr = _pad(totalStr, ', ');\n\n            var ret = this._buildString(field, _values3, {\n              buildParameterized: options.buildParameterized\n            });\n\n            totalStr += ret.text, _isArray(ret.values) && ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n\n            if (dir !== null) {\n              totalStr += ' ' + dir;\n            }\n          }\n        } catch (err) {\n          _didIteratorError9 = true;\n          _iteratorError9 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion9 && _iterator9.return) {\n              _iterator9.return();\n            }\n          } finally {\n            if (_didIteratorError9) {\n              throw _iteratorError9;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length ? 'ORDER BY ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class26;\n  }(cls.Block);\n\n  // JOIN\n  cls.JoinBlock = function (_cls$Block12) {\n    _inherits(_class27, _cls$Block12);\n\n    function _class27(options) {\n      _classCallCheck(this, _class27);\n\n      var _this30 = _possibleConstructorReturn(this, (_class27.__proto__ || Object.getPrototypeOf(_class27)).call(this, options));\n\n      _this30._joins = [];\n      return _this30;\n    }\n\n    /**\n    # Add a JOIN with the given table.\n    #\n    # 'table' is the name of the table to join with.\n    #\n    # 'alias' is an optional alias for the table name.\n    #\n    # 'condition' is an optional condition (containing an SQL expression) for the JOIN.\n    #\n    # 'type' must be either one of INNER, OUTER, LEFT or RIGHT. Default is 'INNER'.\n    #\n    */\n\n\n    _createClass(_class27, [{\n      key: 'join',\n      value: function join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'INNER';\n\n        table = this._sanitizeTable(table, true);\n        alias = alias ? this._sanitizeTableAlias(alias) : alias;\n        condition = condition ? this._sanitizeExpression(condition) : condition;\n\n        this._joins.push({\n          type: type,\n          table: table,\n          alias: alias,\n          condition: condition\n        });\n      }\n    }, {\n      key: 'left_join',\n      value: function left_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'LEFT');\n      }\n    }, {\n      key: 'right_join',\n      value: function right_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'RIGHT');\n      }\n    }, {\n      key: 'outer_join',\n      value: function outer_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'OUTER');\n      }\n    }, {\n      key: 'left_outer_join',\n      value: function left_outer_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'LEFT OUTER');\n      }\n    }, {\n      key: 'full_join',\n      value: function full_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'FULL');\n      }\n    }, {\n      key: 'cross_join',\n      value: function cross_join(table) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var condition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        this.join(table, alias, condition, 'CROSS');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        var _iteratorNormalCompletion10 = true;\n        var _didIteratorError10 = false;\n        var _iteratorError10 = undefined;\n\n        try {\n          for (var _iterator10 = this._joins[Symbol.iterator](), _step10; !(_iteratorNormalCompletion10 = (_step10 = _iterator10.next()).done); _iteratorNormalCompletion10 = true) {\n            var _ref6 = _step10.value;\n            var type = _ref6.type;\n            var table = _ref6.table;\n            var alias = _ref6.alias;\n            var condition = _ref6.condition;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (cls.isSquelBuilder(table)) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n              tableStr = ret.text;\n            } else {\n              tableStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' JOIN ' + tableStr;\n\n            if (alias) {\n              totalStr += ' ' + this._formatTableAlias(alias);\n            }\n\n            if (condition) {\n              totalStr += ' ON ';\n\n              var _ret2 = void 0;\n\n              if (cls.isSquelBuilder(condition)) {\n                _ret2 = condition._toParamString({\n                  buildParameterized: options.buildParameterized\n                });\n              } else {\n                _ret2 = this._buildString(condition, [], {\n                  buildParameterized: options.buildParameterized\n                });\n              }\n\n              totalStr += this._applyNestingFormatting(_ret2.text);\n              _ret2.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n          }\n        } catch (err) {\n          _didIteratorError10 = true;\n          _iteratorError10 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion10 && _iterator10.return) {\n              _iterator10.return();\n            }\n          } finally {\n            if (_didIteratorError10) {\n              throw _iteratorError10;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class27;\n  }(cls.Block);\n\n  // UNION\n  cls.UnionBlock = function (_cls$Block13) {\n    _inherits(_class28, _cls$Block13);\n\n    function _class28(options) {\n      _classCallCheck(this, _class28);\n\n      var _this31 = _possibleConstructorReturn(this, (_class28.__proto__ || Object.getPrototypeOf(_class28)).call(this, options));\n\n      _this31._unions = [];\n      return _this31;\n    }\n\n    /**\n    # Add a UNION with the given table/query.\n    #\n    # 'table' is the name of the table or query to union with.\n    #\n    # 'type' must be either one of UNION or UNION ALL.... Default is 'UNION'.\n    */\n\n\n    _createClass(_class28, [{\n      key: 'union',\n      value: function union(table) {\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'UNION';\n\n        table = this._sanitizeTable(table);\n\n        this._unions.push({\n          type: type,\n          table: table\n        });\n      }\n\n      // Add a UNION ALL with the given table/query.\n\n    }, {\n      key: 'union_all',\n      value: function union_all(table) {\n        this.union(table, 'UNION ALL');\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion11 = true;\n        var _didIteratorError11 = false;\n        var _iteratorError11 = undefined;\n\n        try {\n          for (var _iterator11 = this._unions[Symbol.iterator](), _step11; !(_iteratorNormalCompletion11 = (_step11 = _iterator11.next()).done); _iteratorNormalCompletion11 = true) {\n            var _ref7 = _step11.value;\n            var type = _ref7.type;\n            var table = _ref7.table;\n\n            totalStr = _pad(totalStr, this.options.separator);\n\n            var tableStr = void 0;\n\n            if (table instanceof cls.BaseBuilder) {\n              var ret = table._toParamString({\n                buildParameterized: options.buildParameterized,\n                nested: true\n              });\n\n              tableStr = ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            } else {\n              totalStr = this._formatTableName(table);\n            }\n\n            totalStr += type + ' ' + tableStr;\n          }\n        } catch (err) {\n          _didIteratorError11 = true;\n          _iteratorError11 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion11 && _iterator11.return) {\n              _iterator11.return();\n            }\n          } finally {\n            if (_didIteratorError11) {\n              throw _iteratorError11;\n            }\n          }\n        }\n\n        return {\n          text: totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class28;\n  }(cls.Block);\n\n  /*\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  # Query builders\n  # ---------------------------------------------------------------------------------------------------------\n  # ---------------------------------------------------------------------------------------------------------\n  */\n\n  /**\n  # Query builder base class\n  #\n  # Note that the query builder does not check the final query string for correctness.\n  #\n  # All the build methods in this object return the object instance for chained method calling purposes.\n  */\n  cls.QueryBuilder = function (_cls$BaseBuilder4) {\n    _inherits(_class29, _cls$BaseBuilder4);\n\n    /**\n    # Constructor\n    #\n    # blocks - array of cls.BaseBuilderBlock instances to build the query with.\n    */\n    function _class29(options, blocks) {\n      _classCallCheck(this, _class29);\n\n      var _this32 = _possibleConstructorReturn(this, (_class29.__proto__ || Object.getPrototypeOf(_class29)).call(this, options));\n\n      _this32.blocks = blocks || [];\n\n      // Copy exposed methods into myself\n      var _iteratorNormalCompletion12 = true;\n      var _didIteratorError12 = false;\n      var _iteratorError12 = undefined;\n\n      try {\n        for (var _iterator12 = _this32.blocks[Symbol.iterator](), _step12; !(_iteratorNormalCompletion12 = (_step12 = _iterator12.next()).done); _iteratorNormalCompletion12 = true) {\n          var block = _step12.value;\n\n          var exposedMethods = block.exposedMethods();\n\n          for (var methodName in exposedMethods) {\n            var methodBody = exposedMethods[methodName];\n\n            if (undefined !== _this32[methodName]) {\n              throw new Error('Builder already has a builder method called: ' + methodName);\n            }\n\n            (function (block, name, body) {\n              _this32[name] = function () {\n                for (var _len10 = arguments.length, args = Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n                  args[_key10] = arguments[_key10];\n                }\n\n                body.call.apply(body, [block].concat(args));\n\n                return _this32;\n              };\n            })(block, methodName, methodBody);\n          }\n        }\n      } catch (err) {\n        _didIteratorError12 = true;\n        _iteratorError12 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion12 && _iterator12.return) {\n            _iterator12.return();\n          }\n        } finally {\n          if (_didIteratorError12) {\n            throw _iteratorError12;\n          }\n        }\n      }\n\n      return _this32;\n    }\n\n    /**\n    # Register a custom value handler for this query builder and all its contained blocks.\n    #\n    # Note: This will override any globally registered handler for this value type.\n    */\n\n\n    _createClass(_class29, [{\n      key: 'registerValueHandler',\n      value: function registerValueHandler(type, handler) {\n        var _iteratorNormalCompletion13 = true;\n        var _didIteratorError13 = false;\n        var _iteratorError13 = undefined;\n\n        try {\n          for (var _iterator13 = this.blocks[Symbol.iterator](), _step13; !(_iteratorNormalCompletion13 = (_step13 = _iterator13.next()).done); _iteratorNormalCompletion13 = true) {\n            var block = _step13.value;\n\n            block.registerValueHandler(type, handler);\n          }\n        } catch (err) {\n          _didIteratorError13 = true;\n          _iteratorError13 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion13 && _iterator13.return) {\n              _iterator13.return();\n            }\n          } finally {\n            if (_didIteratorError13) {\n              throw _iteratorError13;\n            }\n          }\n        }\n\n        _get(_class29.prototype.__proto__ || Object.getPrototypeOf(_class29.prototype), 'registerValueHandler', this).call(this, type, handler);\n\n        return this;\n      }\n\n      /**\n      # Update query builder options\n      #\n      # This will update the options for all blocks too. Use this method with caution as it allows you to change the\n      # behaviour of your query builder mid-build.\n      */\n\n    }, {\n      key: 'updateOptions',\n      value: function updateOptions(options) {\n        this.options = _extend({}, this.options, options);\n\n        var _iteratorNormalCompletion14 = true;\n        var _didIteratorError14 = false;\n        var _iteratorError14 = undefined;\n\n        try {\n          for (var _iterator14 = this.blocks[Symbol.iterator](), _step14; !(_iteratorNormalCompletion14 = (_step14 = _iterator14.next()).done); _iteratorNormalCompletion14 = true) {\n            var block = _step14.value;\n\n            block.options = _extend({}, block.options, options);\n          }\n        } catch (err) {\n          _didIteratorError14 = true;\n          _iteratorError14 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion14 && _iterator14.return) {\n              _iterator14.return();\n            }\n          } finally {\n            if (_didIteratorError14) {\n              throw _iteratorError14;\n            }\n          }\n        }\n      }\n\n      // Get the final fully constructed query param obj.\n\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var _this33 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        options = _extend({}, this.options, options);\n\n        var blockResults = this.blocks.map(function (b) {\n          return b._toParamString({\n            buildParameterized: options.buildParameterized,\n            queryBuilder: _this33\n          });\n        });\n\n        var blockTexts = blockResults.map(function (b) {\n          return b.text;\n        });\n        var blockValues = blockResults.map(function (b) {\n          return b.values;\n        });\n\n        var totalStr = blockTexts.filter(function (v) {\n          return 0 < v.length;\n        }).join(options.separator);\n\n        var totalValues = [];\n        blockValues.forEach(function (block) {\n          return block.forEach(function (value) {\n            return totalValues.push(value);\n          });\n        });\n\n        if (!options.nested) {\n          if (options.numberedParameters) {\n            var i = undefined !== options.numberedParametersStartAt ? options.numberedParametersStartAt : 1;\n\n            // construct regex for searching\n            var regex = options.parameterCharacter.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n            totalStr = totalStr.replace(new RegExp(regex, 'g'), function () {\n              return '' + options.numberedParametersPrefix + i++;\n            });\n          }\n        }\n\n        return {\n          text: this._applyNestingFormatting(totalStr, !!options.nested),\n          values: totalValues\n        };\n      }\n\n      // Deep clone\n\n    }, {\n      key: 'clone',\n      value: function clone() {\n        var blockClones = this.blocks.map(function (v) {\n          return v.clone();\n        });\n\n        return new this.constructor(this.options, blockClones);\n      }\n\n      // Get a specific block\n\n    }, {\n      key: 'getBlock',\n      value: function getBlock(blockType) {\n        var filtered = this.blocks.filter(function (b) {\n          return b instanceof blockType;\n        });\n\n        return filtered[0];\n      }\n    }]);\n\n    return _class29;\n  }(cls.BaseBuilder);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder) {\n    _inherits(_class30, _cls$QueryBuilder);\n\n    function _class30(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class30);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class30.__proto__ || Object.getPrototypeOf(_class30)).call(this, options, blocks));\n    }\n\n    return _class30;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder2) {\n    _inherits(_class31, _cls$QueryBuilder2);\n\n    function _class31(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class31);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class31.__proto__ || Object.getPrototypeOf(_class31)).call(this, options, blocks));\n    }\n\n    return _class31;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder3) {\n    _inherits(_class32, _cls$QueryBuilder3);\n\n    function _class32(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class32);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class32.__proto__ || Object.getPrototypeOf(_class32)).call(this, options, blocks));\n    }\n\n    return _class32;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder4) {\n    _inherits(_class33, _cls$QueryBuilder4);\n\n    function _class33(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class33);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class33.__proto__ || Object.getPrototypeOf(_class33)).call(this, options, blocks));\n    }\n\n    return _class33;\n  }(cls.QueryBuilder);\n\n  var _squel = {\n    VERSION: '5.13.0',\n    flavour: flavour,\n    expr: function expr(options) {\n      return new cls.Expression(options);\n    },\n    case: function _case(name, options) {\n      return new cls.Case(name, options);\n    },\n    select: function select(options, blocks) {\n      return new cls.Select(options, blocks);\n    },\n    update: function update(options, blocks) {\n      return new cls.Update(options, blocks);\n    },\n    insert: function insert(options, blocks) {\n      return new cls.Insert(options, blocks);\n    },\n    delete: function _delete(options, blocks) {\n      return new cls.Delete(options, blocks);\n    },\n    str: function str() {\n      var inst = new cls.FunctionBlock();\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    rstr: function rstr() {\n      var inst = new cls.FunctionBlock({\n        rawNesting: true\n      });\n      inst.function.apply(inst, arguments);\n      return inst;\n    },\n    registerValueHandler: cls.registerValueHandler\n  };\n\n  // aliases\n  _squel.remove = _squel.delete;\n\n  // classes\n  _squel.cls = cls;\n\n  return _squel;\n}\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Exported instance (and for use by flavour definitions further down).\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\nvar squel = _buildSquel();\n\n/**\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n# Squel SQL flavours\n# ---------------------------------------------------------------------------------------------------------\n# ---------------------------------------------------------------------------------------------------------\n*/\n\n// Available flavours\nsquel.flavours = {};\n\n// Setup Squel for a particular SQL flavour\nsquel.useFlavour = function () {\n  var flavour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n  if (!flavour) {\n    return squel;\n  }\n\n  if (squel.flavours[flavour] instanceof Function) {\n    var s = _buildSquel(flavour);\n\n    squel.flavours[flavour].call(null, s);\n\n    // add in flavour methods\n    s.flavours = squel.flavours;\n    s.useFlavour = squel.useFlavour;\n\n    return s;\n  } else {\n    throw new Error('Flavour not available: ' + flavour);\n  }\n};\n\nsquel.flavours['mssql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.replaceSingleQuotes = true;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.numberedParametersPrefix = '@';\n\n  _squel.registerValueHandler(Date, function (date) {\n    return '\\'' + date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate() + ' ' + date.getUTCHours() + ':' + date.getUTCMinutes() + ':' + date.getUTCSeconds() + '\\'';\n  });\n\n  //�LIMIT,  OFFSET x and TOP x\n  cls.MssqlLimitOffsetTopBlock = function (_cls$Block14) {\n    _inherits(_class34, _cls$Block14);\n\n    function _class34(options) {\n      _classCallCheck(this, _class34);\n\n      var _this38 = _possibleConstructorReturn(this, (_class34.__proto__ || Object.getPrototypeOf(_class34)).call(this, options));\n\n      _this38._limits = null;\n      _this38._offsets = null;\n\n      // This is setup as one block to return many as they all have to use each others data at different times\n      // The build String of EITHER LIMIT OR TOP should execute, never both.\n\n      /**\n      # Set the LIMIT/TOP transformation.\n      #\n      # Call this will override the previously set limit for this query. Also note that Passing 0 for 'max' will remove\n      # the limit.\n      */\n      var _limit = function _limit(max) {\n        max = this._sanitizeLimitOffset(max);\n        this._parent._limits = max;\n      };\n\n      _this38.ParentBlock = function (_cls$Block15) {\n        _inherits(_class35, _cls$Block15);\n\n        function _class35(parent) {\n          _classCallCheck(this, _class35);\n\n          var _this39 = _possibleConstructorReturn(this, (_class35.__proto__ || Object.getPrototypeOf(_class35)).call(this, parent.options));\n\n          _this39._parent = parent;\n          return _this39;\n        }\n\n        return _class35;\n      }(cls.Block);\n\n      _this38.LimitBlock = function (_this38$ParentBlock) {\n        _inherits(_class36, _this38$ParentBlock);\n\n        function _class36(parent) {\n          _classCallCheck(this, _class36);\n\n          var _this40 = _possibleConstructorReturn(this, (_class36.__proto__ || Object.getPrototypeOf(_class36)).call(this, parent));\n\n          _this40.limit = _limit;\n          return _this40;\n        }\n\n        _createClass(_class36, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && this._parent._offsets) {\n              str = 'FETCH NEXT ' + this._parent._limits + ' ROWS ONLY';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class36;\n      }(_this38.ParentBlock);\n\n      _this38.TopBlock = function (_this38$ParentBlock2) {\n        _inherits(_class37, _this38$ParentBlock2);\n\n        function _class37(parent) {\n          _classCallCheck(this, _class37);\n\n          var _this41 = _possibleConstructorReturn(this, (_class37.__proto__ || Object.getPrototypeOf(_class37)).call(this, parent));\n\n          _this41.top = _limit;\n          return _this41;\n        }\n\n        _createClass(_class37, [{\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._limits && !this._parent._offsets) {\n              str = 'TOP (' + this._parent._limits + ')';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class37;\n      }(_this38.ParentBlock);\n\n      _this38.OffsetBlock = function (_this38$ParentBlock3) {\n        _inherits(_class38, _this38$ParentBlock3);\n\n        function _class38() {\n          _classCallCheck(this, _class38);\n\n          return _possibleConstructorReturn(this, (_class38.__proto__ || Object.getPrototypeOf(_class38)).apply(this, arguments));\n        }\n\n        _createClass(_class38, [{\n          key: 'offset',\n          value: function offset(start) {\n            this._parent._offsets = this._sanitizeLimitOffset(start);\n          }\n        }, {\n          key: '_toParamString',\n          value: function _toParamString() {\n            var str = \"\";\n\n            if (this._parent._offsets) {\n              str = 'OFFSET ' + this._parent._offsets + ' ROWS';\n            }\n\n            return {\n              text: str,\n              values: []\n            };\n          }\n        }]);\n\n        return _class38;\n      }(_this38.ParentBlock);\n      return _this38;\n    }\n\n    _createClass(_class34, [{\n      key: 'LIMIT',\n      value: function LIMIT() {\n        return new this.LimitBlock(this);\n      }\n    }, {\n      key: 'TOP',\n      value: function TOP() {\n        return new this.TopBlock(this);\n      }\n    }, {\n      key: 'OFFSET',\n      value: function OFFSET() {\n        return new this.OffsetBlock(this);\n      }\n    }]);\n\n    return _class34;\n  }(cls.Block);\n\n  cls.MssqlUpdateTopBlock = function (_cls$Block16) {\n    _inherits(_class39, _cls$Block16);\n\n    function _class39(options) {\n      _classCallCheck(this, _class39);\n\n      var _this43 = _possibleConstructorReturn(this, (_class39.__proto__ || Object.getPrototypeOf(_class39)).call(this, options));\n\n      _this43._limits = null;\n\n      _this43.limit = _this43.top = function (max) {\n        _this43._limits = _this43._sanitizeLimitOffset(max);\n      };\n      return _this43;\n    }\n\n    _createClass(_class39, [{\n      key: '_toParamString',\n      value: function _toParamString() {\n        return {\n          text: this._limits ? 'TOP (' + this._limits + ')' : \"\",\n          values: []\n        };\n      }\n    }]);\n\n    return _class39;\n  }(cls.Block);\n\n  cls.MssqlInsertFieldValueBlock = function (_cls$InsertFieldValue) {\n    _inherits(_class40, _cls$InsertFieldValue);\n\n    function _class40(options) {\n      _classCallCheck(this, _class40);\n\n      var _this44 = _possibleConstructorReturn(this, (_class40.__proto__ || Object.getPrototypeOf(_class40)).call(this, options));\n\n      _this44._outputs = [];\n      return _this44;\n    }\n\n    // add fields to the output clause\n\n\n    _createClass(_class40, [{\n      key: 'output',\n      value: function output(fields) {\n        var _this45 = this;\n\n        if ('string' === typeof fields) {\n          this._outputs.push('INSERTED.' + this._sanitizeField(fields));\n        } else {\n          fields.forEach(function (f) {\n            _this45._outputs.push('INSERTED.' + _this45._sanitizeField(f));\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(options) {\n        var ret = _get(_class40.prototype.__proto__ || Object.getPrototypeOf(_class40.prototype), '_toParamString', this).call(this, options);\n\n        if (ret.text.length && 0 < this._outputs.length) {\n          var innerStr = 'OUTPUT ' + this._outputs.join(', ') + ' ';\n\n          var valuesPos = ret.text.indexOf('VALUES');\n\n          ret.text = ret.text.substr(0, valuesPos) + innerStr + ret.text.substr(valuesPos);\n        }\n\n        return ret;\n      }\n    }]);\n\n    return _class40;\n  }(cls.InsertFieldValueBlock);\n\n  cls.MssqlUpdateDeleteOutputBlock = function (_cls$Block17) {\n    _inherits(_class41, _cls$Block17);\n\n    function _class41(options) {\n      _classCallCheck(this, _class41);\n\n      var _this46 = _possibleConstructorReturn(this, (_class41.__proto__ || Object.getPrototypeOf(_class41)).call(this, options));\n\n      _this46._outputs = [];\n      return _this46;\n    }\n\n    /**\n    # Add the given fields to the final result set.\n    #\n    # The parameter is an Object containing field names (or database functions) as the keys and aliases for the fields\n    # as the values. If the value for a key is null then no alias is set for that field.\n    #\n    # Internally this method simply calls the field() method of this block to add each individual field.\n    */\n\n\n    _createClass(_class41, [{\n      key: 'outputs',\n      value: function outputs(_outputs) {\n        for (var output in _outputs) {\n          this.output(output, _outputs[output]);\n        }\n      }\n\n      /**\n      # Add the given field to the final result set.\n      #\n      # The 'field' parameter does not necessarily have to be a fieldname. It can use database functions too,\n      # e.g. DATE_FORMAT(a.started, \"%H\")\n      #\n      # An alias may also be specified for this field.\n      */\n\n    }, {\n      key: 'output',\n      value: function output(_output) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        _output = this._sanitizeField(_output);\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n\n        this._outputs.push({\n          name: this.options.forDelete ? 'DELETED.' + _output : 'INSERTED.' + _output,\n          alias: alias\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString(queryBuilder) {\n        var totalStr = \"\";\n\n        if (this._outputs.length) {\n          var _iteratorNormalCompletion15 = true;\n          var _didIteratorError15 = false;\n          var _iteratorError15 = undefined;\n\n          try {\n            for (var _iterator15 = this._outputs[Symbol.iterator](), _step15; !(_iteratorNormalCompletion15 = (_step15 = _iterator15.next()).done); _iteratorNormalCompletion15 = true) {\n              var output = _step15.value;\n\n              totalStr = _pad(totalStr, \", \");\n\n              totalStr += output.name;\n\n              if (output.alias) {\n                totalStr += ' AS ' + this._formatFieldAlias(output.alias);\n              }\n            }\n          } catch (err) {\n            _didIteratorError15 = true;\n            _iteratorError15 = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion15 && _iterator15.return) {\n                _iterator15.return();\n              }\n            } finally {\n              if (_didIteratorError15) {\n                throw _iteratorError15;\n              }\n            }\n          }\n\n          totalStr = 'OUTPUT ' + totalStr;\n        }\n\n        return {\n          text: totalStr,\n          values: []\n        };\n      }\n    }]);\n\n    return _class41;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder5) {\n    _inherits(_class42, _cls$QueryBuilder5);\n\n    function _class42(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class42);\n\n      var limitOffsetTopBlock = new cls.MssqlLimitOffsetTopBlock(options);\n\n      blocks = blocks || [new cls.StringBlock(options, 'SELECT'), new cls.DistinctBlock(options), limitOffsetTopBlock.TOP(), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.OrderByBlock(options), limitOffsetTopBlock.OFFSET(), limitOffsetTopBlock.LIMIT(), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class42.__proto__ || Object.getPrototypeOf(_class42)).call(this, options, blocks));\n    }\n\n    return _class42;\n  }(cls.QueryBuilder);\n\n  // Order By in update requires subquery\n\n  // UPDATE query builder.\n  cls.Update = function (_cls$QueryBuilder6) {\n    _inherits(_class43, _cls$QueryBuilder6);\n\n    function _class43(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class43);\n\n      blocks = blocks || [new cls.StringBlock(options, 'UPDATE'), new cls.MssqlUpdateTopBlock(options), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.MssqlUpdateDeleteOutputBlock(options), new cls.WhereBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class43.__proto__ || Object.getPrototypeOf(_class43)).call(this, options, blocks));\n    }\n\n    return _class43;\n  }(cls.QueryBuilder);\n\n  // Order By and Limit/Top in delete requires subquery\n\n  // DELETE query builder.\n  cls.Delete = function (_cls$QueryBuilder7) {\n    _inherits(_class44, _cls$QueryBuilder7);\n\n    function _class44(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class44);\n\n      blocks = blocks || [new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, { singleTable: true })), new cls.JoinBlock(options), new cls.MssqlUpdateDeleteOutputBlock(_extend({}, options, { forDelete: true })), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class44.__proto__ || Object.getPrototypeOf(_class44)).call(this, options, blocks));\n    }\n\n    return _class44;\n  }(cls.QueryBuilder);\n\n  // An INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder8) {\n    _inherits(_class45, _cls$QueryBuilder8);\n\n    function _class45(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class45);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.MssqlInsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class45.__proto__ || Object.getPrototypeOf(_class45)).call(this, options, blocks));\n    }\n\n    return _class45;\n  }(cls.QueryBuilder);\n};\n\n// This file contains additional Squel commands for use with MySQL\n\nsquel.flavours['mysql'] = function (_squel) {\n  var cls = _squel.cls;\n\n  // ON DUPLICATE KEY UPDATE ...\n  cls.MysqlOnDuplicateKeyUpdateBlock = function (_cls$AbstractSetField3) {\n    _inherits(_class46, _cls$AbstractSetField3);\n\n    function _class46() {\n      _classCallCheck(this, _class46);\n\n      return _possibleConstructorReturn(this, (_class46.__proto__ || Object.getPrototypeOf(_class46)).apply(this, arguments));\n    }\n\n    _createClass(_class46, [{\n      key: 'onDupUpdate',\n      value: function onDupUpdate(field, value, options) {\n        this._set(field, value, options);\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        return {\n          text: !totalStr.length ? \"\" : 'ON DUPLICATE KEY UPDATE ' + totalStr,\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class46;\n  }(cls.AbstractSetFieldBlock);\n\n  // INSERT query builder.\n  cls.Insert = function (_cls$QueryBuilder9) {\n    _inherits(_class47, _cls$QueryBuilder9);\n\n    function _class47(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class47);\n\n      blocks = blocks || [new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.MysqlOnDuplicateKeyUpdateBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class47.__proto__ || Object.getPrototypeOf(_class47)).call(this, options, blocks));\n    }\n\n    return _class47;\n  }(cls.QueryBuilder);\n\n  // REPLACE query builder.\n  cls.Replace = function (_cls$QueryBuilder10) {\n    _inherits(_class48, _cls$QueryBuilder10);\n\n    function _class48(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class48);\n\n      blocks = blocks || [new cls.StringBlock(options, 'REPLACE'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class48.__proto__ || Object.getPrototypeOf(_class48)).call(this, options, blocks));\n    }\n\n    return _class48;\n  }(cls.QueryBuilder);\n\n  _squel.replace = function (options, blocks) {\n    return new cls.Replace(options, blocks);\n  };\n};\n\n// This file contains additional Squel commands for use with the Postgres DB engine\nsquel.flavours['postgres'] = function (_squel) {\n  var cls = _squel.cls;\n\n  cls.DefaultQueryBuilderOptions.numberedParameters = true;\n  cls.DefaultQueryBuilderOptions.numberedParametersStartAt = 1;\n  cls.DefaultQueryBuilderOptions.autoQuoteAliasNames = false;\n  cls.DefaultQueryBuilderOptions.useAsForTableAliasNames = true;\n\n  cls.PostgresOnConflictKeyUpdateBlock = function (_cls$AbstractSetField4) {\n    _inherits(_class49, _cls$AbstractSetField4);\n\n    function _class49() {\n      _classCallCheck(this, _class49);\n\n      return _possibleConstructorReturn(this, (_class49.__proto__ || Object.getPrototypeOf(_class49)).apply(this, arguments));\n    }\n\n    _createClass(_class49, [{\n      key: 'onConflict',\n      value: function onConflict(conflictFields, fields) {\n        var _this55 = this;\n\n        this._onConflict = true;\n        if (!conflictFields) {\n          return;\n        }\n        if (!_isArray(conflictFields)) {\n          conflictFields = [conflictFields];\n        }\n        this._dupFields = conflictFields.map(this._sanitizeField.bind(this));\n\n        if (fields) {\n          Object.keys(fields).forEach(function (key) {\n            _this55._set(key, fields[key]);\n          });\n        }\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var totalStr = \"\",\n            totalValues = [];\n\n        for (var i = 0; i < this._fields.length; ++i) {\n          totalStr = _pad(totalStr, ', ');\n\n          var field = this._fields[i];\n\n          var value = this._values[0][i];\n\n          var valueOptions = this._valueOptions[0][i];\n\n          // e.g. if field is an expression such as: count = count + 1\n          if (typeof value === 'undefined') {\n            totalStr += field;\n          } else {\n            var ret = this._buildString(field + ' = ' + this.options.parameterCharacter, [value], {\n              buildParameterized: options.buildParameterized,\n              formattingOptions: valueOptions\n            });\n\n            totalStr += ret.text;\n            ret.values.forEach(function (value) {\n              return totalValues.push(value);\n            });\n          }\n        }\n\n        var returned = {\n          text: '',\n          values: totalValues\n        };\n\n        if (this._onConflict) {\n          // note the trailing whitespace after the join\n          var conflictFields = this._dupFields ? '(' + this._dupFields.join(', ') + ') ' : '';\n          var action = totalStr.length ? 'UPDATE SET ' + totalStr : 'NOTHING';\n          returned.text = 'ON CONFLICT ' + conflictFields + 'DO ' + action;\n        }\n\n        return returned;\n      }\n    }]);\n\n    return _class49;\n  }(cls.AbstractSetFieldBlock);\n\n  // RETURNING\n  cls.ReturningBlock = function (_cls$Block18) {\n    _inherits(_class50, _cls$Block18);\n\n    function _class50(options) {\n      _classCallCheck(this, _class50);\n\n      var _this56 = _possibleConstructorReturn(this, (_class50.__proto__ || Object.getPrototypeOf(_class50)).call(this, options));\n\n      _this56._fields = [];\n      return _this56;\n    }\n\n    _createClass(_class50, [{\n      key: 'returning',\n      value: function returning(field) {\n        var alias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        alias = alias ? this._sanitizeFieldAlias(alias) : alias;\n        field = this._sanitizeField(field);\n\n        // if field-alias combo already present then don't add\n        var existingField = this._fields.filter(function (f) {\n          return f.name === field && f.alias === alias;\n        });\n        if (existingField.length) {\n          return this;\n        }\n\n        this._fields.push({\n          name: field,\n          alias: alias,\n          options: options\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var queryBuilder = options.queryBuilder,\n            buildParameterized = options.buildParameterized;\n\n\n        var totalStr = '',\n            totalValues = [];\n\n        var _iteratorNormalCompletion16 = true;\n        var _didIteratorError16 = false;\n        var _iteratorError16 = undefined;\n\n        try {\n          for (var _iterator16 = this._fields[Symbol.iterator](), _step16; !(_iteratorNormalCompletion16 = (_step16 = _iterator16.next()).done); _iteratorNormalCompletion16 = true) {\n            var field = _step16.value;\n\n            totalStr = _pad(totalStr, \", \");\n\n            var name = field.name,\n                alias = field.alias,\n                _options2 = field.options;\n\n\n            if (typeof name === 'string') {\n              totalStr += this._formatFieldName(name, _options2);\n            } else {\n              var ret = name._toParamString({\n                nested: true,\n                buildParameterized: buildParameterized\n              });\n\n              totalStr += ret.text;\n              ret.values.forEach(function (value) {\n                return totalValues.push(value);\n              });\n            }\n\n            if (alias) {\n              totalStr += ' AS ' + this._formatFieldAlias(alias);\n            }\n          }\n        } catch (err) {\n          _didIteratorError16 = true;\n          _iteratorError16 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion16 && _iterator16.return) {\n              _iterator16.return();\n            }\n          } finally {\n            if (_didIteratorError16) {\n              throw _iteratorError16;\n            }\n          }\n        }\n\n        return {\n          text: totalStr.length > 0 ? 'RETURNING ' + totalStr : '',\n          values: totalValues\n        };\n      }\n    }]);\n\n    return _class50;\n  }(cls.Block);\n\n  // WITH\n  cls.WithBlock = function (_cls$Block19) {\n    _inherits(_class51, _cls$Block19);\n\n    function _class51(options) {\n      _classCallCheck(this, _class51);\n\n      var _this57 = _possibleConstructorReturn(this, (_class51.__proto__ || Object.getPrototypeOf(_class51)).call(this, options));\n\n      _this57._tables = [];\n      return _this57;\n    }\n\n    _createClass(_class51, [{\n      key: 'with',\n      value: function _with(alias, table) {\n        this._tables.push({ alias: alias, table: table });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var parts = [];\n        var values = [];\n\n        var _iteratorNormalCompletion17 = true;\n        var _didIteratorError17 = false;\n        var _iteratorError17 = undefined;\n\n        try {\n          for (var _iterator17 = this._tables[Symbol.iterator](), _step17; !(_iteratorNormalCompletion17 = (_step17 = _iterator17.next()).done); _iteratorNormalCompletion17 = true) {\n            var _ref8 = _step17.value;\n            var alias = _ref8.alias;\n            var table = _ref8.table;\n\n            var ret = table._toParamString({\n              buildParameterized: options.buildParameterized,\n              nested: true\n            });\n\n            parts.push(alias + ' AS ' + ret.text);\n            ret.values.forEach(function (value) {\n              return values.push(value);\n            });\n          }\n        } catch (err) {\n          _didIteratorError17 = true;\n          _iteratorError17 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion17 && _iterator17.return) {\n              _iterator17.return();\n            }\n          } finally {\n            if (_didIteratorError17) {\n              throw _iteratorError17;\n            }\n          }\n        }\n\n        return {\n          text: parts.length ? 'WITH ' + parts.join(', ') : '',\n          values: values\n        };\n      }\n    }]);\n\n    return _class51;\n  }(cls.Block);\n\n  // DISTINCT [ON]\n  cls.DistinctOnBlock = function (_cls$Block20) {\n    _inherits(_class52, _cls$Block20);\n\n    function _class52(options) {\n      _classCallCheck(this, _class52);\n\n      var _this58 = _possibleConstructorReturn(this, (_class52.__proto__ || Object.getPrototypeOf(_class52)).call(this, options));\n\n      _this58._distinctFields = [];\n      return _this58;\n    }\n\n    _createClass(_class52, [{\n      key: 'distinct',\n      value: function distinct() {\n        var _this59 = this;\n\n        this._useDistinct = true;\n\n        // Add all fields to the DISTINCT ON clause.\n\n        for (var _len11 = arguments.length, fields = Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n          fields[_key11] = arguments[_key11];\n        }\n\n        fields.forEach(function (field) {\n          _this59._distinctFields.push(_this59._sanitizeField(field));\n        });\n      }\n    }, {\n      key: '_toParamString',\n      value: function _toParamString() {\n        var text = '';\n\n        if (this._useDistinct) {\n          text = 'DISTINCT';\n\n          if (this._distinctFields.length) {\n            text += ' ON (' + this._distinctFields.join(', ') + ')';\n          }\n        }\n\n        return {\n          text: text,\n          values: []\n        };\n      }\n    }]);\n\n    return _class52;\n  }(cls.Block);\n\n  // SELECT query builder.\n  cls.Select = function (_cls$QueryBuilder11) {\n    _inherits(_class53, _cls$QueryBuilder11);\n\n    function _class53(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class53);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'SELECT'), new cls.FunctionBlock(options), new cls.DistinctOnBlock(options), new cls.GetFieldBlock(options), new cls.FromTableBlock(options), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.GroupByBlock(options), new cls.HavingBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.OffsetBlock(options), new cls.UnionBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class53.__proto__ || Object.getPrototypeOf(_class53)).call(this, options, blocks));\n    }\n\n    return _class53;\n  }(cls.QueryBuilder);\n\n  // INSERT query builder\n  cls.Insert = function (_cls$QueryBuilder12) {\n    _inherits(_class54, _cls$QueryBuilder12);\n\n    function _class54(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class54);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'INSERT'), new cls.IntoTableBlock(options), new cls.InsertFieldValueBlock(options), new cls.InsertFieldsFromQueryBlock(options), new cls.PostgresOnConflictKeyUpdateBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class54.__proto__ || Object.getPrototypeOf(_class54)).call(this, options, blocks));\n    }\n\n    return _class54;\n  }(cls.QueryBuilder);\n\n  // UPDATE query builder\n  cls.Update = function (_cls$QueryBuilder13) {\n    _inherits(_class55, _cls$QueryBuilder13);\n\n    function _class55(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class55);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'UPDATE'), new cls.UpdateTableBlock(options), new cls.SetFieldBlock(options), new cls.FromTableBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class55.__proto__ || Object.getPrototypeOf(_class55)).call(this, options, blocks));\n    }\n\n    return _class55;\n  }(cls.QueryBuilder);\n\n  // DELETE query builder\n  cls.Delete = function (_cls$QueryBuilder14) {\n    _inherits(_class56, _cls$QueryBuilder14);\n\n    function _class56(options) {\n      var blocks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      _classCallCheck(this, _class56);\n\n      blocks = blocks || [new cls.WithBlock(options), new cls.StringBlock(options, 'DELETE'), new cls.TargetTableBlock(options), new cls.FromTableBlock(_extend({}, options, {\n        singleTable: true\n      })), new cls.JoinBlock(options), new cls.WhereBlock(options), new cls.OrderByBlock(options), new cls.LimitBlock(options), new cls.ReturningBlock(options)];\n\n      return _possibleConstructorReturn(this, (_class56.__proto__ || Object.getPrototypeOf(_class56)).call(this, options, blocks));\n    }\n\n    return _class56;\n  }(cls.QueryBuilder);\n};\nreturn squel;\n}));\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}