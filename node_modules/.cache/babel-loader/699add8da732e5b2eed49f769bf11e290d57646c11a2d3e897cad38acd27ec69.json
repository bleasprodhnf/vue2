{"ast":null,"code":"import squel from 'squel';\nexport function localGroupMembers(db) {\n  return db.exec(`\n      create table if not exists 'local_group_members' (\n        'group_id' varchar(64),\n        'user_id' varchar(64),\n        'nickname' varchar(255),\n        'user_group_face_url' varchar(255),\n        'role_level' integer,\n        'join_time' integer,\n        'join_source' integer,\n        'inviter_user_id' text,\n        'mute_end_time' integer DEFAULT 0,\n        'operator_user_id' varchar(64),\n        'ex' varchar(1024),\n        'attached_info' varchar(1024),\n        PRIMARY KEY ('group_id', 'user_id')\n    ) \n      `);\n}\nexport function getGroupMemberInfoByGroupIDUserID(db, groupID, userID) {\n  return db.exec(`\n      select *\n      from local_group_members\n      WHERE group_id = \"${groupID}\" \n      AND user_id = \"${userID}\" \n      LIMIT 1\n      `);\n}\nexport function getAllGroupMemberList(db) {\n  return db.exec(`\n    SELECT *\n    FROM local_group_members\n      `);\n}\nexport function getAllGroupMemberUserIDList(db) {\n  return db.exec(`\n      SELECT user_id\n      FROM local_group_members\n        `);\n}\nexport function getGroupMemberCount(db, groupID) {\n  return db.exec(`\n    SELECT count(*) FROM local_group_members \n    WHERE group_id = \"${groupID}\" \n      `);\n}\nexport function getGroupSomeMemberInfo(db, groupID, userIDList) {\n  const ids = userIDList.map(v => `'${v}'`);\n  return db.exec(`\n    select *\n    from local_group_members\n    where group_id = \"${groupID}\"\n    and user_id in (${ids.join(',')})\n      `);\n}\nexport function getGroupAdminID(db, groupID) {\n  return db.exec(`\n    SELECT user_id FROM local_group_members \n    WHERE group_id = \"${groupID}\" \n    And role_level = 3\n      `);\n}\nexport function getGroupMemberListByGroupID(db, groupID) {\n  return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n        `);\n}\nexport function getGroupMemberListSplit(db, groupID, filter, offset, count) {\n  let condition = `\n    SELECT * FROM local_group_members \n        WHERE group_id = \"${groupID}\" \n        And role_level > 0 \n        ORDER BY role_level DESC,join_time ASC \n    LIMIT ${count} OFFSET ${offset}\n    `;\n  if (filter === 1) {\n    condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And role_level = 1 \n        ORDER BY join_time ASC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n  }\n  if (filter === 4) {\n    condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And ( role_level = 1 OR role_level = 3 )  \n        ORDER BY role_level DESC,join_time ASC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n  }\n  return db.exec(condition);\n}\nexport function getGroupMemberOwnerAndAdmin(db, groupID) {\n  return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level > 1 \n      ORDER BY join_time DESC\n        `);\n}\nexport function getGroupMemberOwner(db, groupID) {\n  return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level = 2\n        `);\n}\nexport function getGroupMemberListSplitByJoinTimeFilter(db, groupID, offset, count, joinTimeBegin = 0, joinTimeEnd = 100000000000, userIDList) {\n  let condition = '';\n  if (userIDList.length === 0) {\n    condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And join_time  between ${joinTimeBegin} and ${joinTimeEnd}  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n        `;\n  } else {\n    const ids = userIDList.map(v => `'${v}'`);\n    condition = `\n        SELECT * FROM local_group_members \n        WHERE group_id = \"${groupID}\" \n        And join_time  between ${joinTimeBegin} and ${joinTimeEnd}  \n        And user_id NOT IN (${ids.join(',')})\n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n  }\n  return db.exec(condition);\n}\nexport function getGroupOwnerAndAdminByGroupID(db, groupID) {\n  return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level > 1\n        `);\n}\nexport function getGroupMemberUIDListByGroupID(db, groupID) {\n  return db.exec(`\n      SELECT user_id FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n        `);\n}\nexport function insertGroupMember(db, localGroupMember) {\n  const sql = squel.insert().into('local_group_members').setFields(localGroupMember).toString();\n  return db.exec(sql);\n}\nexport function batchInsertGroupMember(db, localGroupMember) {\n  const sql = squel.insert().into('local_group_members').setFieldsRows(localGroupMember).toString();\n  return db.exec(sql);\n}\nexport function deleteGroupMember(db, groupID, userID) {\n  return db.exec(`\n    DELETE FROM local_group_members \n    WHERE group_id=\"${groupID}\" \n    and user_id=\"${userID}\"\n      `);\n}\nexport function deleteGroupAllMembers(db, groupID) {\n  return db.exec(`\n      DELETE FROM local_group_members \n      WHERE group_id=\"${groupID}\"\n        `);\n}\nexport function updateGroupMember(db, localGroupMember) {\n  const sql = squel.update().table('local_group_members').setFields(localGroupMember).where(`group_id = '${localGroupMember.group_id}' and user_id = '${localGroupMember.user_id}'`).toString();\n  return db.exec(sql);\n}\nexport function updateGroupMemberField(db, groupID, userID, localGroupMember) {\n  const sql = squel.update().table('local_group_members').setFields(localGroupMember).where(`group_id = '${groupID}' and user_id = '${userID}'`).toString();\n  return db.exec(sql);\n}\nexport function searchGroupMembers(db, keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count) {\n  let condition = '';\n  if (groupID) {\n    if (isSearchMemberNickname && isSearchUserID) {\n      condition = `\n            SELECT * FROM local_group_members \n            WHERE ( user_id like \"%${keyword}%\" or nickname like \"%${keyword}%\"  ) \n            and group_id IN (\"${groupID}\")  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n            `;\n    } else if (!isSearchMemberNickname && !isSearchUserID) {\n      condition = `\n        SELECT * FROM local_group_members \n        WHERE group_id IN (\"${groupID}\")  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    } else {\n      const subCondition = isSearchMemberNickname ? `nickname like \"%${keyword}%\"` : `user_id like \"%${keyword}%\"`;\n      condition = `\n            SELECT * FROM local_group_members \n            WHERE ${subCondition}\n            and group_id IN (\"${groupID}\")  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n            `;\n    }\n  } else {\n    if (isSearchMemberNickname && isSearchMemberNickname) {\n      condition = `\n        SELECT * FROM local_group_members \n        WHERE user_id like \"%${keyword}%\" or nickname like \"%${keyword}%\"  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    } else if (!isSearchMemberNickname && !isSearchMemberNickname) {\n      condition = `\n        SELECT * FROM local_group_members \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    } else {\n      const subCondition = isSearchMemberNickname ? `nickname like \"%${keyword}%\"` : `user_id like \"%${keyword}%\"`;\n      condition = `\n        SELECT * FROM local_group_members \n        WHERE ${subCondition}  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    }\n  }\n  return db.exec(condition);\n}","map":{"version":3,"names":["squel","localGroupMembers","db","exec","getGroupMemberInfoByGroupIDUserID","groupID","userID","getAllGroupMemberList","getAllGroupMemberUserIDList","getGroupMemberCount","getGroupSomeMemberInfo","userIDList","ids","map","v","join","getGroupAdminID","getGroupMemberListByGroupID","getGroupMemberListSplit","filter","offset","count","condition","getGroupMemberOwnerAndAdmin","getGroupMemberOwner","getGroupMemberListSplitByJoinTimeFilter","joinTimeBegin","joinTimeEnd","length","getGroupOwnerAndAdminByGroupID","getGroupMemberUIDListByGroupID","insertGroupMember","localGroupMember","sql","insert","into","setFields","toString","batchInsertGroupMember","setFieldsRows","deleteGroupMember","deleteGroupAllMembers","updateGroupMember","update","table","where","group_id","user_id","updateGroupMemberField","searchGroupMembers","keyword","isSearchMemberNickname","isSearchUserID","subCondition"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/sqls/localGroupMembers.js"],"sourcesContent":["import squel from 'squel';\nexport function localGroupMembers(db) {\n    return db.exec(`\n      create table if not exists 'local_group_members' (\n        'group_id' varchar(64),\n        'user_id' varchar(64),\n        'nickname' varchar(255),\n        'user_group_face_url' varchar(255),\n        'role_level' integer,\n        'join_time' integer,\n        'join_source' integer,\n        'inviter_user_id' text,\n        'mute_end_time' integer DEFAULT 0,\n        'operator_user_id' varchar(64),\n        'ex' varchar(1024),\n        'attached_info' varchar(1024),\n        PRIMARY KEY ('group_id', 'user_id')\n    ) \n      `);\n}\nexport function getGroupMemberInfoByGroupIDUserID(db, groupID, userID) {\n    return db.exec(`\n      select *\n      from local_group_members\n      WHERE group_id = \"${groupID}\" \n      AND user_id = \"${userID}\" \n      LIMIT 1\n      `);\n}\nexport function getAllGroupMemberList(db) {\n    return db.exec(`\n    SELECT *\n    FROM local_group_members\n      `);\n}\nexport function getAllGroupMemberUserIDList(db) {\n    return db.exec(`\n      SELECT user_id\n      FROM local_group_members\n        `);\n}\nexport function getGroupMemberCount(db, groupID) {\n    return db.exec(`\n    SELECT count(*) FROM local_group_members \n    WHERE group_id = \"${groupID}\" \n      `);\n}\nexport function getGroupSomeMemberInfo(db, groupID, userIDList) {\n    const ids = userIDList.map(v => `'${v}'`);\n    return db.exec(`\n    select *\n    from local_group_members\n    where group_id = \"${groupID}\"\n    and user_id in (${ids.join(',')})\n      `);\n}\nexport function getGroupAdminID(db, groupID) {\n    return db.exec(`\n    SELECT user_id FROM local_group_members \n    WHERE group_id = \"${groupID}\" \n    And role_level = 3\n      `);\n}\nexport function getGroupMemberListByGroupID(db, groupID) {\n    return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n        `);\n}\nexport function getGroupMemberListSplit(db, groupID, filter, offset, count) {\n    let condition = `\n    SELECT * FROM local_group_members \n        WHERE group_id = \"${groupID}\" \n        And role_level > 0 \n        ORDER BY role_level DESC,join_time ASC \n    LIMIT ${count} OFFSET ${offset}\n    `;\n    if (filter === 1) {\n        condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And role_level = 1 \n        ORDER BY join_time ASC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    }\n    if (filter === 4) {\n        condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And ( role_level = 1 OR role_level = 3 )  \n        ORDER BY role_level DESC,join_time ASC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    }\n    return db.exec(condition);\n}\nexport function getGroupMemberOwnerAndAdmin(db, groupID) {\n    return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level > 1 \n      ORDER BY join_time DESC\n        `);\n}\nexport function getGroupMemberOwner(db, groupID) {\n    return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level = 2\n        `);\n}\nexport function getGroupMemberListSplitByJoinTimeFilter(db, groupID, offset, count, joinTimeBegin = 0, joinTimeEnd = 100000000000, userIDList) {\n    let condition = '';\n    if (userIDList.length === 0) {\n        condition = `\n        SELECT * FROM local_group_members \n            WHERE group_id = \"${groupID}\" \n            And join_time  between ${joinTimeBegin} and ${joinTimeEnd}  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n        `;\n    }\n    else {\n        const ids = userIDList.map(v => `'${v}'`);\n        condition = `\n        SELECT * FROM local_group_members \n        WHERE group_id = \"${groupID}\" \n        And join_time  between ${joinTimeBegin} and ${joinTimeEnd}  \n        And user_id NOT IN (${ids.join(',')})\n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n    }\n    return db.exec(condition);\n}\nexport function getGroupOwnerAndAdminByGroupID(db, groupID) {\n    return db.exec(`\n      SELECT * FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n      And role_level > 1\n        `);\n}\nexport function getGroupMemberUIDListByGroupID(db, groupID) {\n    return db.exec(`\n      SELECT user_id FROM local_group_members \n      WHERE group_id = \"${groupID}\" \n        `);\n}\nexport function insertGroupMember(db, localGroupMember) {\n    const sql = squel\n        .insert()\n        .into('local_group_members')\n        .setFields(localGroupMember)\n        .toString();\n    return db.exec(sql);\n}\nexport function batchInsertGroupMember(db, localGroupMember) {\n    const sql = squel\n        .insert()\n        .into('local_group_members')\n        .setFieldsRows(localGroupMember)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteGroupMember(db, groupID, userID) {\n    return db.exec(`\n    DELETE FROM local_group_members \n    WHERE group_id=\"${groupID}\" \n    and user_id=\"${userID}\"\n      `);\n}\nexport function deleteGroupAllMembers(db, groupID) {\n    return db.exec(`\n      DELETE FROM local_group_members \n      WHERE group_id=\"${groupID}\"\n        `);\n}\nexport function updateGroupMember(db, localGroupMember) {\n    const sql = squel\n        .update()\n        .table('local_group_members')\n        .setFields(localGroupMember)\n        .where(`group_id = '${localGroupMember.group_id}' and user_id = '${localGroupMember.user_id}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function updateGroupMemberField(db, groupID, userID, localGroupMember) {\n    const sql = squel\n        .update()\n        .table('local_group_members')\n        .setFields(localGroupMember)\n        .where(`group_id = '${groupID}' and user_id = '${userID}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function searchGroupMembers(db, keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count) {\n    let condition = '';\n    if (groupID) {\n        if (isSearchMemberNickname && isSearchUserID) {\n            condition = `\n            SELECT * FROM local_group_members \n            WHERE ( user_id like \"%${keyword}%\" or nickname like \"%${keyword}%\"  ) \n            and group_id IN (\"${groupID}\")  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n            `;\n        }\n        else if (!isSearchMemberNickname && !isSearchUserID) {\n            condition = `\n        SELECT * FROM local_group_members \n        WHERE group_id IN (\"${groupID}\")  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n        }\n        else {\n            const subCondition = isSearchMemberNickname\n                ? `nickname like \"%${keyword}%\"`\n                : `user_id like \"%${keyword}%\"`;\n            condition = `\n            SELECT * FROM local_group_members \n            WHERE ${subCondition}\n            and group_id IN (\"${groupID}\")  \n            ORDER BY join_time DESC \n            LIMIT ${count} OFFSET ${offset}\n            `;\n        }\n    }\n    else {\n        if (isSearchMemberNickname && isSearchMemberNickname) {\n            condition = `\n        SELECT * FROM local_group_members \n        WHERE user_id like \"%${keyword}%\" or nickname like \"%${keyword}%\"  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n        }\n        else if (!isSearchMemberNickname && !isSearchMemberNickname) {\n            condition = `\n        SELECT * FROM local_group_members \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n        }\n        else {\n            const subCondition = isSearchMemberNickname\n                ? `nickname like \"%${keyword}%\"`\n                : `user_id like \"%${keyword}%\"`;\n            condition = `\n        SELECT * FROM local_group_members \n        WHERE ${subCondition}  \n        ORDER BY join_time DESC \n        LIMIT ${count} OFFSET ${offset}\n        `;\n        }\n    }\n    return db.exec(condition);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}