{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { getBlackList as databaseGetBlackList, getBlackListUserID as databaseGetBlackListUserID, getBlackInfoByBlockUserID as databaseGetBlackInfoByBlockUserID, getBlackInfoList as databaseGetBlackInfoList, insertBlack as databaseInsertBlack, deleteBlack as databasedeleteBlack, updateBlack as databaseupdateBlack } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getBlackList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetBlackList(db);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      block_user_id: 'userID'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getBlackListUserID() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetBlackListUserID(db);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getBlackInfoByBlockUserID(blockUserID, loginUserID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetBlackInfoByBlockUserID(db, blockUserID, loginUserID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getBlackInfoList(blockUserIDListStr) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetBlackInfoList(db, JSON.parse(blockUserIDListStr));\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function insertBlack(localBlackStr) {\n  try {\n    const db = await getInstance();\n    const localBlack = convertToSnakeCaseObject(convertObjectField(JSON.parse(localBlackStr), {\n      userID: 'block_user_id',\n      name: 'nickname'\n    }));\n    databaseInsertBlack(db, localBlack);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteBlack(blockUserID, loginUserID) {\n  try {\n    const db = await getInstance();\n    databasedeleteBlack(db, blockUserID, loginUserID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateBlack(localBlackStr) {\n  try {\n    const db = await getInstance();\n    const localBlack = convertToSnakeCaseObject(convertObjectField(JSON.parse(localBlackStr)));\n    databaseupdateBlack(db, localBlack);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","getBlackList","databaseGetBlackList","getBlackListUserID","databaseGetBlackListUserID","getBlackInfoByBlockUserID","databaseGetBlackInfoByBlockUserID","getBlackInfoList","databaseGetBlackInfoList","insertBlack","databaseInsertBlack","deleteBlack","databasedeleteBlack","updateBlack","databaseupdateBlack","converSqlExecResult","convertObjectField","convertToSnakeCaseObject","formatResponse","getInstance","db","execResult","block_user_id","e","console","error","undefined","ErrorInit","JSON","stringify","blockUserID","loginUserID","blockUserIDListStr","parse","localBlackStr","localBlack","userID","name"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/api/database/black.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { getBlackList as databaseGetBlackList, getBlackListUserID as databaseGetBlackListUserID, getBlackInfoByBlockUserID as databaseGetBlackInfoByBlockUserID, getBlackInfoList as databaseGetBlackInfoList, insertBlack as databaseInsertBlack, deleteBlack as databasedeleteBlack, updateBlack as databaseupdateBlack, } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getBlackList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetBlackList(db);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            block_user_id: 'userID',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getBlackListUserID() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetBlackListUserID(db);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getBlackInfoByBlockUserID(blockUserID, loginUserID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetBlackInfoByBlockUserID(db, blockUserID, loginUserID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getBlackInfoList(blockUserIDListStr) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetBlackInfoList(db, JSON.parse(blockUserIDListStr));\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function insertBlack(localBlackStr) {\n    try {\n        const db = await getInstance();\n        const localBlack = convertToSnakeCaseObject(convertObjectField(JSON.parse(localBlackStr), {\n            userID: 'block_user_id',\n            name: 'nickname',\n        }));\n        databaseInsertBlack(db, localBlack);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteBlack(blockUserID, loginUserID) {\n    try {\n        const db = await getInstance();\n        databasedeleteBlack(db, blockUserID, loginUserID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateBlack(localBlackStr) {\n    try {\n        const db = await getInstance();\n        const localBlack = convertToSnakeCaseObject(convertObjectField(JSON.parse(localBlackStr)));\n        databaseupdateBlack(db, localBlack);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}