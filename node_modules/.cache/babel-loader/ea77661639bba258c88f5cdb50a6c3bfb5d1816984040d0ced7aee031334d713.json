{"ast":null,"code":"import squel from 'squel';\nexport function localSuperGroups(db) {\n  return db.exec(`\n      create table if not exists 'local_super_groups' (\n            'group_id' varchar(64),\n            'name' text,\n            'notification' varchar(255),\n            'introduction' varchar(255),\n            'face_url' varchar(255),\n            'create_time' integer,\n            'status' integer,\n            'creator_user_id' varchar(64),\n            'group_type' integer,\n            'owner_user_id' varchar(64),\n            'member_count' integer,\n            'ex' varchar(1024),\n            'attached_info' varchar(1024),\n            'need_verification' integer,\n            'look_member_info' integer,\n            'apply_member_friend' integer,\n            'notification_update_time' integer,\n            'notification_user_id' text,\n        primary key ('group_id')\n     )\n    `);\n}\nexport function getJoinedSuperGroupList(db) {\n  return db.exec(`\n        select * from local_super_groups;\n    `);\n}\nexport function insertSuperGroup(db, group) {\n  const sql = squel.insert().into('local_super_groups').setFields(group).toString();\n  return db.exec(sql);\n}\nexport function updateSuperGroup(db, groupID, group) {\n  const sql = squel.update().table('local_super_groups').setFields(group).where(`group_id = '${groupID}'`).toString();\n  return db.exec(sql);\n}\nexport function deleteSuperGroup(db, groupID) {\n  return db.exec(`\n        delete from local_super_groups where group_id = '${groupID}';\n    `);\n}\nexport function getSuperGroupInfoByGroupID(db, groupID) {\n  return db.exec(`\n        select * from local_super_groups where group_id = '${groupID}'  LIMIT 1;\n    `);\n}","map":{"version":3,"names":["squel","localSuperGroups","db","exec","getJoinedSuperGroupList","insertSuperGroup","group","sql","insert","into","setFields","toString","updateSuperGroup","groupID","update","table","where","deleteSuperGroup","getSuperGroupInfoByGroupID"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/sqls/localSuperGroups.js"],"sourcesContent":["import squel from 'squel';\nexport function localSuperGroups(db) {\n    return db.exec(`\n      create table if not exists 'local_super_groups' (\n            'group_id' varchar(64),\n            'name' text,\n            'notification' varchar(255),\n            'introduction' varchar(255),\n            'face_url' varchar(255),\n            'create_time' integer,\n            'status' integer,\n            'creator_user_id' varchar(64),\n            'group_type' integer,\n            'owner_user_id' varchar(64),\n            'member_count' integer,\n            'ex' varchar(1024),\n            'attached_info' varchar(1024),\n            'need_verification' integer,\n            'look_member_info' integer,\n            'apply_member_friend' integer,\n            'notification_update_time' integer,\n            'notification_user_id' text,\n        primary key ('group_id')\n     )\n    `);\n}\nexport function getJoinedSuperGroupList(db) {\n    return db.exec(`\n        select * from local_super_groups;\n    `);\n}\nexport function insertSuperGroup(db, group) {\n    const sql = squel\n        .insert()\n        .into('local_super_groups')\n        .setFields(group)\n        .toString();\n    return db.exec(sql);\n}\nexport function updateSuperGroup(db, groupID, group) {\n    const sql = squel\n        .update()\n        .table('local_super_groups')\n        .setFields(group)\n        .where(`group_id = '${groupID}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteSuperGroup(db, groupID) {\n    return db.exec(`\n        delete from local_super_groups where group_id = '${groupID}';\n    `);\n}\nexport function getSuperGroupInfoByGroupID(db, groupID) {\n    return db.exec(`\n        select * from local_super_groups where group_id = '${groupID}'  LIMIT 1;\n    `);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,gBAAgBA,CAACC,EAAE,EAAE;EACjC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;AACN;AACA,OAAO,SAASC,uBAAuBA,CAACF,EAAE,EAAE;EACxC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA,KAAK,CAAC;AACN;AACA,OAAO,SAASE,gBAAgBA,CAACH,EAAE,EAAEI,KAAK,EAAE;EACxC,MAAMC,GAAG,GAAGP,KAAK,CACZQ,MAAM,CAAC,CAAC,CACRC,IAAI,CAAC,oBAAoB,CAAC,CAC1BC,SAAS,CAACJ,KAAK,CAAC,CAChBK,QAAQ,CAAC,CAAC;EACf,OAAOT,EAAE,CAACC,IAAI,CAACI,GAAG,CAAC;AACvB;AACA,OAAO,SAASK,gBAAgBA,CAACV,EAAE,EAAEW,OAAO,EAAEP,KAAK,EAAE;EACjD,MAAMC,GAAG,GAAGP,KAAK,CACZc,MAAM,CAAC,CAAC,CACRC,KAAK,CAAC,oBAAoB,CAAC,CAC3BL,SAAS,CAACJ,KAAK,CAAC,CAChBU,KAAK,CAAE,eAAcH,OAAQ,GAAE,CAAC,CAChCF,QAAQ,CAAC,CAAC;EACf,OAAOT,EAAE,CAACC,IAAI,CAACI,GAAG,CAAC;AACvB;AACA,OAAO,SAASU,gBAAgBA,CAACf,EAAE,EAAEW,OAAO,EAAE;EAC1C,OAAOX,EAAE,CAACC,IAAI,CAAE;AACpB,2DAA2DU,OAAQ;AACnE,KAAK,CAAC;AACN;AACA,OAAO,SAASK,0BAA0BA,CAAChB,EAAE,EAAEW,OAAO,EAAE;EACpD,OAAOX,EAAE,CAACC,IAAI,CAAE;AACpB,6DAA6DU,OAAQ;AACrE,KAAK,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}