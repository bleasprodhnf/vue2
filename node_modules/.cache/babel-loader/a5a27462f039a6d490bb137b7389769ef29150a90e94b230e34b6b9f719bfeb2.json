{"ast":null,"code":"import squel from 'squel';\nexport function localErrChatLogs(db) {\n  return db.exec(`\n    create table if not exists 'local_err_chat_logs' (\n        'seq' integer,\n        'client_msg_id' char(64),\n        'server_msg_id' char(64),\n        'send_id' char(64),\n        'recv_id' char(64),\n        'sender_platform_id' integer,\n        'sender_nick_name' varchar(255),\n        'sender_face_url' varchar(255),\n        'session_type' integer,\n        'msg_from' integer,\n        'content_type' integer,\n        'content' varchar(1000),\n        'is_read' numeric,\n        'status' integer,\n        'send_time' integer,\n        'create_time' integer,\n        'attached_info' varchar(1024),\n        'ex' varchar(1024),\n        PRIMARY KEY ('seq')\n      );\n      `);\n}\nexport function getAbnormalMsgSeq(db) {\n  return db.exec(`\n      select ifnull(max(seq),0) from local_err_chat_logs;\n      `);\n}\nexport function getAbnormalMsgSeqList(db) {\n  return db.exec(`\n    SELECT seq FROM local_err_chat_logs\n      `);\n}\nexport function batchInsertExceptionMsg(db, messageList) {\n  const sql = squel.insert().into('local_err_chat_logs').setFieldsRows(messageList).toString();\n  return db.exec(sql);\n}\nexport function isExistsInErrChatLogBySeq(db, seq) {\n  return db.exec(`\n          select count(*) from local_err_chat_logs\n          where \n              seq = ${seq};\n      `);\n}","map":{"version":3,"names":["squel","localErrChatLogs","db","exec","getAbnormalMsgSeq","getAbnormalMsgSeqList","batchInsertExceptionMsg","messageList","sql","insert","into","setFieldsRows","toString","isExistsInErrChatLogBySeq","seq"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/sqls/localErrChatLogs.js"],"sourcesContent":["import squel from 'squel';\nexport function localErrChatLogs(db) {\n    return db.exec(`\n    create table if not exists 'local_err_chat_logs' (\n        'seq' integer,\n        'client_msg_id' char(64),\n        'server_msg_id' char(64),\n        'send_id' char(64),\n        'recv_id' char(64),\n        'sender_platform_id' integer,\n        'sender_nick_name' varchar(255),\n        'sender_face_url' varchar(255),\n        'session_type' integer,\n        'msg_from' integer,\n        'content_type' integer,\n        'content' varchar(1000),\n        'is_read' numeric,\n        'status' integer,\n        'send_time' integer,\n        'create_time' integer,\n        'attached_info' varchar(1024),\n        'ex' varchar(1024),\n        PRIMARY KEY ('seq')\n      );\n      `);\n}\nexport function getAbnormalMsgSeq(db) {\n    return db.exec(`\n      select ifnull(max(seq),0) from local_err_chat_logs;\n      `);\n}\nexport function getAbnormalMsgSeqList(db) {\n    return db.exec(`\n    SELECT seq FROM local_err_chat_logs\n      `);\n}\nexport function batchInsertExceptionMsg(db, messageList) {\n    const sql = squel\n        .insert()\n        .into('local_err_chat_logs')\n        .setFieldsRows(messageList)\n        .toString();\n    return db.exec(sql);\n}\nexport function isExistsInErrChatLogBySeq(db, seq) {\n    return db.exec(`\n          select count(*) from local_err_chat_logs\n          where \n              seq = ${seq};\n      `);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,gBAAgBA,CAACC,EAAE,EAAE;EACjC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASC,iBAAiBA,CAACF,EAAE,EAAE;EAClC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASE,qBAAqBA,CAACH,EAAE,EAAE;EACtC,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA,OAAO,CAAC;AACR;AACA,OAAO,SAASG,uBAAuBA,CAACJ,EAAE,EAAEK,WAAW,EAAE;EACrD,MAAMC,GAAG,GAAGR,KAAK,CACZS,MAAM,CAAC,CAAC,CACRC,IAAI,CAAC,qBAAqB,CAAC,CAC3BC,aAAa,CAACJ,WAAW,CAAC,CAC1BK,QAAQ,CAAC,CAAC;EACf,OAAOV,EAAE,CAACC,IAAI,CAACK,GAAG,CAAC;AACvB;AACA,OAAO,SAASK,yBAAyBA,CAACX,EAAE,EAAEY,GAAG,EAAE;EAC/C,OAAOZ,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA,sBAAsBW,GAAI;AAC1B,OAAO,CAAC;AACR"},"metadata":{},"sourceType":"module","externalDependencies":[]}