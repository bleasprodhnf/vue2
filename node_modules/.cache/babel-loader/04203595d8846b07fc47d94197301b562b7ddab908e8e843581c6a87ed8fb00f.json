{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport initSqlJs from '@jlongster/sql.js';\nimport { SQLiteFS } from 'absurd-sql-optimized';\nimport IndexedDBBackend from 'absurd-sql-optimized/dist/indexeddb-backend';\nself.$RefreshReg$ = () => {};\nself.$RefreshSig$ = () => () => {};\nlet instance;\nlet SQL;\nasync function InitializeDB(filePath) {\n  if (!SQL) {\n    SQL = await initSqlJs({\n      locateFile: () => '/sql-wasm.wasm'\n    });\n    // SQL = await initSqlJs({ locateFile: () => '../../sql-wasm.wasm' });\n    const sqlFS = new SQLiteFS(SQL.FS, new IndexedDBBackend());\n    SQL.register_for_idb(sqlFS);\n    SQL.FS.mkdir('/sql');\n    SQL.FS.mount(sqlFS, {}, '/sql');\n  }\n  const path = `/sql/${filePath}`;\n  const db = new SQL.Database(path, {\n    filename: true\n  });\n  if (typeof SharedArrayBuffer === 'undefined') {\n    // @ts-ignore\n    const stream = SQL.FS.open(path, 'a+');\n    await stream.node.contents.readIfFallback();\n    // @ts-ignore\n    SQL.FS.close(stream);\n  }\n  db.exec(`\n    PRAGMA page_size=8192;\n    PRAGMA journal_mode=MEMORY;\n  `);\n  return db;\n}\nexport function getInstance(filePath) {\n  if (instance) {\n    return instance;\n  }\n  if (!filePath) {\n    throw new Error('must speciefic database file');\n  }\n  instance = new Promise((resolve, reject) => {\n    const db = InitializeDB(filePath);\n    db.then(res => resolve(res)).catch(err => reject(err));\n  });\n  return instance;\n}\nexport async function resetInstance() {\n  if (!instance) {\n    return;\n  }\n  const db = await instance;\n  db.close();\n  instance = undefined;\n}","map":{"version":3,"names":["initSqlJs","SQLiteFS","IndexedDBBackend","self","$RefreshReg$","$RefreshSig$","instance","SQL","InitializeDB","filePath","locateFile","sqlFS","FS","register_for_idb","mkdir","mount","path","db","Database","filename","SharedArrayBuffer","stream","open","node","contents","readIfFallback","close","exec","getInstance","Error","Promise","resolve","reject","then","res","catch","err","resetInstance","undefined"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/api/database/instance.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport initSqlJs from '@jlongster/sql.js';\nimport { SQLiteFS } from 'absurd-sql-optimized';\nimport IndexedDBBackend from 'absurd-sql-optimized/dist/indexeddb-backend';\nself.$RefreshReg$ = () => { };\nself.$RefreshSig$ = () => () => { };\nlet instance;\nlet SQL;\nasync function InitializeDB(filePath) {\n    if (!SQL) {\n        SQL = await initSqlJs({ locateFile: () => '/sql-wasm.wasm' });\n       // SQL = await initSqlJs({ locateFile: () => '../../sql-wasm.wasm' });\n        const sqlFS = new SQLiteFS(SQL.FS, new IndexedDBBackend());\n        SQL.register_for_idb(sqlFS);\n        SQL.FS.mkdir('/sql');\n        SQL.FS.mount(sqlFS, {}, '/sql');\n    }\n    const path = `/sql/${filePath}`;\n    const db = new SQL.Database(path, { filename: true });\n    if (typeof SharedArrayBuffer === 'undefined') {\n        // @ts-ignore\n        const stream = SQL.FS.open(path, 'a+');\n        await stream.node.contents.readIfFallback();\n        // @ts-ignore\n        SQL.FS.close(stream);\n    }\n    db.exec(`\n    PRAGMA page_size=8192;\n    PRAGMA journal_mode=MEMORY;\n  `);\n    return db;\n}\nexport function getInstance(filePath) {\n    if (instance) {\n        return instance;\n    }\n    if (!filePath) {\n        throw new Error('must speciefic database file');\n    }\n    instance = new Promise((resolve, reject) => {\n        const db = InitializeDB(filePath);\n        db.then(res => resolve(res)).catch(err => reject(err));\n    });\n    return instance;\n}\nexport async function resetInstance() {\n    if (!instance) {\n        return;\n    }\n    const db = await instance;\n    db.close();\n    instance = undefined;\n}\n"],"mappings":"AAAA;AACA;AACA,OAAOA,SAAS,MAAM,mBAAmB;AACzC,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,gBAAgB,MAAM,6CAA6C;AAC1EC,IAAI,CAACC,YAAY,GAAG,MAAM,CAAE,CAAC;AAC7BD,IAAI,CAACE,YAAY,GAAG,MAAM,MAAM,CAAE,CAAC;AACnC,IAAIC,QAAQ;AACZ,IAAIC,GAAG;AACP,eAAeC,YAAYA,CAACC,QAAQ,EAAE;EAClC,IAAI,CAACF,GAAG,EAAE;IACNA,GAAG,GAAG,MAAMP,SAAS,CAAC;MAAEU,UAAU,EAAEA,CAAA,KAAM;IAAiB,CAAC,CAAC;IAC9D;IACC,MAAMC,KAAK,GAAG,IAAIV,QAAQ,CAACM,GAAG,CAACK,EAAE,EAAE,IAAIV,gBAAgB,CAAC,CAAC,CAAC;IAC1DK,GAAG,CAACM,gBAAgB,CAACF,KAAK,CAAC;IAC3BJ,GAAG,CAACK,EAAE,CAACE,KAAK,CAAC,MAAM,CAAC;IACpBP,GAAG,CAACK,EAAE,CAACG,KAAK,CAACJ,KAAK,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC;EACnC;EACA,MAAMK,IAAI,GAAI,QAAOP,QAAS,EAAC;EAC/B,MAAMQ,EAAE,GAAG,IAAIV,GAAG,CAACW,QAAQ,CAACF,IAAI,EAAE;IAAEG,QAAQ,EAAE;EAAK,CAAC,CAAC;EACrD,IAAI,OAAOC,iBAAiB,KAAK,WAAW,EAAE;IAC1C;IACA,MAAMC,MAAM,GAAGd,GAAG,CAACK,EAAE,CAACU,IAAI,CAACN,IAAI,EAAE,IAAI,CAAC;IACtC,MAAMK,MAAM,CAACE,IAAI,CAACC,QAAQ,CAACC,cAAc,CAAC,CAAC;IAC3C;IACAlB,GAAG,CAACK,EAAE,CAACc,KAAK,CAACL,MAAM,CAAC;EACxB;EACAJ,EAAE,CAACU,IAAI,CAAE;AACb;AACA;AACA,GAAG,CAAC;EACA,OAAOV,EAAE;AACb;AACA,OAAO,SAASW,WAAWA,CAACnB,QAAQ,EAAE;EAClC,IAAIH,QAAQ,EAAE;IACV,OAAOA,QAAQ;EACnB;EACA,IAAI,CAACG,QAAQ,EAAE;IACX,MAAM,IAAIoB,KAAK,CAAC,8BAA8B,CAAC;EACnD;EACAvB,QAAQ,GAAG,IAAIwB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACxC,MAAMf,EAAE,GAAGT,YAAY,CAACC,QAAQ,CAAC;IACjCQ,EAAE,CAACgB,IAAI,CAACC,GAAG,IAAIH,OAAO,CAACG,GAAG,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAIJ,MAAM,CAACI,GAAG,CAAC,CAAC;EAC1D,CAAC,CAAC;EACF,OAAO9B,QAAQ;AACnB;AACA,OAAO,eAAe+B,aAAaA,CAAA,EAAG;EAClC,IAAI,CAAC/B,QAAQ,EAAE;IACX;EACJ;EACA,MAAMW,EAAE,GAAG,MAAMX,QAAQ;EACzBW,EAAE,CAACS,KAAK,CAAC,CAAC;EACVpB,QAAQ,GAAGgC,SAAS;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}