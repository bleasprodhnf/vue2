{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { getJoinedSuperGroupList as databaseGetJoinedSuperGroupList, insertSuperGroup as databaseInsertSuperGroup, updateSuperGroup as databaseUpdateSuperGroup, deleteSuperGroup as databaseDeleteSuperGroup, getSuperGroupInfoByGroupID as databaseGetSuperGroupInfoByGroupID } from '../../sqls';\nimport { formatResponse, converSqlExecResult, convertToSnakeCaseObject, convertObjectField } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getJoinedSuperGroupList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetJoinedSuperGroupList(db);\n    return formatResponse(converSqlExecResult(execResult[0]));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getJoinedSuperGroupIDList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetJoinedSuperGroupList(db);\n    const records = converSqlExecResult(execResult[0]);\n    const groupIds = records.map(r => r.groupID);\n    return formatResponse(groupIds);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getSuperGroupInfoByGroupID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetSuperGroupInfoByGroupID(db, groupID);\n    if (execResult.length === 0) {\n      return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no super group with id ${groupID}`);\n    }\n    return formatResponse(converSqlExecResult(execResult[0])[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteSuperGroup(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseDeleteSuperGroup(db, groupID);\n    return formatResponse(execResult);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function insertSuperGroup(groupStr) {\n  try {\n    const db = await getInstance();\n    const group = convertToSnakeCaseObject(convertObjectField(JSON.parse(groupStr), {\n      groupName: 'name'\n    }));\n    const execResult = databaseInsertSuperGroup(db, group);\n    return formatResponse(execResult);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateSuperGroup(groupID, groupStr) {\n  try {\n    const db = await getInstance();\n    const group = convertToSnakeCaseObject(convertObjectField(JSON.parse(groupStr), {\n      groupName: 'name'\n    }));\n    const execResult = databaseUpdateSuperGroup(db, groupID, group);\n    const modifed = db.getRowsModified();\n    if (modifed === 0) {\n      throw 'updateSuperGroup no record updated';\n    }\n    return formatResponse(execResult);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","getJoinedSuperGroupList","databaseGetJoinedSuperGroupList","insertSuperGroup","databaseInsertSuperGroup","updateSuperGroup","databaseUpdateSuperGroup","deleteSuperGroup","databaseDeleteSuperGroup","getSuperGroupInfoByGroupID","databaseGetSuperGroupInfoByGroupID","formatResponse","converSqlExecResult","convertToSnakeCaseObject","convertObjectField","getInstance","db","execResult","e","console","error","undefined","ErrorInit","JSON","stringify","getJoinedSuperGroupIDList","records","groupIds","map","r","groupID","length","ErrorNoRecord","groupStr","group","parse","groupName","modifed","getRowsModified"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/api/database/superGroup.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { getJoinedSuperGroupList as databaseGetJoinedSuperGroupList, insertSuperGroup as databaseInsertSuperGroup, updateSuperGroup as databaseUpdateSuperGroup, deleteSuperGroup as databaseDeleteSuperGroup, getSuperGroupInfoByGroupID as databaseGetSuperGroupInfoByGroupID, } from '../../sqls';\nimport { formatResponse, converSqlExecResult, convertToSnakeCaseObject, convertObjectField, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getJoinedSuperGroupList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetJoinedSuperGroupList(db);\n        return formatResponse(converSqlExecResult(execResult[0]));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getJoinedSuperGroupIDList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetJoinedSuperGroupList(db);\n        const records = converSqlExecResult(execResult[0]);\n        const groupIds = records.map(r => r.groupID);\n        return formatResponse(groupIds);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getSuperGroupInfoByGroupID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetSuperGroupInfoByGroupID(db, groupID);\n        if (execResult.length === 0) {\n            return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no super group with id ${groupID}`);\n        }\n        return formatResponse(converSqlExecResult(execResult[0])[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteSuperGroup(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseDeleteSuperGroup(db, groupID);\n        return formatResponse(execResult);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function insertSuperGroup(groupStr) {\n    try {\n        const db = await getInstance();\n        const group = convertToSnakeCaseObject(convertObjectField(JSON.parse(groupStr), { groupName: 'name' }));\n        const execResult = databaseInsertSuperGroup(db, group);\n        return formatResponse(execResult);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateSuperGroup(groupID, groupStr) {\n    try {\n        const db = await getInstance();\n        const group = convertToSnakeCaseObject(convertObjectField(JSON.parse(groupStr), { groupName: 'name' }));\n        const execResult = databaseUpdateSuperGroup(db, groupID, group);\n        const modifed = db.getRowsModified();\n        if (modifed === 0) {\n            throw 'updateSuperGroup no record updated';\n        }\n        return formatResponse(execResult);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}