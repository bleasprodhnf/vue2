{"ast":null,"code":"import squel from 'squel';\nexport function localUsers(db) {\n  return db.exec(`\n      create table if not exists 'local_users' (\n            'user_id' varchar(64),\n            'name' varchar(255),\n            'face_url' varchar(255),\n            'gender' integer,\n            'phone_number' varchar(32),\n            'birth' integer,\n            'email' varchar(64),\n            'create_time' integer,\n            'birth_time' varchar(64),\n            'app_manger_level' integer,\n            'ex' varchar(1024),\n            'attached_info' varchar(1024),\n            'global_recv_msg_opt' integer,\n             primary key ('user_id')\n        )\n    `);\n}\nexport function getLoginUser(db, userID) {\n  return db.exec(`\n        select *, name as nickname from local_users where user_id = '${userID}'  limit 1;\n    `);\n}\nexport function insertLoginUser(db, user) {\n  const sql = squel.insert().into('local_users').setFields(user).toString();\n  return db.exec(sql);\n}\nexport function updateLoginUserByMap(db, userID, user) {\n  const sql = squel.update().table('local_users').setFields(user).where(`user_id = '${userID}'`).toString();\n  return db.exec(sql);\n}","map":{"version":3,"names":["squel","localUsers","db","exec","getLoginUser","userID","insertLoginUser","user","sql","insert","into","setFields","toString","updateLoginUserByMap","update","table","where"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/sqls/localUsers.js"],"sourcesContent":["import squel from 'squel';\nexport function localUsers(db) {\n    return db.exec(`\n      create table if not exists 'local_users' (\n            'user_id' varchar(64),\n            'name' varchar(255),\n            'face_url' varchar(255),\n            'gender' integer,\n            'phone_number' varchar(32),\n            'birth' integer,\n            'email' varchar(64),\n            'create_time' integer,\n            'birth_time' varchar(64),\n            'app_manger_level' integer,\n            'ex' varchar(1024),\n            'attached_info' varchar(1024),\n            'global_recv_msg_opt' integer,\n             primary key ('user_id')\n        )\n    `);\n}\nexport function getLoginUser(db, userID) {\n    return db.exec(`\n        select *, name as nickname from local_users where user_id = '${userID}'  limit 1;\n    `);\n}\nexport function insertLoginUser(db, user) {\n    const sql = squel.insert().into('local_users').setFields(user).toString();\n    return db.exec(sql);\n}\nexport function updateLoginUserByMap(db, userID, user) {\n    const sql = squel\n        .update()\n        .table('local_users')\n        .setFields(user)\n        .where(`user_id = '${userID}'`)\n        .toString();\n    return db.exec(sql);\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,SAASC,UAAUA,CAACC,EAAE,EAAE;EAC3B,OAAOA,EAAE,CAACC,IAAI,CAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;AACN;AACA,OAAO,SAASC,YAAYA,CAACF,EAAE,EAAEG,MAAM,EAAE;EACrC,OAAOH,EAAE,CAACC,IAAI,CAAE;AACpB,uEAAuEE,MAAO;AAC9E,KAAK,CAAC;AACN;AACA,OAAO,SAASC,eAAeA,CAACJ,EAAE,EAAEK,IAAI,EAAE;EACtC,MAAMC,GAAG,GAAGR,KAAK,CAACS,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC,CAACC,SAAS,CAACJ,IAAI,CAAC,CAACK,QAAQ,CAAC,CAAC;EACzE,OAAOV,EAAE,CAACC,IAAI,CAACK,GAAG,CAAC;AACvB;AACA,OAAO,SAASK,oBAAoBA,CAACX,EAAE,EAAEG,MAAM,EAAEE,IAAI,EAAE;EACnD,MAAMC,GAAG,GAAGR,KAAK,CACZc,MAAM,CAAC,CAAC,CACRC,KAAK,CAAC,aAAa,CAAC,CACpBJ,SAAS,CAACJ,IAAI,CAAC,CACfS,KAAK,CAAE,cAAaX,MAAO,GAAE,CAAC,CAC9BO,QAAQ,CAAC,CAAC;EACf,OAAOV,EAAE,CAACC,IAAI,CAACK,GAAG,CAAC;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}