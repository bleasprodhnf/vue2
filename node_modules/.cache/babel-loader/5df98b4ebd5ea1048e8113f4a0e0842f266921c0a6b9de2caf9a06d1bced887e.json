{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { escapeString } from './escape';\nimport { isString } from './is';\nimport { convertSnakeCaseToCamelCase, convertCamelCaseToSnakeCase } from './key';\nexport function converSqlExecResult(record, keyType = 'CamelCase', booleanKeys = [], convertMap = {}) {\n  const {\n    columns = [],\n    values = []\n  } = record || {};\n  const result = [];\n  values.forEach(v => {\n    const converted = {};\n    columns.forEach((k, i) => {\n      let ck = k;\n      let cv = v[i];\n      if (keyType === 'CamelCase') {\n        ck = convertSnakeCaseToCamelCase(k);\n      }\n      if (keyType === 'SnakeCase') {\n        ck = convertCamelCaseToSnakeCase(k);\n      }\n      if (booleanKeys.find(bk => bk === ck)) {\n        cv = !!cv;\n      }\n      ck = convertMap[k] || ck;\n      converted[ck] = cv;\n    });\n    result.push(converted);\n  });\n  return result;\n}\nexport function convertToCamelCaseObject(obj) {\n  const retObj = {};\n  Object.keys(obj).forEach(k => {\n    retObj[convertSnakeCaseToCamelCase(k)] = obj[k];\n  });\n  return retObj;\n}\nexport function convertToSnakeCaseObject(obj, escape = true) {\n  const retObj = {};\n  Object.keys(obj).forEach(k => {\n    let value = obj[k];\n    if (escape && isString(value)) {\n      value = escapeString(value).slice(1, -1);\n    }\n    retObj[convertCamelCaseToSnakeCase(k)] = value;\n  });\n  return retObj;\n}\nexport function convertObjectField(obj, convertMap = {}) {\n  const ret = {};\n  Object.keys(obj).forEach(k => {\n    const nk = convertMap[k] || k;\n    ret[nk] = obj[k];\n  });\n  return ret;\n}","map":{"version":3,"names":["escapeString","isString","convertSnakeCaseToCamelCase","convertCamelCaseToSnakeCase","converSqlExecResult","record","keyType","booleanKeys","convertMap","columns","values","result","forEach","v","converted","k","i","ck","cv","find","bk","push","convertToCamelCaseObject","obj","retObj","Object","keys","convertToSnakeCaseObject","escape","value","slice","convertObjectField","ret","nk"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/utils/value.js"],"sourcesContent":["import { escapeString } from './escape';\nimport { isString } from './is';\nimport { convertSnakeCaseToCamelCase, convertCamelCaseToSnakeCase, } from './key';\nexport function converSqlExecResult(record, keyType = 'CamelCase', booleanKeys = [], convertMap = {}) {\n    const { columns = [], values = [] } = record || {};\n    const result = [];\n    values.forEach(v => {\n        const converted = {};\n        columns.forEach((k, i) => {\n            let ck = k;\n            let cv = v[i];\n            if (keyType === 'CamelCase') {\n                ck = convertSnakeCaseToCamelCase(k);\n            }\n            if (keyType === 'SnakeCase') {\n                ck = convertCamelCaseToSnakeCase(k);\n            }\n            if (booleanKeys.find(bk => bk === ck)) {\n                cv = !!cv;\n            }\n            ck = convertMap[k] || ck;\n            converted[ck] = cv;\n        });\n        result.push(converted);\n    });\n    return result;\n}\nexport function convertToCamelCaseObject(obj) {\n    const retObj = {};\n    Object.keys(obj).forEach(k => {\n        retObj[convertSnakeCaseToCamelCase(k)] = obj[k];\n    });\n    return retObj;\n}\nexport function convertToSnakeCaseObject(obj, escape = true) {\n    const retObj = {};\n    Object.keys(obj).forEach(k => {\n        let value = obj[k];\n        if (escape && isString(value)) {\n            value = escapeString(value).slice(1, -1);\n        }\n        retObj[convertCamelCaseToSnakeCase(k)] = value;\n    });\n    return retObj;\n}\nexport function convertObjectField(obj, convertMap = {}) {\n    const ret = {};\n    Object.keys(obj).forEach(k => {\n        const nk = convertMap[k] || k;\n        ret[nk] = obj[k];\n    });\n    return ret;\n}\n"],"mappings":";AAAA,SAASA,YAAY,QAAQ,UAAU;AACvC,SAASC,QAAQ,QAAQ,MAAM;AAC/B,SAASC,2BAA2B,EAAEC,2BAA2B,QAAS,OAAO;AACjF,OAAO,SAASC,mBAAmBA,CAACC,MAAM,EAAEC,OAAO,GAAG,WAAW,EAAEC,WAAW,GAAG,EAAE,EAAEC,UAAU,GAAG,CAAC,CAAC,EAAE;EAClG,MAAM;IAAEC,OAAO,GAAG,EAAE;IAAEC,MAAM,GAAG;EAAG,CAAC,GAAGL,MAAM,IAAI,CAAC,CAAC;EAClD,MAAMM,MAAM,GAAG,EAAE;EACjBD,MAAM,CAACE,OAAO,CAACC,CAAC,IAAI;IAChB,MAAMC,SAAS,GAAG,CAAC,CAAC;IACpBL,OAAO,CAACG,OAAO,CAAC,CAACG,CAAC,EAAEC,CAAC,KAAK;MACtB,IAAIC,EAAE,GAAGF,CAAC;MACV,IAAIG,EAAE,GAAGL,CAAC,CAACG,CAAC,CAAC;MACb,IAAIV,OAAO,KAAK,WAAW,EAAE;QACzBW,EAAE,GAAGf,2BAA2B,CAACa,CAAC,CAAC;MACvC;MACA,IAAIT,OAAO,KAAK,WAAW,EAAE;QACzBW,EAAE,GAAGd,2BAA2B,CAACY,CAAC,CAAC;MACvC;MACA,IAAIR,WAAW,CAACY,IAAI,CAACC,EAAE,IAAIA,EAAE,KAAKH,EAAE,CAAC,EAAE;QACnCC,EAAE,GAAG,CAAC,CAACA,EAAE;MACb;MACAD,EAAE,GAAGT,UAAU,CAACO,CAAC,CAAC,IAAIE,EAAE;MACxBH,SAAS,CAACG,EAAE,CAAC,GAAGC,EAAE;IACtB,CAAC,CAAC;IACFP,MAAM,CAACU,IAAI,CAACP,SAAS,CAAC;EAC1B,CAAC,CAAC;EACF,OAAOH,MAAM;AACjB;AACA,OAAO,SAASW,wBAAwBA,CAACC,GAAG,EAAE;EAC1C,MAAMC,MAAM,GAAG,CAAC,CAAC;EACjBC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACX,OAAO,CAACG,CAAC,IAAI;IAC1BS,MAAM,CAACtB,2BAA2B,CAACa,CAAC,CAAC,CAAC,GAAGQ,GAAG,CAACR,CAAC,CAAC;EACnD,CAAC,CAAC;EACF,OAAOS,MAAM;AACjB;AACA,OAAO,SAASG,wBAAwBA,CAACJ,GAAG,EAAEK,MAAM,GAAG,IAAI,EAAE;EACzD,MAAMJ,MAAM,GAAG,CAAC,CAAC;EACjBC,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACX,OAAO,CAACG,CAAC,IAAI;IAC1B,IAAIc,KAAK,GAAGN,GAAG,CAACR,CAAC,CAAC;IAClB,IAAIa,MAAM,IAAI3B,QAAQ,CAAC4B,KAAK,CAAC,EAAE;MAC3BA,KAAK,GAAG7B,YAAY,CAAC6B,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C;IACAN,MAAM,CAACrB,2BAA2B,CAACY,CAAC,CAAC,CAAC,GAAGc,KAAK;EAClD,CAAC,CAAC;EACF,OAAOL,MAAM;AACjB;AACA,OAAO,SAASO,kBAAkBA,CAACR,GAAG,EAAEf,UAAU,GAAG,CAAC,CAAC,EAAE;EACrD,MAAMwB,GAAG,GAAG,CAAC,CAAC;EACdP,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACX,OAAO,CAACG,CAAC,IAAI;IAC1B,MAAMkB,EAAE,GAAGzB,UAAU,CAACO,CAAC,CAAC,IAAIA,CAAC;IAC7BiB,GAAG,CAACC,EAAE,CAAC,GAAGV,GAAG,CAACR,CAAC,CAAC;EACpB,CAAC,CAAC;EACF,OAAOiB,GAAG;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}