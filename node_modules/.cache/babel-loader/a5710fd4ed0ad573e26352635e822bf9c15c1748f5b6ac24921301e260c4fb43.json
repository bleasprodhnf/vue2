{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { DatabaseErrorCode } from '../../constant';\nimport { insertGroup as databaseInsertGroup, deleteGroup as databasedeleteGroup, updateGroup as databaseupdateGroup, getJoinedGroupList as databaseGetJoinedGroupList, getGroupInfoByGroupID as databaseGetGroupInfoByGroupID, getAllGroupInfoByGroupIDOrGroupName as databaseGetAllGroupInfoByGroupIDOrGroupName, subtractMemberCount as databasesubtractMemberCount, addMemberCount as databaseaddMemberCount } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertGroup(localGroupStr) {\n  try {\n    const db = await getInstance();\n    const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupStr), {\n      groupName: 'name'\n    }));\n    databaseInsertGroup(db, localGroup);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteGroup(groupID) {\n  try {\n    const db = await getInstance();\n    databasedeleteGroup(db, groupID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateGroup(groupID, localGroupStr) {\n  try {\n    const db = await getInstance();\n    const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupStr), {\n      groupName: 'name'\n    }));\n    databaseupdateGroup(db, groupID, localGroup);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getJoinedGroupList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetJoinedGroupList(db);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'groupName'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupInfoByGroupID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupInfoByGroupID(db, groupID);\n    if (execResult.length === 0) {\n      return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no group with id ${groupID}`);\n    }\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'groupName'\n    })[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getAllGroupInfoByGroupIDOrGroupName(keyword, isSearchGroupID, isSearchGroupName) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetAllGroupInfoByGroupIDOrGroupName(db, keyword, isSearchGroupID, isSearchGroupName);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'groupName'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function subtractMemberCount(groupID) {\n  try {\n    const db = await getInstance();\n    databasesubtractMemberCount(db, groupID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function addMemberCount(groupID) {\n  try {\n    const db = await getInstance();\n    databaseaddMemberCount(db, groupID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getJoinedWorkingGroupIDList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetJoinedGroupList(db);\n    const allJoinedGroupList = converSqlExecResult(execResult[0], 'CamelCase');\n    const filterIDList = [];\n    allJoinedGroupList.forEach(group => {\n      if (group.groupType === 2) {\n        filterIDList.push(group.groupID);\n      }\n    });\n    return formatResponse(JSON.stringify(filterIDList));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getJoinedWorkingGroupList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetJoinedGroupList(db);\n    const allJoinedGroupList = converSqlExecResult(execResult[0], 'CamelCase', [], {\n      name: 'groupName'\n    });\n    const filterList = allJoinedGroupList.filter(group => group.group_type === 2);\n    return formatResponse(JSON.stringify(filterList));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","insertGroup","databaseInsertGroup","deleteGroup","databasedeleteGroup","updateGroup","databaseupdateGroup","getJoinedGroupList","databaseGetJoinedGroupList","getGroupInfoByGroupID","databaseGetGroupInfoByGroupID","getAllGroupInfoByGroupIDOrGroupName","databaseGetAllGroupInfoByGroupIDOrGroupName","subtractMemberCount","databasesubtractMemberCount","addMemberCount","databaseaddMemberCount","converSqlExecResult","convertObjectField","convertToSnakeCaseObject","formatResponse","getInstance","localGroupStr","db","localGroup","JSON","parse","groupName","e","console","error","undefined","ErrorInit","stringify","groupID","execResult","name","length","ErrorNoRecord","keyword","isSearchGroupID","isSearchGroupName","getJoinedWorkingGroupIDList","allJoinedGroupList","filterIDList","forEach","group","groupType","push","getJoinedWorkingGroupList","filterList","filter","group_type"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/api/database/groups.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { insertGroup as databaseInsertGroup, deleteGroup as databasedeleteGroup, updateGroup as databaseupdateGroup, getJoinedGroupList as databaseGetJoinedGroupList, getGroupInfoByGroupID as databaseGetGroupInfoByGroupID, getAllGroupInfoByGroupIDOrGroupName as databaseGetAllGroupInfoByGroupIDOrGroupName, subtractMemberCount as databasesubtractMemberCount, addMemberCount as databaseaddMemberCount, } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function insertGroup(localGroupStr) {\n    try {\n        const db = await getInstance();\n        const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupStr), { groupName: 'name' }));\n        databaseInsertGroup(db, localGroup);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteGroup(groupID) {\n    try {\n        const db = await getInstance();\n        databasedeleteGroup(db, groupID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateGroup(groupID, localGroupStr) {\n    try {\n        const db = await getInstance();\n        const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupStr), { groupName: 'name' }));\n        databaseupdateGroup(db, groupID, localGroup);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getJoinedGroupList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetJoinedGroupList(db);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], { name: 'groupName' }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupInfoByGroupID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupInfoByGroupID(db, groupID);\n        if (execResult.length === 0) {\n            return formatResponse('', DatabaseErrorCode.ErrorNoRecord, `no group with id ${groupID}`);\n        }\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            name: 'groupName',\n        })[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getAllGroupInfoByGroupIDOrGroupName(keyword, isSearchGroupID, isSearchGroupName) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetAllGroupInfoByGroupIDOrGroupName(db, keyword, isSearchGroupID, isSearchGroupName);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], { name: 'groupName' }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function subtractMemberCount(groupID) {\n    try {\n        const db = await getInstance();\n        databasesubtractMemberCount(db, groupID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function addMemberCount(groupID) {\n    try {\n        const db = await getInstance();\n        databaseaddMemberCount(db, groupID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getJoinedWorkingGroupIDList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetJoinedGroupList(db);\n        const allJoinedGroupList = converSqlExecResult(execResult[0], 'CamelCase');\n        const filterIDList = [];\n        allJoinedGroupList.forEach(group => {\n            if (group.groupType === 2) {\n                filterIDList.push(group.groupID);\n            }\n        });\n        return formatResponse(JSON.stringify(filterIDList));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getJoinedWorkingGroupList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetJoinedGroupList(db);\n        const allJoinedGroupList = converSqlExecResult(execResult[0], 'CamelCase', [], { name: 'groupName' });\n        const filterList = allJoinedGroupList.filter(group => group.group_type === 2);\n        return formatResponse(JSON.stringify(filterList));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,WAAW,IAAIC,mBAAmB,EAAEC,WAAW,IAAIC,mBAAmB,EAAEC,WAAW,IAAIC,mBAAmB,EAAEC,kBAAkB,IAAIC,0BAA0B,EAAEC,qBAAqB,IAAIC,6BAA6B,EAAEC,mCAAmC,IAAIC,2CAA2C,EAAEC,mBAAmB,IAAIC,2BAA2B,EAAEC,cAAc,IAAIC,sBAAsB,QAAS,YAAY;AACpa,SAASC,mBAAmB,EAAEC,kBAAkB,EAAEC,wBAAwB,EAAEC,cAAc,QAAS,aAAa;AAChH,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAO,eAAepB,WAAWA,CAACqB,aAAa,EAAE;EAC7C,IAAI;IACA,MAAMC,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMG,UAAU,GAAGL,wBAAwB,CAACD,kBAAkB,CAACO,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,EAAE;MAAEK,SAAS,EAAE;IAAO,CAAC,CAAC,CAAC;IACjHzB,mBAAmB,CAACqB,EAAE,EAAEC,UAAU,CAAC;IACnC,OAAOJ,cAAc,CAAC,EAAE,CAAC;EAC7B,CAAC,CACD,OAAOQ,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAezB,WAAWA,CAAC+B,OAAO,EAAE;EACvC,IAAI;IACA,MAAMX,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9BjB,mBAAmB,CAACmB,EAAE,EAAEW,OAAO,CAAC;IAChC,OAAOd,cAAc,CAAC,EAAE,CAAC;EAC7B,CAAC,CACD,OAAOQ,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAevB,WAAWA,CAAC6B,OAAO,EAAEZ,aAAa,EAAE;EACtD,IAAI;IACA,MAAMC,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMG,UAAU,GAAGL,wBAAwB,CAACD,kBAAkB,CAACO,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,EAAE;MAAEK,SAAS,EAAE;IAAO,CAAC,CAAC,CAAC;IACjHrB,mBAAmB,CAACiB,EAAE,EAAEW,OAAO,EAAEV,UAAU,CAAC;IAC5C,OAAOJ,cAAc,CAAC,EAAE,CAAC;EAC7B,CAAC,CACD,OAAOQ,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAerB,kBAAkBA,CAAA,EAAG;EACvC,IAAI;IACA,MAAMgB,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMc,UAAU,GAAG3B,0BAA0B,CAACe,EAAE,CAAC;IACjD,OAAOH,cAAc,CAACH,mBAAmB,CAACkB,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC;EACrG,CAAC,CACD,OAAOR,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAenB,qBAAqBA,CAACyB,OAAO,EAAE;EACjD,IAAI;IACA,MAAMX,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMc,UAAU,GAAGzB,6BAA6B,CAACa,EAAE,EAAEW,OAAO,CAAC;IAC7D,IAAIC,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MACzB,OAAOjB,cAAc,CAAC,EAAE,EAAEpB,iBAAiB,CAACsC,aAAa,EAAG,oBAAmBJ,OAAQ,EAAC,CAAC;IAC7F;IACA,OAAOd,cAAc,CAACH,mBAAmB,CAACkB,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;MACtEC,IAAI,EAAE;IACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CACD,OAAOR,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAejB,mCAAmCA,CAAC4B,OAAO,EAAEC,eAAe,EAAEC,iBAAiB,EAAE;EACnG,IAAI;IACA,MAAMlB,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMc,UAAU,GAAGvB,2CAA2C,CAACW,EAAE,EAAEgB,OAAO,EAAEC,eAAe,EAAEC,iBAAiB,CAAC;IAC/G,OAAOrB,cAAc,CAACH,mBAAmB,CAACkB,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC,CAAC;EACrG,CAAC,CACD,OAAOR,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAef,mBAAmBA,CAACqB,OAAO,EAAE;EAC/C,IAAI;IACA,MAAMX,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9BP,2BAA2B,CAACS,EAAE,EAAEW,OAAO,CAAC;IACxC,OAAOd,cAAc,CAAC,EAAE,CAAC;EAC7B,CAAC,CACD,OAAOQ,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAeb,cAAcA,CAACmB,OAAO,EAAE;EAC1C,IAAI;IACA,MAAMX,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9BL,sBAAsB,CAACO,EAAE,EAAEW,OAAO,CAAC;IACnC,OAAOd,cAAc,CAAC,EAAE,CAAC;EAC7B,CAAC,CACD,OAAOQ,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAec,2BAA2BA,CAAA,EAAG;EAChD,IAAI;IACA,MAAMnB,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMc,UAAU,GAAG3B,0BAA0B,CAACe,EAAE,CAAC;IACjD,MAAMoB,kBAAkB,GAAG1B,mBAAmB,CAACkB,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC;IAC1E,MAAMS,YAAY,GAAG,EAAE;IACvBD,kBAAkB,CAACE,OAAO,CAACC,KAAK,IAAI;MAChC,IAAIA,KAAK,CAACC,SAAS,KAAK,CAAC,EAAE;QACvBH,YAAY,CAACI,IAAI,CAACF,KAAK,CAACZ,OAAO,CAAC;MACpC;IACJ,CAAC,CAAC;IACF,OAAOd,cAAc,CAACK,IAAI,CAACQ,SAAS,CAACW,YAAY,CAAC,CAAC;EACvD,CAAC,CACD,OAAOhB,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ;AACA,OAAO,eAAeqB,yBAAyBA,CAAA,EAAG;EAC9C,IAAI;IACA,MAAM1B,EAAE,GAAG,MAAMF,WAAW,CAAC,CAAC;IAC9B,MAAMc,UAAU,GAAG3B,0BAA0B,CAACe,EAAE,CAAC;IACjD,MAAMoB,kBAAkB,GAAG1B,mBAAmB,CAACkB,UAAU,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE;MAAEC,IAAI,EAAE;IAAY,CAAC,CAAC;IACrG,MAAMc,UAAU,GAAGP,kBAAkB,CAACQ,MAAM,CAACL,KAAK,IAAIA,KAAK,CAACM,UAAU,KAAK,CAAC,CAAC;IAC7E,OAAOhC,cAAc,CAACK,IAAI,CAACQ,SAAS,CAACiB,UAAU,CAAC,CAAC;EACrD,CAAC,CACD,OAAOtB,CAAC,EAAE;IACNC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChB,OAAOR,cAAc,CAACW,SAAS,EAAE/B,iBAAiB,CAACgC,SAAS,EAAEP,IAAI,CAACQ,SAAS,CAACL,CAAC,CAAC,CAAC;EACpF;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}