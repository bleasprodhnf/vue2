{"ast":null,"code":"import squel from 'squel';\nexport function localFriends(db) {\n  return db.exec(`\n      create table if not exists 'local_friends'\n      (\n          'owner_user_id'    varchar(64),\n          'friend_user_id'   varchar(64),\n          'remark'           varchar(255),\n          'create_time'      INTEGER,\n          'add_source'       INTEGER,\n          'operator_user_id' varchar(64),\n          'name'             varchar(255),\n          'face_url'         varchar(255),\n          'gender'           INTEGER,\n          'phone_number'     varchar(32),\n          'birth'            INTEGER,\n          'email'            varchar(64),\n          'ex'               varchar(1024),\n          'attached_info'    varchar(1024),\n          primary key ('owner_user_id', 'friend_user_id')\n      )       \n      `);\n}\nexport function insertFriend(db, localFriend) {\n  console.log('localFriend::::insert');\n  console.log(localFriend);\n  const sql = squel.insert().into('local_friends').setFields(localFriend).toString();\n  return db.exec(sql);\n}\nexport function deleteFriend(db, friendUserID, loginUserID) {\n  return db.exec(`\n    DELETE FROM local_friends \n          WHERE owner_user_id=\"${loginUserID}\" \n          and friend_user_id=\"${friendUserID}\"\n        `);\n}\nexport function updateFriend(db, localFriend) {\n  const sql = squel.update().table('local_friends').setFields(localFriend).where(`owner_user_id = '${localFriend.owner_user_id}' and friend_user_id = '${localFriend.friend_user_id}'`).toString();\n  return db.exec(sql);\n}\nexport function getAllFriendList(db, loginUser) {\n  return db.exec(`\n      select *\n        from local_friends\n        where owner_user_id = \"${loginUser}\"\n        `);\n}\nexport function searchFriendList(db, keyword, isSearchUserID, isSearchNickname, isSearchRemark) {\n  let totalConditionStr = '';\n  const userIDCondition = `friend_user_id like \"%${keyword}%\"`;\n  const nicknameCondition = `name like \"%${keyword}%\"`;\n  const remarkCondition = `remark like \"%${keyword}%\"`;\n  if (isSearchUserID) {\n    totalConditionStr = userIDCondition;\n  }\n  if (isSearchNickname) {\n    totalConditionStr = totalConditionStr ? totalConditionStr + ' or ' + nicknameCondition : nicknameCondition;\n  }\n  if (isSearchRemark) {\n    totalConditionStr = totalConditionStr ? totalConditionStr + ' or ' + remarkCondition : remarkCondition;\n  }\n  return db.exec(`\n      select *\n        from local_friends\n        where ${totalConditionStr}\n        order by create_time desc\n        `);\n}\nexport function getFriendInfoByFriendUserID(db, friendUserID, loginUser) {\n  return db.exec(`\n      select *\n        from local_friends\n        where owner_user_id = \"${loginUser}\"\n         and friend_user_id = \"${friendUserID}\"\n        limit 1\n        `);\n}\nexport function getFriendInfoList(db, friendUserIDList) {\n  const values = friendUserIDList.map(v => `'${v}'`).join(',');\n  return db.exec(`\n      select *\n        from local_friends\n        where friend_user_id in (${values})\n        `);\n}","map":{"version":3,"names":["squel","localFriends","db","exec","insertFriend","localFriend","console","log","sql","insert","into","setFields","toString","deleteFriend","friendUserID","loginUserID","updateFriend","update","table","where","owner_user_id","friend_user_id","getAllFriendList","loginUser","searchFriendList","keyword","isSearchUserID","isSearchNickname","isSearchRemark","totalConditionStr","userIDCondition","nicknameCondition","remarkCondition","getFriendInfoByFriendUserID","getFriendInfoList","friendUserIDList","values","map","v","join"],"sources":["C:/ysx/xm/mark/web/src/utils/lib/sqls/localFriend.js"],"sourcesContent":["import squel from 'squel';\nexport function localFriends(db) {\n    return db.exec(`\n      create table if not exists 'local_friends'\n      (\n          'owner_user_id'    varchar(64),\n          'friend_user_id'   varchar(64),\n          'remark'           varchar(255),\n          'create_time'      INTEGER,\n          'add_source'       INTEGER,\n          'operator_user_id' varchar(64),\n          'name'             varchar(255),\n          'face_url'         varchar(255),\n          'gender'           INTEGER,\n          'phone_number'     varchar(32),\n          'birth'            INTEGER,\n          'email'            varchar(64),\n          'ex'               varchar(1024),\n          'attached_info'    varchar(1024),\n          primary key ('owner_user_id', 'friend_user_id')\n      )       \n      `);\n}\nexport function insertFriend(db, localFriend) {\n    console.log('localFriend::::insert');\n    console.log(localFriend);\n    const sql = squel\n        .insert()\n        .into('local_friends')\n        .setFields(localFriend)\n        .toString();\n    return db.exec(sql);\n}\nexport function deleteFriend(db, friendUserID, loginUserID) {\n    return db.exec(`\n    DELETE FROM local_friends \n          WHERE owner_user_id=\"${loginUserID}\" \n          and friend_user_id=\"${friendUserID}\"\n        `);\n}\nexport function updateFriend(db, localFriend) {\n    const sql = squel\n        .update()\n        .table('local_friends')\n        .setFields(localFriend)\n        .where(`owner_user_id = '${localFriend.owner_user_id}' and friend_user_id = '${localFriend.friend_user_id}'`)\n        .toString();\n    return db.exec(sql);\n}\nexport function getAllFriendList(db, loginUser) {\n    return db.exec(`\n      select *\n        from local_friends\n        where owner_user_id = \"${loginUser}\"\n        `);\n}\nexport function searchFriendList(db, keyword, isSearchUserID, isSearchNickname, isSearchRemark) {\n    let totalConditionStr = '';\n    const userIDCondition = `friend_user_id like \"%${keyword}%\"`;\n    const nicknameCondition = `name like \"%${keyword}%\"`;\n    const remarkCondition = `remark like \"%${keyword}%\"`;\n    if (isSearchUserID) {\n        totalConditionStr = userIDCondition;\n    }\n    if (isSearchNickname) {\n        totalConditionStr = totalConditionStr\n            ? totalConditionStr + ' or ' + nicknameCondition\n            : nicknameCondition;\n    }\n    if (isSearchRemark) {\n        totalConditionStr = totalConditionStr\n            ? totalConditionStr + ' or ' + remarkCondition\n            : remarkCondition;\n    }\n    return db.exec(`\n      select *\n        from local_friends\n        where ${totalConditionStr}\n        order by create_time desc\n        `);\n}\nexport function getFriendInfoByFriendUserID(db, friendUserID, loginUser) {\n    return db.exec(`\n      select *\n        from local_friends\n        where owner_user_id = \"${loginUser}\"\n         and friend_user_id = \"${friendUserID}\"\n        limit 1\n        `);\n}\nexport function getFriendInfoList(db, friendUserIDList) {\n    const values = friendUserIDList.map(v => `'${v}'`).join(',');\n    return db.exec(`\n      select *\n        from local_friends\n        where friend_user_id in (${values})\n        `);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}