{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst RPCCodes = {\n  CONNECT_TIMEOUT: {\n    code: -32300,\n    message: \"Connect timeout\"\n  },\n  APPLICATION_ERROR: {\n    code: -32500,\n    message: \"Application error\"\n  },\n  METHOD_NOT_FOUND: {\n    code: -32601,\n    message: `Method not found`\n  }\n};\nclass RPCMessageEvent {\n  constructor(options) {\n    __publicField(this, \"_currentEndpoint\");\n    __publicField(this, \"_targetEndpoint\");\n    __publicField(this, \"_events\");\n    __publicField(this, \"_originOnmessage\");\n    __publicField(this, \"_receiveMessage\");\n    __publicField(this, \"onerror\", null);\n    __publicField(this, \"config\");\n    __publicField(this, \"sendAdapter\");\n    __publicField(this, \"receiveAdapter\");\n    this._events = {};\n    this._currentEndpoint = options.currentEndpoint;\n    this._targetEndpoint = options.targetEndpoint;\n    this._originOnmessage = null;\n    this.config = options.config;\n    this.receiveAdapter = options.receiveAdapter;\n    this.sendAdapter = options.sendAdapter;\n    const receiveMessage = event => {\n      const receiveData = this.receiveAdapter ? this.receiveAdapter(event) : event.data;\n      if (receiveData && typeof receiveData.event === \"string\") {\n        const eventHandlers = this._events[receiveData.event] || [];\n        if (eventHandlers.length) {\n          eventHandlers.forEach(handler => {\n            handler(...(receiveData.args || []));\n          });\n          return;\n        }\n        if (this.onerror) {\n          this.onerror(__spreadProps(__spreadValues({}, RPCCodes.METHOD_NOT_FOUND), {\n            data: receiveData\n          }));\n        }\n      }\n    };\n    if (this._currentEndpoint.addEventListener) {\n      if (\"start\" in this._currentEndpoint && this._currentEndpoint.start) {\n        this._currentEndpoint.start();\n      }\n      this._currentEndpoint.addEventListener(\"message\", receiveMessage, false);\n      this._receiveMessage = receiveMessage;\n      return;\n    }\n    this._originOnmessage = this._currentEndpoint.onmessage;\n    this._currentEndpoint.onmessage = event => {\n      if (this._originOnmessage) {\n        this._originOnmessage(event);\n      }\n      receiveMessage(event);\n    };\n    this._receiveMessage = this._currentEndpoint.onmessage;\n  }\n  emit(event, ...args) {\n    const data = {\n      event,\n      args\n    };\n    const result = this.sendAdapter ? this.sendAdapter(data, this._targetEndpoint) : {\n      data\n    };\n    const sendData = result.data || data;\n    const postMessageConfig = this.config ? typeof this.config === \"function\" ? this.config(sendData, this._targetEndpoint) || {} : this.config || {} : {};\n    if (Array.isArray(result.transfer) && result.transfer.length) {\n      postMessageConfig.transfer = result.transfer;\n    }\n    this._targetEndpoint.postMessage(sendData, postMessageConfig);\n  }\n  on(event, fn) {\n    if (!this._events[event]) {\n      this._events[event] = [];\n    }\n    this._events[event].push(fn);\n  }\n  off(event, fn) {\n    if (!this._events[event]) return;\n    if (!fn) {\n      this._events[event] = [];\n      return;\n    }\n    const handlers = this._events[event] || [];\n    this._events[event] = handlers.filter(handler => handler !== fn);\n  }\n  destroy() {\n    if (this._currentEndpoint.removeEventListener) {\n      this._currentEndpoint.removeEventListener(\"message\", this._receiveMessage, false);\n      return;\n    }\n    try {\n      this._currentEndpoint.onmessage = this._originOnmessage;\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n}\nconst _RPC = class {\n  constructor(options) {\n    __publicField(this, \"_event\");\n    __publicField(this, \"_methods\", {});\n    __publicField(this, \"_timeout\", 0);\n    __publicField(this, \"_$connect\", null);\n    this._event = options.event;\n    this._timeout = options.timeout || 0;\n    if (options.methods) {\n      Object.entries(options.methods).forEach(([method, handler]) => {\n        this.registerMethod(method, handler);\n      });\n    }\n    this._event.onerror = error => {\n      const {\n        code,\n        message,\n        data\n      } = error;\n      if (data.event && Array.isArray(data.args) && data.args.length) {\n        const synEventData = data.args[0];\n        const ackEventName = this._getAckEventName(synEventData.method);\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          id: synEventData == null ? void 0 : synEventData.id,\n          error: {\n            code,\n            message,\n            data: synEventData\n          }\n        };\n        this._event.emit(ackEventName, ackEventData);\n      } else {\n        console.error(error);\n      }\n    };\n    this.connect();\n  }\n  static uuid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n      const r = Math.random() * 16 | 0;\n      const v = c == \"x\" ? r : r & 3 | 8;\n      return v.toString(16);\n    });\n  }\n  _getSynEventName(method) {\n    return `${_RPC.EVENT.SYN_SIGN}${method}`;\n  }\n  _getAckEventName(method) {\n    return `${_RPC.EVENT.ACK_SIGN}${method}`;\n  }\n  connect(timeout) {\n    if (this._$connect) {\n      return this._$connect;\n    }\n    this._$connect = new Promise((resolve, reject) => {\n      const connectTimeout = timeout || this._timeout;\n      let connectTimer;\n      if (connectTimeout) {\n        connectTimer = setTimeout(() => {\n          const error = __spreadProps(__spreadValues({}, RPCCodes.TIMEOUT), {\n            data: {\n              timeout: connectTimeout\n            }\n          });\n          reject(error);\n        }, connectTimeout);\n      }\n      const connectEventName = _RPC.EVENT.CONNECT;\n      const connectAckEventName = this._getAckEventName(connectEventName);\n      const connectSynEventName = this._getSynEventName(connectEventName);\n      const resolveConnectEvent = () => {\n        clearTimeout(connectTimer);\n        resolve();\n      };\n      this._event.on(connectAckEventName, resolveConnectEvent);\n      const connectSynEventHandler = () => {\n        this._event.emit(connectAckEventName);\n        resolveConnectEvent();\n      };\n      this._event.on(connectSynEventName, connectSynEventHandler);\n      this._event.emit(connectSynEventName);\n    });\n    return this._$connect;\n  }\n  registerMethod(method, handler) {\n    if (this._methods[method]) {\n      throw new Error(`${method} already registered`);\n    }\n    this._methods[method] = handler;\n    const synEventName = this._getSynEventName(method);\n    const synEventHandler = synEventData => {\n      const ackEventName = this._getAckEventName(method);\n      if (!synEventData.id) {\n        handler(...synEventData.params);\n        return;\n      }\n      Promise.resolve(handler(...synEventData.params)).then(result => {\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          result,\n          id: synEventData.id\n        };\n        this._event.emit(ackEventName, ackEventData);\n      }).catch(error => {\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          id: synEventData.id,\n          error: {\n            code: (error == null ? void 0 : error.code) || RPCCodes.APPLICATION_ERROR.code,\n            message: (error == null ? void 0 : error.message) || RPCCodes.APPLICATION_ERROR.message,\n            data: null\n          }\n        };\n        this._event.emit(ackEventName, ackEventData);\n      });\n    };\n    this._event.on(synEventName, synEventHandler);\n  }\n  removeMethod(method) {\n    if (!this._methods[method]) {\n      delete this._methods[method];\n    }\n    const synEventName = this._getSynEventName(method);\n    this._event.off(synEventName);\n  }\n  invoke(method, ...args) {\n    return new Promise((resolve, reject) => {\n      const lastArg = args[args.length - 1];\n      const hasInvokeOptions = lastArg && typeof lastArg === \"object\" && (Reflect.has(lastArg, \"isNotify\") || Reflect.has(lastArg, \"timeout\"));\n      const options = hasInvokeOptions ? lastArg : {\n        isNotify: false,\n        timeout: 0\n      };\n      const params = hasInvokeOptions ? args.slice(0, -1) : args;\n      const synEventName = this._getSynEventName(method);\n      const synEventId = _RPC.uuid();\n      const synEventData = {\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id: synEventId\n      };\n      this._event.emit(synEventName, synEventData);\n      if (!options.isNotify) {\n        const ackEventName = this._getAckEventName(method);\n        const timeout = options.timeout || this._timeout;\n        let timer;\n        if (timeout) {\n          timer = setTimeout(() => {\n            const error = __spreadProps(__spreadValues({}, RPCCodes.CONNECT_TIMEOUT), {\n              data: {\n                timeout\n              }\n            });\n            reject(error);\n          }, timeout);\n        }\n        const ackEventHandler = ackEventData => {\n          if (ackEventData.id === synEventId) {\n            clearTimeout(timer);\n            this._event.off(ackEventName, ackEventHandler);\n            if (!ackEventData.error) {\n              resolve(ackEventData.result);\n            } else {\n              reject(ackEventData.error);\n            }\n          }\n        };\n        this._event.on(ackEventName, ackEventHandler);\n      } else {\n        resolve(void 0);\n      }\n    });\n  }\n  destroy() {\n    Object.entries(this._methods).forEach(([method]) => {\n      const synEventName = this._getSynEventName(method);\n      this._event.off(synEventName);\n    });\n    const connectAckEventName = this._getAckEventName(_RPC.EVENT.CONNECT);\n    const connectSynEventName = this._getSynEventName(_RPC.EVENT.CONNECT);\n    this._event.off(connectSynEventName);\n    this._event.off(connectAckEventName);\n    if (this._event.destroy) {\n      this._event.destroy();\n    }\n  }\n};\nlet RPC = _RPC;\n__publicField(RPC, \"CODES\", RPCCodes);\n__publicField(RPC, \"EVENT\", {\n  SYN_SIGN: \"syn:\",\n  ACK_SIGN: \"ack:\",\n  CONNECT: \"__rpc_connect_event\",\n  SYNC_METHODS: \"__rpc_sync_methods_event\"\n});\nexport { RPC, RPCCodes, RPCMessageEvent };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","__publicField","RPCCodes","CONNECT_TIMEOUT","code","message","APPLICATION_ERROR","METHOD_NOT_FOUND","RPCMessageEvent","constructor","options","_events","_currentEndpoint","currentEndpoint","_targetEndpoint","targetEndpoint","_originOnmessage","config","receiveAdapter","sendAdapter","receiveMessage","event","receiveData","data","eventHandlers","length","forEach","handler","args","onerror","addEventListener","start","_receiveMessage","onmessage","emit","result","sendData","postMessageConfig","Array","isArray","transfer","postMessage","on","fn","push","off","handlers","filter","destroy","removeEventListener","error","console","warn","_RPC","_event","_timeout","timeout","methods","entries","method","registerMethod","synEventData","ackEventName","_getAckEventName","ackEventData","jsonrpc","id","connect","uuid","replace","c","r","Math","random","v","toString","_getSynEventName","EVENT","SYN_SIGN","ACK_SIGN","_$connect","Promise","resolve","reject","connectTimeout","connectTimer","setTimeout","TIMEOUT","connectEventName","CONNECT","connectAckEventName","connectSynEventName","resolveConnectEvent","clearTimeout","connectSynEventHandler","_methods","Error","synEventName","synEventHandler","params","then","catch","removeMethod","invoke","lastArg","hasInvokeOptions","Reflect","has","isNotify","slice","synEventId","timer","ackEventHandler","RPC","SYNC_METHODS"],"sources":["C:/ysx/xm/mark/web/node_modules/rpc-shooter/lib/index.es.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nconst RPCCodes = {\n  CONNECT_TIMEOUT: {\n    code: -32300,\n    message: \"Connect timeout\"\n  },\n  APPLICATION_ERROR: {\n    code: -32500,\n    message: \"Application error\"\n  },\n  METHOD_NOT_FOUND: {\n    code: -32601,\n    message: `Method not found`\n  }\n};\nclass RPCMessageEvent {\n  constructor(options) {\n    __publicField(this, \"_currentEndpoint\");\n    __publicField(this, \"_targetEndpoint\");\n    __publicField(this, \"_events\");\n    __publicField(this, \"_originOnmessage\");\n    __publicField(this, \"_receiveMessage\");\n    __publicField(this, \"onerror\", null);\n    __publicField(this, \"config\");\n    __publicField(this, \"sendAdapter\");\n    __publicField(this, \"receiveAdapter\");\n    this._events = {};\n    this._currentEndpoint = options.currentEndpoint;\n    this._targetEndpoint = options.targetEndpoint;\n    this._originOnmessage = null;\n    this.config = options.config;\n    this.receiveAdapter = options.receiveAdapter;\n    this.sendAdapter = options.sendAdapter;\n    const receiveMessage = (event) => {\n      const receiveData = this.receiveAdapter ? this.receiveAdapter(event) : event.data;\n      if (receiveData && typeof receiveData.event === \"string\") {\n        const eventHandlers = this._events[receiveData.event] || [];\n        if (eventHandlers.length) {\n          eventHandlers.forEach((handler) => {\n            handler(...receiveData.args || []);\n          });\n          return;\n        }\n        if (this.onerror) {\n          this.onerror(__spreadProps(__spreadValues({}, RPCCodes.METHOD_NOT_FOUND), {\n            data: receiveData\n          }));\n        }\n      }\n    };\n    if (this._currentEndpoint.addEventListener) {\n      if (\"start\" in this._currentEndpoint && this._currentEndpoint.start) {\n        this._currentEndpoint.start();\n      }\n      this._currentEndpoint.addEventListener(\"message\", receiveMessage, false);\n      this._receiveMessage = receiveMessage;\n      return;\n    }\n    this._originOnmessage = this._currentEndpoint.onmessage;\n    this._currentEndpoint.onmessage = (event) => {\n      if (this._originOnmessage) {\n        this._originOnmessage(event);\n      }\n      receiveMessage(event);\n    };\n    this._receiveMessage = this._currentEndpoint.onmessage;\n  }\n  emit(event, ...args) {\n    const data = {\n      event,\n      args\n    };\n    const result = this.sendAdapter ? this.sendAdapter(data, this._targetEndpoint) : { data };\n    const sendData = result.data || data;\n    const postMessageConfig = this.config ? typeof this.config === \"function\" ? this.config(sendData, this._targetEndpoint) || {} : this.config || {} : {};\n    if (Array.isArray(result.transfer) && result.transfer.length) {\n      postMessageConfig.transfer = result.transfer;\n    }\n    this._targetEndpoint.postMessage(sendData, postMessageConfig);\n  }\n  on(event, fn) {\n    if (!this._events[event]) {\n      this._events[event] = [];\n    }\n    this._events[event].push(fn);\n  }\n  off(event, fn) {\n    if (!this._events[event])\n      return;\n    if (!fn) {\n      this._events[event] = [];\n      return;\n    }\n    const handlers = this._events[event] || [];\n    this._events[event] = handlers.filter((handler) => handler !== fn);\n  }\n  destroy() {\n    if (this._currentEndpoint.removeEventListener) {\n      this._currentEndpoint.removeEventListener(\"message\", this._receiveMessage, false);\n      return;\n    }\n    try {\n      this._currentEndpoint.onmessage = this._originOnmessage;\n    } catch (error) {\n      console.warn(error);\n    }\n  }\n}\nconst _RPC = class {\n  constructor(options) {\n    __publicField(this, \"_event\");\n    __publicField(this, \"_methods\", {});\n    __publicField(this, \"_timeout\", 0);\n    __publicField(this, \"_$connect\", null);\n    this._event = options.event;\n    this._timeout = options.timeout || 0;\n    if (options.methods) {\n      Object.entries(options.methods).forEach(([method, handler]) => {\n        this.registerMethod(method, handler);\n      });\n    }\n    this._event.onerror = (error) => {\n      const { code, message, data } = error;\n      if (data.event && Array.isArray(data.args) && data.args.length) {\n        const synEventData = data.args[0];\n        const ackEventName = this._getAckEventName(synEventData.method);\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          id: synEventData == null ? void 0 : synEventData.id,\n          error: {\n            code,\n            message,\n            data: synEventData\n          }\n        };\n        this._event.emit(ackEventName, ackEventData);\n      } else {\n        console.error(error);\n      }\n    };\n    this.connect();\n  }\n  static uuid() {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = Math.random() * 16 | 0;\n      const v = c == \"x\" ? r : r & 3 | 8;\n      return v.toString(16);\n    });\n  }\n  _getSynEventName(method) {\n    return `${_RPC.EVENT.SYN_SIGN}${method}`;\n  }\n  _getAckEventName(method) {\n    return `${_RPC.EVENT.ACK_SIGN}${method}`;\n  }\n  connect(timeout) {\n    if (this._$connect) {\n      return this._$connect;\n    }\n    this._$connect = new Promise((resolve, reject) => {\n      const connectTimeout = timeout || this._timeout;\n      let connectTimer;\n      if (connectTimeout) {\n        connectTimer = setTimeout(() => {\n          const error = __spreadProps(__spreadValues({}, RPCCodes.TIMEOUT), {\n            data: { timeout: connectTimeout }\n          });\n          reject(error);\n        }, connectTimeout);\n      }\n      const connectEventName = _RPC.EVENT.CONNECT;\n      const connectAckEventName = this._getAckEventName(connectEventName);\n      const connectSynEventName = this._getSynEventName(connectEventName);\n      const resolveConnectEvent = () => {\n        clearTimeout(connectTimer);\n        resolve();\n      };\n      this._event.on(connectAckEventName, resolveConnectEvent);\n      const connectSynEventHandler = () => {\n        this._event.emit(connectAckEventName);\n        resolveConnectEvent();\n      };\n      this._event.on(connectSynEventName, connectSynEventHandler);\n      this._event.emit(connectSynEventName);\n    });\n    return this._$connect;\n  }\n  registerMethod(method, handler) {\n    if (this._methods[method]) {\n      throw new Error(`${method} already registered`);\n    }\n    this._methods[method] = handler;\n    const synEventName = this._getSynEventName(method);\n    const synEventHandler = (synEventData) => {\n      const ackEventName = this._getAckEventName(method);\n      if (!synEventData.id) {\n        handler(...synEventData.params);\n        return;\n      }\n      Promise.resolve(handler(...synEventData.params)).then((result) => {\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          result,\n          id: synEventData.id\n        };\n        this._event.emit(ackEventName, ackEventData);\n      }).catch((error) => {\n        const ackEventData = {\n          jsonrpc: \"2.0\",\n          id: synEventData.id,\n          error: {\n            code: (error == null ? void 0 : error.code) || RPCCodes.APPLICATION_ERROR.code,\n            message: (error == null ? void 0 : error.message) || RPCCodes.APPLICATION_ERROR.message,\n            data: null\n          }\n        };\n        this._event.emit(ackEventName, ackEventData);\n      });\n    };\n    this._event.on(synEventName, synEventHandler);\n  }\n  removeMethod(method) {\n    if (!this._methods[method]) {\n      delete this._methods[method];\n    }\n    const synEventName = this._getSynEventName(method);\n    this._event.off(synEventName);\n  }\n  invoke(method, ...args) {\n    return new Promise((resolve, reject) => {\n      const lastArg = args[args.length - 1];\n      const hasInvokeOptions = lastArg && typeof lastArg === \"object\" && (Reflect.has(lastArg, \"isNotify\") || Reflect.has(lastArg, \"timeout\"));\n      const options = hasInvokeOptions ? lastArg : { isNotify: false, timeout: 0 };\n      const params = hasInvokeOptions ? args.slice(0, -1) : args;\n      const synEventName = this._getSynEventName(method);\n      const synEventId = _RPC.uuid();\n      const synEventData = {\n        jsonrpc: \"2.0\",\n        method,\n        params,\n        id: synEventId\n      };\n      this._event.emit(synEventName, synEventData);\n      if (!options.isNotify) {\n        const ackEventName = this._getAckEventName(method);\n        const timeout = options.timeout || this._timeout;\n        let timer;\n        if (timeout) {\n          timer = setTimeout(() => {\n            const error = __spreadProps(__spreadValues({}, RPCCodes.CONNECT_TIMEOUT), {\n              data: { timeout }\n            });\n            reject(error);\n          }, timeout);\n        }\n        const ackEventHandler = (ackEventData) => {\n          if (ackEventData.id === synEventId) {\n            clearTimeout(timer);\n            this._event.off(ackEventName, ackEventHandler);\n            if (!ackEventData.error) {\n              resolve(ackEventData.result);\n            } else {\n              reject(ackEventData.error);\n            }\n          }\n        };\n        this._event.on(ackEventName, ackEventHandler);\n      } else {\n        resolve(void 0);\n      }\n    });\n  }\n  destroy() {\n    Object.entries(this._methods).forEach(([method]) => {\n      const synEventName = this._getSynEventName(method);\n      this._event.off(synEventName);\n    });\n    const connectAckEventName = this._getAckEventName(_RPC.EVENT.CONNECT);\n    const connectSynEventName = this._getSynEventName(_RPC.EVENT.CONNECT);\n    this._event.off(connectSynEventName);\n    this._event.off(connectAckEventName);\n    if (this._event.destroy) {\n      this._event.destroy();\n    }\n  }\n};\nlet RPC = _RPC;\n__publicField(RPC, \"CODES\", RPCCodes);\n__publicField(RPC, \"EVENT\", {\n  SYN_SIGN: \"syn:\",\n  ACK_SIGN: \"ack:\",\n  CONNECT: \"__rpc_connect_event\",\n  SYNC_METHODS: \"__rpc_sync_methods_event\"\n});\nexport { RPC, RPCCodes, RPCMessageEvent };\n"],"mappings":";AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,UAAU,GAAGF,MAAM,CAACG,gBAAgB;AACxC,IAAIC,iBAAiB,GAAGJ,MAAM,CAACK,yBAAyB;AACxD,IAAIC,mBAAmB,GAAGN,MAAM,CAACO,qBAAqB;AACtD,IAAIC,YAAY,GAAGR,MAAM,CAACS,SAAS,CAACC,cAAc;AAClD,IAAIC,YAAY,GAAGX,MAAM,CAACS,SAAS,CAACG,oBAAoB;AACxD,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGf,SAAS,CAACe,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAM,CAAC,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,cAAc,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC7B,KAAK,IAAIC,IAAI,IAAID,CAAC,KAAKA,CAAC,GAAG,CAAC,CAAC,CAAC,EAC5B,IAAId,YAAY,CAACgB,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACrC,IAAIjB,mBAAmB,EACrB,KAAK,IAAIiB,IAAI,IAAIjB,mBAAmB,CAACgB,CAAC,CAAC,EAAE;IACvC,IAAIX,YAAY,CAACa,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACrC;EACF,OAAOF,CAAC;AACV,CAAC;AACD,IAAII,aAAa,GAAGA,CAACJ,CAAC,EAAEC,CAAC,KAAKpB,UAAU,CAACmB,CAAC,EAAEjB,iBAAiB,CAACkB,CAAC,CAAC,CAAC;AACjE,IAAII,aAAa,GAAGA,CAACZ,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACvCH,eAAe,CAACC,GAAG,EAAE,OAAOC,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,EAAE,GAAGA,GAAG,EAAEC,KAAK,CAAC;EACrE,OAAOA,KAAK;AACd,CAAC;AACD,MAAMW,QAAQ,GAAG;EACfC,eAAe,EAAE;IACfC,IAAI,EAAE,CAAC,KAAK;IACZC,OAAO,EAAE;EACX,CAAC;EACDC,iBAAiB,EAAE;IACjBF,IAAI,EAAE,CAAC,KAAK;IACZC,OAAO,EAAE;EACX,CAAC;EACDE,gBAAgB,EAAE;IAChBH,IAAI,EAAE,CAAC,KAAK;IACZC,OAAO,EAAG;EACZ;AACF,CAAC;AACD,MAAMG,eAAe,CAAC;EACpBC,WAAWA,CAACC,OAAO,EAAE;IACnBT,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC;IACvCA,aAAa,CAAC,IAAI,EAAE,iBAAiB,CAAC;IACtCA,aAAa,CAAC,IAAI,EAAE,SAAS,CAAC;IAC9BA,aAAa,CAAC,IAAI,EAAE,kBAAkB,CAAC;IACvCA,aAAa,CAAC,IAAI,EAAE,iBAAiB,CAAC;IACtCA,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC;IACpCA,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC7BA,aAAa,CAAC,IAAI,EAAE,aAAa,CAAC;IAClCA,aAAa,CAAC,IAAI,EAAE,gBAAgB,CAAC;IACrC,IAAI,CAACU,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,gBAAgB,GAAGF,OAAO,CAACG,eAAe;IAC/C,IAAI,CAACC,eAAe,GAAGJ,OAAO,CAACK,cAAc;IAC7C,IAAI,CAACC,gBAAgB,GAAG,IAAI;IAC5B,IAAI,CAACC,MAAM,GAAGP,OAAO,CAACO,MAAM;IAC5B,IAAI,CAACC,cAAc,GAAGR,OAAO,CAACQ,cAAc;IAC5C,IAAI,CAACC,WAAW,GAAGT,OAAO,CAACS,WAAW;IACtC,MAAMC,cAAc,GAAIC,KAAK,IAAK;MAChC,MAAMC,WAAW,GAAG,IAAI,CAACJ,cAAc,GAAG,IAAI,CAACA,cAAc,CAACG,KAAK,CAAC,GAAGA,KAAK,CAACE,IAAI;MACjF,IAAID,WAAW,IAAI,OAAOA,WAAW,CAACD,KAAK,KAAK,QAAQ,EAAE;QACxD,MAAMG,aAAa,GAAG,IAAI,CAACb,OAAO,CAACW,WAAW,CAACD,KAAK,CAAC,IAAI,EAAE;QAC3D,IAAIG,aAAa,CAACC,MAAM,EAAE;UACxBD,aAAa,CAACE,OAAO,CAAEC,OAAO,IAAK;YACjCA,OAAO,CAAC,IAAGL,WAAW,CAACM,IAAI,IAAI,EAAE,EAAC;UACpC,CAAC,CAAC;UACF;QACF;QACA,IAAI,IAAI,CAACC,OAAO,EAAE;UAChB,IAAI,CAACA,OAAO,CAAC7B,aAAa,CAACL,cAAc,CAAC,CAAC,CAAC,EAAEO,QAAQ,CAACK,gBAAgB,CAAC,EAAE;YACxEgB,IAAI,EAAED;UACR,CAAC,CAAC,CAAC;QACL;MACF;IACF,CAAC;IACD,IAAI,IAAI,CAACV,gBAAgB,CAACkB,gBAAgB,EAAE;MAC1C,IAAI,OAAO,IAAI,IAAI,CAAClB,gBAAgB,IAAI,IAAI,CAACA,gBAAgB,CAACmB,KAAK,EAAE;QACnE,IAAI,CAACnB,gBAAgB,CAACmB,KAAK,CAAC,CAAC;MAC/B;MACA,IAAI,CAACnB,gBAAgB,CAACkB,gBAAgB,CAAC,SAAS,EAAEV,cAAc,EAAE,KAAK,CAAC;MACxE,IAAI,CAACY,eAAe,GAAGZ,cAAc;MACrC;IACF;IACA,IAAI,CAACJ,gBAAgB,GAAG,IAAI,CAACJ,gBAAgB,CAACqB,SAAS;IACvD,IAAI,CAACrB,gBAAgB,CAACqB,SAAS,GAAIZ,KAAK,IAAK;MAC3C,IAAI,IAAI,CAACL,gBAAgB,EAAE;QACzB,IAAI,CAACA,gBAAgB,CAACK,KAAK,CAAC;MAC9B;MACAD,cAAc,CAACC,KAAK,CAAC;IACvB,CAAC;IACD,IAAI,CAACW,eAAe,GAAG,IAAI,CAACpB,gBAAgB,CAACqB,SAAS;EACxD;EACAC,IAAIA,CAACb,KAAK,EAAE,GAAGO,IAAI,EAAE;IACnB,MAAML,IAAI,GAAG;MACXF,KAAK;MACLO;IACF,CAAC;IACD,MAAMO,MAAM,GAAG,IAAI,CAAChB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACI,IAAI,EAAE,IAAI,CAACT,eAAe,CAAC,GAAG;MAAES;IAAK,CAAC;IACzF,MAAMa,QAAQ,GAAGD,MAAM,CAACZ,IAAI,IAAIA,IAAI;IACpC,MAAMc,iBAAiB,GAAG,IAAI,CAACpB,MAAM,GAAG,OAAO,IAAI,CAACA,MAAM,KAAK,UAAU,GAAG,IAAI,CAACA,MAAM,CAACmB,QAAQ,EAAE,IAAI,CAACtB,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAACG,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IACtJ,IAAIqB,KAAK,CAACC,OAAO,CAACJ,MAAM,CAACK,QAAQ,CAAC,IAAIL,MAAM,CAACK,QAAQ,CAACf,MAAM,EAAE;MAC5DY,iBAAiB,CAACG,QAAQ,GAAGL,MAAM,CAACK,QAAQ;IAC9C;IACA,IAAI,CAAC1B,eAAe,CAAC2B,WAAW,CAACL,QAAQ,EAAEC,iBAAiB,CAAC;EAC/D;EACAK,EAAEA,CAACrB,KAAK,EAAEsB,EAAE,EAAE;IACZ,IAAI,CAAC,IAAI,CAAChC,OAAO,CAACU,KAAK,CAAC,EAAE;MACxB,IAAI,CAACV,OAAO,CAACU,KAAK,CAAC,GAAG,EAAE;IAC1B;IACA,IAAI,CAACV,OAAO,CAACU,KAAK,CAAC,CAACuB,IAAI,CAACD,EAAE,CAAC;EAC9B;EACAE,GAAGA,CAACxB,KAAK,EAAEsB,EAAE,EAAE;IACb,IAAI,CAAC,IAAI,CAAChC,OAAO,CAACU,KAAK,CAAC,EACtB;IACF,IAAI,CAACsB,EAAE,EAAE;MACP,IAAI,CAAChC,OAAO,CAACU,KAAK,CAAC,GAAG,EAAE;MACxB;IACF;IACA,MAAMyB,QAAQ,GAAG,IAAI,CAACnC,OAAO,CAACU,KAAK,CAAC,IAAI,EAAE;IAC1C,IAAI,CAACV,OAAO,CAACU,KAAK,CAAC,GAAGyB,QAAQ,CAACC,MAAM,CAAEpB,OAAO,IAAKA,OAAO,KAAKgB,EAAE,CAAC;EACpE;EACAK,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACpC,gBAAgB,CAACqC,mBAAmB,EAAE;MAC7C,IAAI,CAACrC,gBAAgB,CAACqC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACjB,eAAe,EAAE,KAAK,CAAC;MACjF;IACF;IACA,IAAI;MACF,IAAI,CAACpB,gBAAgB,CAACqB,SAAS,GAAG,IAAI,CAACjB,gBAAgB;IACzD,CAAC,CAAC,OAAOkC,KAAK,EAAE;MACdC,OAAO,CAACC,IAAI,CAACF,KAAK,CAAC;IACrB;EACF;AACF;AACA,MAAMG,IAAI,GAAG,MAAM;EACjB5C,WAAWA,CAACC,OAAO,EAAE;IACnBT,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC;IAC7BA,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;IACnCA,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAClCA,aAAa,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;IACtC,IAAI,CAACqD,MAAM,GAAG5C,OAAO,CAACW,KAAK;IAC3B,IAAI,CAACkC,QAAQ,GAAG7C,OAAO,CAAC8C,OAAO,IAAI,CAAC;IACpC,IAAI9C,OAAO,CAAC+C,OAAO,EAAE;MACnBlF,MAAM,CAACmF,OAAO,CAAChD,OAAO,CAAC+C,OAAO,CAAC,CAAC/B,OAAO,CAAC,CAAC,CAACiC,MAAM,EAAEhC,OAAO,CAAC,KAAK;QAC7D,IAAI,CAACiC,cAAc,CAACD,MAAM,EAAEhC,OAAO,CAAC;MACtC,CAAC,CAAC;IACJ;IACA,IAAI,CAAC2B,MAAM,CAACzB,OAAO,GAAIqB,KAAK,IAAK;MAC/B,MAAM;QAAE9C,IAAI;QAAEC,OAAO;QAAEkB;MAAK,CAAC,GAAG2B,KAAK;MACrC,IAAI3B,IAAI,CAACF,KAAK,IAAIiB,KAAK,CAACC,OAAO,CAAChB,IAAI,CAACK,IAAI,CAAC,IAAIL,IAAI,CAACK,IAAI,CAACH,MAAM,EAAE;QAC9D,MAAMoC,YAAY,GAAGtC,IAAI,CAACK,IAAI,CAAC,CAAC,CAAC;QACjC,MAAMkC,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACF,YAAY,CAACF,MAAM,CAAC;QAC/D,MAAMK,YAAY,GAAG;UACnBC,OAAO,EAAE,KAAK;UACdC,EAAE,EAAEL,YAAY,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACK,EAAE;UACnDhB,KAAK,EAAE;YACL9C,IAAI;YACJC,OAAO;YACPkB,IAAI,EAAEsC;UACR;QACF,CAAC;QACD,IAAI,CAACP,MAAM,CAACpB,IAAI,CAAC4B,YAAY,EAAEE,YAAY,CAAC;MAC9C,CAAC,MAAM;QACLb,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACD,IAAI,CAACiB,OAAO,CAAC,CAAC;EAChB;EACA,OAAOC,IAAIA,CAAA,EAAG;IACZ,OAAO,sCAAsC,CAACC,OAAO,CAAC,OAAO,EAAGC,CAAC,IAAK;MACpE,MAAMC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;MAChC,MAAMC,CAAC,GAAGJ,CAAC,IAAI,GAAG,GAAGC,CAAC,GAAGA,CAAC,GAAG,CAAC,GAAG,CAAC;MAClC,OAAOG,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;IACvB,CAAC,CAAC;EACJ;EACAC,gBAAgBA,CAACjB,MAAM,EAAE;IACvB,OAAQ,GAAEN,IAAI,CAACwB,KAAK,CAACC,QAAS,GAAEnB,MAAO,EAAC;EAC1C;EACAI,gBAAgBA,CAACJ,MAAM,EAAE;IACvB,OAAQ,GAAEN,IAAI,CAACwB,KAAK,CAACE,QAAS,GAAEpB,MAAO,EAAC;EAC1C;EACAQ,OAAOA,CAACX,OAAO,EAAE;IACf,IAAI,IAAI,CAACwB,SAAS,EAAE;MAClB,OAAO,IAAI,CAACA,SAAS;IACvB;IACA,IAAI,CAACA,SAAS,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAChD,MAAMC,cAAc,GAAG5B,OAAO,IAAI,IAAI,CAACD,QAAQ;MAC/C,IAAI8B,YAAY;MAChB,IAAID,cAAc,EAAE;QAClBC,YAAY,GAAGC,UAAU,CAAC,MAAM;UAC9B,MAAMpC,KAAK,GAAGlD,aAAa,CAACL,cAAc,CAAC,CAAC,CAAC,EAAEO,QAAQ,CAACqF,OAAO,CAAC,EAAE;YAChEhE,IAAI,EAAE;cAAEiC,OAAO,EAAE4B;YAAe;UAClC,CAAC,CAAC;UACFD,MAAM,CAACjC,KAAK,CAAC;QACf,CAAC,EAAEkC,cAAc,CAAC;MACpB;MACA,MAAMI,gBAAgB,GAAGnC,IAAI,CAACwB,KAAK,CAACY,OAAO;MAC3C,MAAMC,mBAAmB,GAAG,IAAI,CAAC3B,gBAAgB,CAACyB,gBAAgB,CAAC;MACnE,MAAMG,mBAAmB,GAAG,IAAI,CAACf,gBAAgB,CAACY,gBAAgB,CAAC;MACnE,MAAMI,mBAAmB,GAAGA,CAAA,KAAM;QAChCC,YAAY,CAACR,YAAY,CAAC;QAC1BH,OAAO,CAAC,CAAC;MACX,CAAC;MACD,IAAI,CAAC5B,MAAM,CAACZ,EAAE,CAACgD,mBAAmB,EAAEE,mBAAmB,CAAC;MACxD,MAAME,sBAAsB,GAAGA,CAAA,KAAM;QACnC,IAAI,CAACxC,MAAM,CAACpB,IAAI,CAACwD,mBAAmB,CAAC;QACrCE,mBAAmB,CAAC,CAAC;MACvB,CAAC;MACD,IAAI,CAACtC,MAAM,CAACZ,EAAE,CAACiD,mBAAmB,EAAEG,sBAAsB,CAAC;MAC3D,IAAI,CAACxC,MAAM,CAACpB,IAAI,CAACyD,mBAAmB,CAAC;IACvC,CAAC,CAAC;IACF,OAAO,IAAI,CAACX,SAAS;EACvB;EACApB,cAAcA,CAACD,MAAM,EAAEhC,OAAO,EAAE;IAC9B,IAAI,IAAI,CAACoE,QAAQ,CAACpC,MAAM,CAAC,EAAE;MACzB,MAAM,IAAIqC,KAAK,CAAE,GAAErC,MAAO,qBAAoB,CAAC;IACjD;IACA,IAAI,CAACoC,QAAQ,CAACpC,MAAM,CAAC,GAAGhC,OAAO;IAC/B,MAAMsE,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACjB,MAAM,CAAC;IAClD,MAAMuC,eAAe,GAAIrC,YAAY,IAAK;MACxC,MAAMC,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACJ,MAAM,CAAC;MAClD,IAAI,CAACE,YAAY,CAACK,EAAE,EAAE;QACpBvC,OAAO,CAAC,GAAGkC,YAAY,CAACsC,MAAM,CAAC;QAC/B;MACF;MACAlB,OAAO,CAACC,OAAO,CAACvD,OAAO,CAAC,GAAGkC,YAAY,CAACsC,MAAM,CAAC,CAAC,CAACC,IAAI,CAAEjE,MAAM,IAAK;QAChE,MAAM6B,YAAY,GAAG;UACnBC,OAAO,EAAE,KAAK;UACd9B,MAAM;UACN+B,EAAE,EAAEL,YAAY,CAACK;QACnB,CAAC;QACD,IAAI,CAACZ,MAAM,CAACpB,IAAI,CAAC4B,YAAY,EAAEE,YAAY,CAAC;MAC9C,CAAC,CAAC,CAACqC,KAAK,CAAEnD,KAAK,IAAK;QAClB,MAAMc,YAAY,GAAG;UACnBC,OAAO,EAAE,KAAK;UACdC,EAAE,EAAEL,YAAY,CAACK,EAAE;UACnBhB,KAAK,EAAE;YACL9C,IAAI,EAAE,CAAC8C,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAAC9C,IAAI,KAAKF,QAAQ,CAACI,iBAAiB,CAACF,IAAI;YAC9EC,OAAO,EAAE,CAAC6C,KAAK,IAAI,IAAI,GAAG,KAAK,CAAC,GAAGA,KAAK,CAAC7C,OAAO,KAAKH,QAAQ,CAACI,iBAAiB,CAACD,OAAO;YACvFkB,IAAI,EAAE;UACR;QACF,CAAC;QACD,IAAI,CAAC+B,MAAM,CAACpB,IAAI,CAAC4B,YAAY,EAAEE,YAAY,CAAC;MAC9C,CAAC,CAAC;IACJ,CAAC;IACD,IAAI,CAACV,MAAM,CAACZ,EAAE,CAACuD,YAAY,EAAEC,eAAe,CAAC;EAC/C;EACAI,YAAYA,CAAC3C,MAAM,EAAE;IACnB,IAAI,CAAC,IAAI,CAACoC,QAAQ,CAACpC,MAAM,CAAC,EAAE;MAC1B,OAAO,IAAI,CAACoC,QAAQ,CAACpC,MAAM,CAAC;IAC9B;IACA,MAAMsC,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACjB,MAAM,CAAC;IAClD,IAAI,CAACL,MAAM,CAACT,GAAG,CAACoD,YAAY,CAAC;EAC/B;EACAM,MAAMA,CAAC5C,MAAM,EAAE,GAAG/B,IAAI,EAAE;IACtB,OAAO,IAAIqD,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMqB,OAAO,GAAG5E,IAAI,CAACA,IAAI,CAACH,MAAM,GAAG,CAAC,CAAC;MACrC,MAAMgF,gBAAgB,GAAGD,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,KAAKE,OAAO,CAACC,GAAG,CAACH,OAAO,EAAE,UAAU,CAAC,IAAIE,OAAO,CAACC,GAAG,CAACH,OAAO,EAAE,SAAS,CAAC,CAAC;MACxI,MAAM9F,OAAO,GAAG+F,gBAAgB,GAAGD,OAAO,GAAG;QAAEI,QAAQ,EAAE,KAAK;QAAEpD,OAAO,EAAE;MAAE,CAAC;MAC5E,MAAM2C,MAAM,GAAGM,gBAAgB,GAAG7E,IAAI,CAACiF,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGjF,IAAI;MAC1D,MAAMqE,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACjB,MAAM,CAAC;MAClD,MAAMmD,UAAU,GAAGzD,IAAI,CAACe,IAAI,CAAC,CAAC;MAC9B,MAAMP,YAAY,GAAG;QACnBI,OAAO,EAAE,KAAK;QACdN,MAAM;QACNwC,MAAM;QACNjC,EAAE,EAAE4C;MACN,CAAC;MACD,IAAI,CAACxD,MAAM,CAACpB,IAAI,CAAC+D,YAAY,EAAEpC,YAAY,CAAC;MAC5C,IAAI,CAACnD,OAAO,CAACkG,QAAQ,EAAE;QACrB,MAAM9C,YAAY,GAAG,IAAI,CAACC,gBAAgB,CAACJ,MAAM,CAAC;QAClD,MAAMH,OAAO,GAAG9C,OAAO,CAAC8C,OAAO,IAAI,IAAI,CAACD,QAAQ;QAChD,IAAIwD,KAAK;QACT,IAAIvD,OAAO,EAAE;UACXuD,KAAK,GAAGzB,UAAU,CAAC,MAAM;YACvB,MAAMpC,KAAK,GAAGlD,aAAa,CAACL,cAAc,CAAC,CAAC,CAAC,EAAEO,QAAQ,CAACC,eAAe,CAAC,EAAE;cACxEoB,IAAI,EAAE;gBAAEiC;cAAQ;YAClB,CAAC,CAAC;YACF2B,MAAM,CAACjC,KAAK,CAAC;UACf,CAAC,EAAEM,OAAO,CAAC;QACb;QACA,MAAMwD,eAAe,GAAIhD,YAAY,IAAK;UACxC,IAAIA,YAAY,CAACE,EAAE,KAAK4C,UAAU,EAAE;YAClCjB,YAAY,CAACkB,KAAK,CAAC;YACnB,IAAI,CAACzD,MAAM,CAACT,GAAG,CAACiB,YAAY,EAAEkD,eAAe,CAAC;YAC9C,IAAI,CAAChD,YAAY,CAACd,KAAK,EAAE;cACvBgC,OAAO,CAAClB,YAAY,CAAC7B,MAAM,CAAC;YAC9B,CAAC,MAAM;cACLgD,MAAM,CAACnB,YAAY,CAACd,KAAK,CAAC;YAC5B;UACF;QACF,CAAC;QACD,IAAI,CAACI,MAAM,CAACZ,EAAE,CAACoB,YAAY,EAAEkD,eAAe,CAAC;MAC/C,CAAC,MAAM;QACL9B,OAAO,CAAC,KAAK,CAAC,CAAC;MACjB;IACF,CAAC,CAAC;EACJ;EACAlC,OAAOA,CAAA,EAAG;IACRzE,MAAM,CAACmF,OAAO,CAAC,IAAI,CAACqC,QAAQ,CAAC,CAACrE,OAAO,CAAC,CAAC,CAACiC,MAAM,CAAC,KAAK;MAClD,MAAMsC,YAAY,GAAG,IAAI,CAACrB,gBAAgB,CAACjB,MAAM,CAAC;MAClD,IAAI,CAACL,MAAM,CAACT,GAAG,CAACoD,YAAY,CAAC;IAC/B,CAAC,CAAC;IACF,MAAMP,mBAAmB,GAAG,IAAI,CAAC3B,gBAAgB,CAACV,IAAI,CAACwB,KAAK,CAACY,OAAO,CAAC;IACrE,MAAME,mBAAmB,GAAG,IAAI,CAACf,gBAAgB,CAACvB,IAAI,CAACwB,KAAK,CAACY,OAAO,CAAC;IACrE,IAAI,CAACnC,MAAM,CAACT,GAAG,CAAC8C,mBAAmB,CAAC;IACpC,IAAI,CAACrC,MAAM,CAACT,GAAG,CAAC6C,mBAAmB,CAAC;IACpC,IAAI,IAAI,CAACpC,MAAM,CAACN,OAAO,EAAE;MACvB,IAAI,CAACM,MAAM,CAACN,OAAO,CAAC,CAAC;IACvB;EACF;AACF,CAAC;AACD,IAAIiE,GAAG,GAAG5D,IAAI;AACdpD,aAAa,CAACgH,GAAG,EAAE,OAAO,EAAE/G,QAAQ,CAAC;AACrCD,aAAa,CAACgH,GAAG,EAAE,OAAO,EAAE;EAC1BnC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE,MAAM;EAChBU,OAAO,EAAE,qBAAqB;EAC9ByB,YAAY,EAAE;AAChB,CAAC,CAAC;AACF,SAASD,GAAG,EAAE/G,QAAQ,EAAEM,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}