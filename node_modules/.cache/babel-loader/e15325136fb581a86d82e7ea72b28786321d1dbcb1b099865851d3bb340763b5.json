{"ast":null,"code":"import { DatabaseErrorCode } from '../../constant';\nimport { getGroupMemberInfoByGroupIDUserID as databaseGetGroupMemberInfoByGroupIDUserID, getAllGroupMemberList as databaseGetAllGroupMemberList, getAllGroupMemberUserIDList as databaseGetAllGroupMemberUserIDList, getGroupMemberCount as databaseGetGroupMemberCount, getGroupSomeMemberInfo as databaseGetGroupSomeMemberInfo, getGroupAdminID as databaseGetGroupAdminID, getGroupMemberListByGroupID as databaseGetGroupMemberListByGroupID, getGroupMemberListSplit as databaseGetGroupMemberListSplit, getGroupMemberOwnerAndAdmin as databaseGetGroupMemberOwnerAndAdmin, getGroupMemberOwner as databaseGetGroupMemberOwner, getGroupMemberListSplitByJoinTimeFilter as databaseGetGroupMemberListSplitByJoinTimeFilter, getGroupOwnerAndAdminByGroupID as databaseGetGroupOwnerAndAdminByGroupID, getGroupMemberUIDListByGroupID as databaseGetGroupMemberUIDListByGroupID, insertGroupMember as databaseInsertGroupMember, batchInsertGroupMember as databaseBatchInsertGroupMember, deleteGroupMember as databaseDeleteGroupMember, deleteGroupAllMembers as databaseDeleteGroupAllMembers, updateGroupMember as databaseUpdateGroupMember, updateGroupMemberField as databaseUpdateGroupMemberField, searchGroupMembers as databaseSearchGroupMembers } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getGroupMemberInfoByGroupIDUserID(groupID, userID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberInfoByGroupIDUserID(db, groupID, userID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    })[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getAllGroupMemberList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetAllGroupMemberList(db);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getAllGroupMemberUserIDList() {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetAllGroupMemberUserIDList(db);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberCount(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberCount(db, groupID);\n    return formatResponse(execResult[0]?.values[0]?.[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupSomeMemberInfo(groupID, userIDListStr) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupSomeMemberInfo(db, groupID, JSON.parse(userIDListStr));\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupAdminID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupAdminID(db, groupID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase').map(member => member.userID));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberListByGroupID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberListByGroupID(db, groupID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberListSplit(groupID, filter, offset, count) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberListSplit(db, groupID, filter, offset, count);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberOwnerAndAdmin(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberOwnerAndAdmin(db, groupID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberOwner(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberOwner(db, groupID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    })[0]);\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberListSplitByJoinTimeFilter(groupID, offset, count, joinTimeBegin = 0, joinTimeEnd = 100000000000, userIDListStr) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberListSplitByJoinTimeFilter(db, groupID, offset, count, joinTimeBegin, joinTimeEnd, JSON.parse(userIDListStr));\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupOwnerAndAdminByGroupID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupOwnerAndAdminByGroupID(db, groupID);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function getGroupMemberUIDListByGroupID(groupID) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseGetGroupMemberUIDListByGroupID(db, groupID);\n    const userIDList = converSqlExecResult(execResult[0], 'CamelCase');\n    return formatResponse(userIDList.map(item => item.userID));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function insertGroupMember(localGroupMemberStr) {\n  try {\n    const db = await getInstance();\n    const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n      faceURL: 'user_group_face_url'\n    }));\n    databaseInsertGroupMember(db, localGroup);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function batchInsertGroupMember(localGroupMemberStr) {\n  try {\n    const db = await getInstance();\n    const localGroupList = (JSON.parse(localGroupMemberStr) || []).map(v => convertToSnakeCaseObject(convertObjectField(v, {\n      faceURL: 'user_group_face_url'\n    })));\n    databaseBatchInsertGroupMember(db, localGroupList);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteGroupMember(groupID, userID) {\n  try {\n    const db = await getInstance();\n    databaseDeleteGroupMember(db, groupID, userID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function deleteGroupAllMembers(groupID) {\n  try {\n    const db = await getInstance();\n    databaseDeleteGroupAllMembers(db, groupID);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateGroupMember(localGroupMemberStr) {\n  try {\n    const db = await getInstance();\n    const localGroupMember = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n      faceURL: 'user_group_face_url'\n    }));\n    databaseUpdateGroupMember(db, localGroupMember);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function updateGroupMemberField(groupID, userID, localGroupMemberStr) {\n  try {\n    const db = await getInstance();\n    const localGroupMember = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n      faceURL: 'user_group_face_url'\n    }));\n    databaseUpdateGroupMemberField(db, groupID, userID, localGroupMember);\n    return formatResponse('');\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}\nexport async function searchGroupMembers(keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count) {\n  try {\n    const db = await getInstance();\n    const execResult = databaseSearchGroupMembers(db, keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count);\n    return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n      user_group_face_url: 'faceURL'\n    }));\n  } catch (e) {\n    console.error(e);\n    return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n  }\n}","map":{"version":3,"names":["DatabaseErrorCode","getGroupMemberInfoByGroupIDUserID","databaseGetGroupMemberInfoByGroupIDUserID","getAllGroupMemberList","databaseGetAllGroupMemberList","getAllGroupMemberUserIDList","databaseGetAllGroupMemberUserIDList","getGroupMemberCount","databaseGetGroupMemberCount","getGroupSomeMemberInfo","databaseGetGroupSomeMemberInfo","getGroupAdminID","databaseGetGroupAdminID","getGroupMemberListByGroupID","databaseGetGroupMemberListByGroupID","getGroupMemberListSplit","databaseGetGroupMemberListSplit","getGroupMemberOwnerAndAdmin","databaseGetGroupMemberOwnerAndAdmin","getGroupMemberOwner","databaseGetGroupMemberOwner","getGroupMemberListSplitByJoinTimeFilter","databaseGetGroupMemberListSplitByJoinTimeFilter","getGroupOwnerAndAdminByGroupID","databaseGetGroupOwnerAndAdminByGroupID","getGroupMemberUIDListByGroupID","databaseGetGroupMemberUIDListByGroupID","insertGroupMember","databaseInsertGroupMember","batchInsertGroupMember","databaseBatchInsertGroupMember","deleteGroupMember","databaseDeleteGroupMember","deleteGroupAllMembers","databaseDeleteGroupAllMembers","updateGroupMember","databaseUpdateGroupMember","updateGroupMemberField","databaseUpdateGroupMemberField","searchGroupMembers","databaseSearchGroupMembers","converSqlExecResult","convertObjectField","convertToSnakeCaseObject","formatResponse","getInstance","groupID","userID","db","execResult","user_group_face_url","e","console","error","undefined","ErrorInit","JSON","stringify","values","userIDListStr","parse","map","member","filter","offset","count","joinTimeBegin","joinTimeEnd","userIDList","item","localGroupMemberStr","localGroup","faceURL","localGroupList","v","localGroupMember","keyword","isSearchMemberNickname","isSearchUserID"],"sources":["C:/ysx/xm/mark/web/node_modules/open-im-sdk-wasm/lib/api/database/groupMember.js"],"sourcesContent":["import { DatabaseErrorCode } from '../../constant';\nimport { getGroupMemberInfoByGroupIDUserID as databaseGetGroupMemberInfoByGroupIDUserID, getAllGroupMemberList as databaseGetAllGroupMemberList, getAllGroupMemberUserIDList as databaseGetAllGroupMemberUserIDList, getGroupMemberCount as databaseGetGroupMemberCount, getGroupSomeMemberInfo as databaseGetGroupSomeMemberInfo, getGroupAdminID as databaseGetGroupAdminID, getGroupMemberListByGroupID as databaseGetGroupMemberListByGroupID, getGroupMemberListSplit as databaseGetGroupMemberListSplit, getGroupMemberOwnerAndAdmin as databaseGetGroupMemberOwnerAndAdmin, getGroupMemberOwner as databaseGetGroupMemberOwner, getGroupMemberListSplitByJoinTimeFilter as databaseGetGroupMemberListSplitByJoinTimeFilter, getGroupOwnerAndAdminByGroupID as databaseGetGroupOwnerAndAdminByGroupID, getGroupMemberUIDListByGroupID as databaseGetGroupMemberUIDListByGroupID, insertGroupMember as databaseInsertGroupMember, batchInsertGroupMember as databaseBatchInsertGroupMember, deleteGroupMember as databaseDeleteGroupMember, deleteGroupAllMembers as databaseDeleteGroupAllMembers, updateGroupMember as databaseUpdateGroupMember, updateGroupMemberField as databaseUpdateGroupMemberField, searchGroupMembers as databaseSearchGroupMembers, } from '../../sqls';\nimport { converSqlExecResult, convertObjectField, convertToSnakeCaseObject, formatResponse, } from '../../utils';\nimport { getInstance } from './instance';\nexport async function getGroupMemberInfoByGroupIDUserID(groupID, userID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberInfoByGroupIDUserID(db, groupID, userID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        })[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getAllGroupMemberList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetAllGroupMemberList(db);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getAllGroupMemberUserIDList() {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetAllGroupMemberUserIDList(db);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase'));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberCount(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberCount(db, groupID);\n        return formatResponse(execResult[0]?.values[0]?.[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupSomeMemberInfo(groupID, userIDListStr) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupSomeMemberInfo(db, groupID, JSON.parse(userIDListStr));\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupAdminID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupAdminID(db, groupID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase').map(member => member.userID));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberListByGroupID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberListByGroupID(db, groupID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberListSplit(groupID, filter, offset, count) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberListSplit(db, groupID, filter, offset, count);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberOwnerAndAdmin(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberOwnerAndAdmin(db, groupID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberOwner(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberOwner(db, groupID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        })[0]);\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberListSplitByJoinTimeFilter(groupID, offset, count, joinTimeBegin = 0, joinTimeEnd = 100000000000, userIDListStr) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberListSplitByJoinTimeFilter(db, groupID, offset, count, joinTimeBegin, joinTimeEnd, JSON.parse(userIDListStr));\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupOwnerAndAdminByGroupID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupOwnerAndAdminByGroupID(db, groupID);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function getGroupMemberUIDListByGroupID(groupID) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseGetGroupMemberUIDListByGroupID(db, groupID);\n        const userIDList = converSqlExecResult(execResult[0], 'CamelCase');\n        return formatResponse(userIDList.map(item => item.userID));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function insertGroupMember(localGroupMemberStr) {\n    try {\n        const db = await getInstance();\n        const localGroup = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n            faceURL: 'user_group_face_url',\n        }));\n        databaseInsertGroupMember(db, localGroup);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function batchInsertGroupMember(localGroupMemberStr) {\n    try {\n        const db = await getInstance();\n        const localGroupList = (JSON.parse(localGroupMemberStr) || []).map((v) => convertToSnakeCaseObject(convertObjectField(v, {\n            faceURL: 'user_group_face_url',\n        })));\n        databaseBatchInsertGroupMember(db, localGroupList);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteGroupMember(groupID, userID) {\n    try {\n        const db = await getInstance();\n        databaseDeleteGroupMember(db, groupID, userID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function deleteGroupAllMembers(groupID) {\n    try {\n        const db = await getInstance();\n        databaseDeleteGroupAllMembers(db, groupID);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateGroupMember(localGroupMemberStr) {\n    try {\n        const db = await getInstance();\n        const localGroupMember = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n            faceURL: 'user_group_face_url',\n        }));\n        databaseUpdateGroupMember(db, localGroupMember);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function updateGroupMemberField(groupID, userID, localGroupMemberStr) {\n    try {\n        const db = await getInstance();\n        const localGroupMember = convertToSnakeCaseObject(convertObjectField(JSON.parse(localGroupMemberStr), {\n            faceURL: 'user_group_face_url',\n        }));\n        databaseUpdateGroupMemberField(db, groupID, userID, localGroupMember);\n        return formatResponse('');\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\nexport async function searchGroupMembers(keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count) {\n    try {\n        const db = await getInstance();\n        const execResult = databaseSearchGroupMembers(db, keyword, groupID, isSearchMemberNickname, isSearchUserID, offset, count);\n        return formatResponse(converSqlExecResult(execResult[0], 'CamelCase', [], {\n            user_group_face_url: 'faceURL',\n        }));\n    }\n    catch (e) {\n        console.error(e);\n        return formatResponse(undefined, DatabaseErrorCode.ErrorInit, JSON.stringify(e));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}